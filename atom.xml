<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr.AZ</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://oldaz.github.io/"/>
  <updated>2020-08-15T04:09:57.518Z</updated>
  <id>https://oldaz.github.io/</id>
  
  <author>
    <name>Mr.AZ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaWeb知识核心--Servlet体系结构</title>
    <link href="https://oldaz.github.io/2020/08/15/JavaWeb%E7%9F%A5%E8%AF%86%E6%A0%B8%E5%BF%83--Servlet%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    <id>https://oldaz.github.io/2020/08/15/JavaWeb%E7%9F%A5%E8%AF%86%E6%A0%B8%E5%BF%83--Servlet%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</id>
    <published>2020-08-15T04:09:06.000Z</published>
    <updated>2020-08-15T04:09:57.518Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200815120803119.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="体系结构"></p><h1 id="Servlet-–接口"><a href="#Servlet-–接口" class="headerlink" title="Servlet –接口"></a>Servlet –接口</h1><pre><code>  Servlet          --接口GenericServlet    --抽象类HttpServlet       --抽象类</code></pre>  <a id="more"></a><h2 id="GenericServlet"><a href="#GenericServlet" class="headerlink" title="GenericServlet"></a>GenericServlet</h2><pre><code>里面只有一个service方法作为抽象，因为里面其他方法已经默认做了空实现其他方法可选择性实现</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.GenericServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo2</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="HttpServlet"><a href="#HttpServlet" class="headerlink" title="HttpServlet"></a>HttpServlet</h1><p><img src="https://img-blog.csdnimg.cn/20200815113719610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><pre><code>因为要判断get和post方式，很麻烦，因此sun公司帮我们实现了这个判断-HttpServletHttpServlet：对http协议的封装，简化操作</code></pre><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>定义类继承HttpServlet</li><li>复写doGet() / doPost()方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="meta">@WebServlet</span>(urlPatterns = <span class="string">"/s3"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo3</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"doget..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"doPost..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Servlet相关配置"><a href="#Servlet相关配置" class="headerlink" title="Servlet相关配置"></a>Servlet相关配置</h1><h2 id="urlpartten"><a href="#urlpartten" class="headerlink" title="urlpartten"></a>urlpartten</h2><ol><li><p>Servlet访问路径<br>   注解里面可以定义多个路径<br> @WebServlet(urlPatterns = {“/s3”,”/s31”,”/s32”})</p></li><li><p>路径定义规则</p><pre><code>1.   /xxx2.   /xxx/xxx   :多层路径，目录结构        @WebServlet(urlPatterns = &quot;/user/s1&quot;)        @WebServlet(urlPatterns = &quot;/user/*&quot;)        @WebServlet(urlPatterns = &quot;/*&quot;)        //*代表任意路径，通配符3.   *.do        @WebServlet(urlPatterns = &quot;*.do&quot;)        // 路劲前面不能加/，否则报错，访问为xxx.do        //后缀名可以为任意的</code></pre></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200815120803119.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;体系结构&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Servlet-–接口&quot;&gt;&lt;a href=&quot;#Servlet-–接口&quot; class=&quot;headerlink&quot; title=&quot;Servlet –接口&quot;&gt;&lt;/a&gt;Servlet –接口&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;  Servlet          --接口
GenericServlet    --抽象类
HttpServlet       --抽象类&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://oldaz.github.io/tags/Java/"/>
    
      <category term="Servlet" scheme="https://oldaz.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb知识核心--Servlet周期和注解</title>
    <link href="https://oldaz.github.io/2020/08/15/JavaWeb%E7%9F%A5%E8%AF%86%E6%A0%B8%E5%BF%83--Servlet%E5%91%A8%E6%9C%9F%E5%92%8C%E6%B3%A8%E8%A7%A3/"/>
    <id>https://oldaz.github.io/2020/08/15/JavaWeb%E7%9F%A5%E8%AF%86%E6%A0%B8%E5%BF%83--Servlet%E5%91%A8%E6%9C%9F%E5%92%8C%E6%B3%A8%E8%A7%A3/</id>
    <published>2020-08-15T03:06:28.000Z</published>
    <updated>2020-08-15T03:07:13.777Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200815110437717.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="servlet"></p><h1 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h1><h2 id="最重要的三个方法"><a href="#最重要的三个方法" class="headerlink" title="最重要的三个方法"></a>最重要的三个方法</h2><ol><li><p>被创建</p><pre><code>执行init()方法只执行一次</code></pre></li><li><p>提供服务</p><pre><code>执行Service方法，执行多次</code></pre></li><li><p>被销毁</p><pre><code>执行Destory()方法，只执行一次</code></pre><a id="more"></a><h2 id="代码案例"><a href="#代码案例" class="headerlink" title="代码案例"></a>代码案例</h2></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo2</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//初始化方法，在servlet被创建之前执行，只会执行一次</span></span><br><span class="line">    <span class="comment">//加载资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"init..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//获取Servletconfig对象的，就是Servlet的配置对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//提供服务的方法每一次Servlet被访问时，执行。执行多次</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Servlet..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//获取Servlet的一些信息，版本，作者等等。。。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//销毁方法，只有在服务器正常关闭时会执行，执行一次</span></span><br><span class="line">              <span class="comment">//被销毁之前执行，一般用于释放资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"destory..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小疑问"><a href="#小疑问" class="headerlink" title="小疑问"></a>小疑问</h2><h3 id="Servlet什么时候被创建？"><a href="#Servlet什么时候被创建？" class="headerlink" title="Servlet什么时候被创建？"></a>Servlet什么时候被创建？</h3><pre><code>* 默认情况下，第一次被访问时* servlet被创建。可以配置指定Servlet的创建时机。</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!--    配置servlet标签--&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        这是配置名称为Demo1的文件路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.web.servlet.ServletDemo1<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        指定Servlet的创建时间</span></span><br><span class="line"><span class="comment">            1.第一次被访问时。创建</span></span><br><span class="line"><span class="comment">                标签里面的值为负数，第一次访问时被创建</span></span><br><span class="line"><span class="comment">            2.在服务器启动时，创建</span></span><br><span class="line"><span class="comment">                标签里面的值为0或正整数，服务器启动时被创建</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        这是给名称demo1配置访问路径/demo1--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Servlet是单例的"><a href="#Servlet是单例的" class="headerlink" title="Servlet是单例的"></a>Servlet是单例的</h3><pre><code>Servlet的init()方法，只执行一次，说明Servlet在内存中只存在一个对象，Servlet是单例的</code></pre><p>多个用户同时访问时。可能会存在线程安全问题</p><pre><code>解决：      1.不能加锁    2.设置全局静态代码块，严重影响性能。      解决方案：设置局部代码块，即使定义了成员变量，也不要对其修改值</code></pre><h1 id="Servlet3-0-4-0"><a href="#Servlet3-0-4-0" class="headerlink" title="Servlet3.0/4.0"></a>Servlet3.0/4.0</h1><p>支持注解配置。可以选择不使用web.xml</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li><p>创建JavaEE项目，选择Servlet版本3.0以上，可以不创建web.xml</p></li><li><p>定义一个类，实现Servlet接口（浏览器路径访问为，get方法访问）</p></li><li><p>复写方法</p></li><li><p>在类上使用@webServlet注解，进行配置</p><pre><code>@WebServlet(name = &quot;s1&quot;,urlPatterns = &quot;/s1&quot;)</code></pre></li></ol><p><img src="https://img-blog.csdnimg.cn/20200815102949169.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="创建步骤"><br><img src="https://img-blog.csdnimg.cn/2020081510361491.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="创建2"><br><img src="https://img-blog.csdnimg.cn/20200815103649444.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="代码"><br><img src="https://img-blog.csdnimg.cn/2020081510401558.png#pic_center" alt="访问"><br><img src="https://img-blog.csdnimg.cn/20200815104107109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="控制台"></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><pre><code>在Servlet3.0中，注解内部数据是这样的</code></pre><p><img src="https://img-blog.csdnimg.cn/20200815104406443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><pre><code>有一个属性value，一般默认为最重要的urlpatterns，可以使用           @WebServlet(&quot;/s1&quot;)。在注解4.0版本中，必须自己指定urlpatterns:      @WebServlet(name = &quot;s1&quot;,urlPatterns = &quot;/s1&quot;)</code></pre><h1 id="tomcat与IDEA"><a href="#tomcat与IDEA" class="headerlink" title="tomcat与IDEA"></a>tomcat与IDEA</h1><p><img src="https://img-blog.csdnimg.cn/20200815105956207.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200815110437717.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;servlet&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Servlet生命周期&quot;&gt;&lt;a href=&quot;#Servlet生命周期&quot; class=&quot;headerlink&quot; title=&quot;Servlet生命周期&quot;&gt;&lt;/a&gt;Servlet生命周期&lt;/h1&gt;&lt;h2 id=&quot;最重要的三个方法&quot;&gt;&lt;a href=&quot;#最重要的三个方法&quot; class=&quot;headerlink&quot; title=&quot;最重要的三个方法&quot;&gt;&lt;/a&gt;最重要的三个方法&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;被创建&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;执行init()方法只执行一次&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;提供服务&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;执行Service方法，执行多次&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;被销毁&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;执行Destory()方法，只执行一次&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://oldaz.github.io/tags/Java/"/>
    
      <category term="Servlet" scheme="https://oldaz.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb知识核心--Servlet快速入门</title>
    <link href="https://oldaz.github.io/2020/08/14/JavaWeb%E7%9F%A5%E8%AF%86%E6%A0%B8%E5%BF%83--Servlet%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <id>https://oldaz.github.io/2020/08/14/JavaWeb%E7%9F%A5%E8%AF%86%E6%A0%B8%E5%BF%83--Servlet%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</id>
    <published>2020-08-14T09:45:45.000Z</published>
    <updated>2020-08-14T09:47:11.429Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200814174407679.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="servlet快速入门"></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><pre><code>全名叫server  applet ，运行在服务端的小程序   servlet就是一个接口，定义了Java类被浏览器访问到（tomcat识别）的规则。   *将来我们自己定义一个类，实现Servlet接口，复写方法</code></pre><a id="more"></a><p><img src="https://img-blog.csdnimg.cn/20200814161110256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="servlet"></p><h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><ol><li>创建JavaEE项目</li><li>定义一个类，实现Servlet接口</li><li>实现接口中的抽象方法</li><li>配置Servlet</li></ol><h2 id="创建JavaEE项目"><a href="#创建JavaEE项目" class="headerlink" title="创建JavaEE项目"></a>创建JavaEE项目</h2><p><img src="https://img-blog.csdnimg.cn/20200814165340757.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""><br>点击next以后，输入项目名称。点击finish。即可完成创建。</p><h2 id="定义一个类，实现Servlet接口"><a href="#定义一个类，实现Servlet接口" class="headerlink" title="定义一个类，实现Servlet接口"></a>定义一个类，实现Servlet接口</h2><p><img src="https://img-blog.csdnimg.cn/2020081416561531.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""><br>创建一个类，实现接口Servlet。<br><img src="https://img-blog.csdnimg.cn/20200814165711754.png#pic_center" alt=""><br>如果servlet没有导入就去添加以下Tomcat的依赖：<br><img src="https://img-blog.csdnimg.cn/2020081416593896.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="1"><br><img src="https://img-blog.csdnimg.cn/20200814170326191.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h2 id="实现接口中的抽象方法"><a href="#实现接口中的抽象方法" class="headerlink" title="实现接口中的抽象方法"></a>实现接口中的抽象方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.servlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> OldAZ-PC</span></span><br><span class="line"><span class="comment"> * Servlet快速入门</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo1</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//提供服务的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello Servlet"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置Servlet"><a href="#配置Servlet" class="headerlink" title="配置Servlet"></a>配置Servlet</h2><p>在web/wei-inf 文件夹下面的xml文件里面配置servlet<br><img src="https://img-blog.csdnimg.cn/20200814170546478.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="配置"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    配置servlet标签--&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--    配置servlet标签--&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        这是配置名称为Demo1的文件路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.web.servlet.ServletDemo1<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        这是给名称demo1配置访问路径/demo1--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="启动小案例"><a href="#启动小案例" class="headerlink" title="启动小案例"></a>启动小案例</h1><p>点击启动后<br>在浏览器访问/demo1<br><img src="https://img-blog.csdnimg.cn/20200814171624727.png#pic_center" alt=""><br>控制台会出现</p><p><img src="https://img-blog.csdnimg.cn/20200814171706243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="控制台"></p><pre><code>出现了hello Servlet*里面出现的红色字体，是tomcat服务器的信息，不是报错。</code></pre><h1 id="Servlet执行原理"><a href="#Servlet执行原理" class="headerlink" title="Servlet执行原理"></a>Servlet执行原理</h1><ol><li>当服务器接收到客户端的请求后，会解析请求URL路径，获取访问的Servlet的资源路径。</li><li>查找web.xml文件，是否有对应的标签<url-pattern>内容。</li><li>如果有，则找到对应的<serclet-class>对应的全类名</li><li>tomcat会将字节码文件加载进内存，并且创建其对象。</li><li>调用其方法。<br><img src="https://img-blog.csdnimg.cn/20200814173455443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="原理"></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200814174407679.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;servlet快速入门&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;全名叫server  applet ，运行在服务端的小程序
   servlet就是一个接口，定义了Java类被浏览器访问到（tomcat识别）的规则。
   *将来我们自己定义一个类，实现Servlet接口，复写方法&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://oldaz.github.io/tags/Java/"/>
    
      <category term="快速入门" scheme="https://oldaz.github.io/tags/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    
      <category term="Servlet" scheme="https://oldaz.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>xml解析--Jsoup快捷查询方式</title>
    <link href="https://oldaz.github.io/2020/08/13/xml%E8%A7%A3%E6%9E%90--Jsoup%E5%BF%AB%E6%8D%B7%E6%9F%A5%E8%AF%A2%E6%96%B9%E5%BC%8F/"/>
    <id>https://oldaz.github.io/2020/08/13/xml%E8%A7%A3%E6%9E%90--Jsoup%E5%BF%AB%E6%8D%B7%E6%9F%A5%E8%AF%A2%E6%96%B9%E5%BC%8F/</id>
    <published>2020-08-13T08:18:35.000Z</published>
    <updated>2020-08-13T08:21:55.237Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200813152407270.png#pic_center" alt="查询"></p><h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><pre><code>以前当我们想获取&lt;student&gt; -&gt; &lt;name&gt;  -&gt;   &lt;xing&gt; -&gt; &quot;张&quot;时，我们需要先依次获取对应的标签。在获取内容   我们希望有一种快捷的方式，一下子就能定位到这里。   因此就有了快捷查询方式。</code></pre><a id="more"></a><h1 id="快捷查询方式"><a href="#快捷查询方式" class="headerlink" title="快捷查询方式"></a>快捷查询方式</h1><h2 id="selector"><a href="#selector" class="headerlink" title="selector"></a>selector</h2><pre><code>选择器查询  使用方法：Elements select(String cssQuery) </code></pre><h3 id="selector语法"><a href="#selector语法" class="headerlink" title="selector语法"></a>selector语法</h3><p> 参考selector中定义的语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xml.jsoup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> OldAZ-PC</span></span><br><span class="line"><span class="comment"> * 选择器查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupDemo5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1 获取student。xml的路径</span></span><br><span class="line">        String path = JsoupDemo2.class.getResource("student.xml").getPath();</span><br><span class="line">        <span class="comment">//2.获取Document对象</span></span><br><span class="line">        Document document = Jsoup.parse(<span class="keyword">new</span> File(path), <span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="comment">//3.查询name标签</span></span><br><span class="line">        Elements elements = document.select(<span class="string">"name"</span>);</span><br><span class="line">        System.out.println(elements);</span><br><span class="line">        System.out.println(<span class="string">"---------------"</span>);</span><br><span class="line">        <span class="comment">//4.查询id值为id01的元素</span></span><br><span class="line">        Elements elements1 = document.select(<span class="string">"#id01"</span>);</span><br><span class="line">        System.out.println(elements1);</span><br><span class="line">        System.out.println(<span class="string">"---------------"</span>);</span><br><span class="line">        <span class="comment">//5.获取student标签并且number属性值为xml_0001的age子标签</span></span><br><span class="line">          <span class="comment">//5.1获取student标签并且number属性为xml_0001</span></span><br><span class="line">        Elements elements2 = document.select(<span class="string">"student[number='xml_0001']"</span>);</span><br><span class="line">        System.out.println(elements2);</span><br><span class="line">        System.out.println(<span class="string">"---------------"</span>);</span><br><span class="line">          <span class="comment">//5.2获取student标签并且number属性值为xml_0001的age子标签</span></span><br><span class="line">        Elements elements3 = document.select(<span class="string">"student[number='xml_0001']&gt;age"</span>);</span><br><span class="line">        System.out.println(elements3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="XPath"><a href="#XPath" class="headerlink" title="XPath"></a>XPath</h2><p> w3c定义的一种语法</p><pre><code> XPath即为XML路径语言（XML Path Language）， 它是一种用来确定XML文档中某部分位置的语言。XPath基于XML的树状结构，提供在数据结构树中找寻节点的能力。起初XPath的提出的初衷是将其作为一个通用的、介于XPointer与XSL间的语法模型。但是XPath很快的被开发者采用来当作小型查询语言。</code></pre><p><strong>使用Jsoup的XPath需要导入额外的jar包</strong></p><pre><code>JsoupXpath-0.3.2.jar</code></pre><p>参考w3c的<a href="https://www.w3school.com.cn/xpath/xpath_syntax.asp" target="_blank" rel="noopener">XPath语法文档</a>来使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xml.jsoup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.wanghaomiao.xpath.model.JXDocument;</span><br><span class="line"><span class="keyword">import</span> cn.wanghaomiao.xpath.model.JXNode;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> OldAZ-PC</span></span><br><span class="line"><span class="comment"> * XPath查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupDemo6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1 获取student。xml的路径</span></span><br><span class="line">        String path = JsoupDemo2.class.getResource("student.xml").getPath();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取Document对象</span></span><br><span class="line">        Document document = Jsoup.parse(<span class="keyword">new</span> File(path), <span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="comment">//3.根据document对象，创建JXDocument对象</span></span><br><span class="line">        JXDocument jxDocument = <span class="keyword">new</span> JXDocument(document);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.1结合xpath语法查询所有的student标签</span></span><br><span class="line">        List&lt;JXNode&gt; jxNodes = jxDocument.selN(<span class="string">"//student"</span>);</span><br><span class="line">        <span class="keyword">for</span> (JXNode jxNode:jxNodes)&#123;</span><br><span class="line">        System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"==================="</span>);</span><br><span class="line">        <span class="comment">//4.2查询所有的student标签下的那么标签</span></span><br><span class="line">        List&lt;JXNode&gt; jxNodes2 = jxDocument.selN(<span class="string">"//student/name"</span>);</span><br><span class="line">        <span class="keyword">for</span> (JXNode jxNode:jxNodes2)&#123;</span><br><span class="line">            System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"==================="</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.3查询student标签下带有属性的name标签</span></span><br><span class="line">        List&lt;JXNode&gt; jxNodes3 = jxDocument.selN(<span class="string">"//student/name[@id]"</span>);</span><br><span class="line">        <span class="keyword">for</span> (JXNode jxNode:jxNodes3)&#123;</span><br><span class="line">            System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"==================="</span>);</span><br><span class="line">        <span class="comment">//4.3查询student标签下带有属性的name标签,并且id的属性值为id01</span></span><br><span class="line">        List&lt;JXNode&gt; jxNodes4 = jxDocument.selN(<span class="string">"//student/name[@id='id01']"</span>);</span><br><span class="line">        <span class="keyword">for</span> (JXNode jxNode:jxNodes4)&#123;</span><br><span class="line">            System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"==================="</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200813152407270.png#pic_center&quot; alt=&quot;查询&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;引入&quot;&gt;&lt;a href=&quot;#引入&quot; class=&quot;headerlink&quot; title=&quot;引入&quot;&gt;&lt;/a&gt;引入&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;以前当我们想获取&amp;lt;student&amp;gt; -&amp;gt; &amp;lt;name&amp;gt;  -&amp;gt;   &amp;lt;xing&amp;gt; -&amp;gt; &amp;quot;张&amp;quot;
时，我们需要先依次获取对应的标签。在获取内容
   我们希望有一种快捷的方式，一下子就能定位到这里。
   因此就有了快捷查询方式。&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://oldaz.github.io/tags/Java/"/>
    
      <category term="xml" scheme="https://oldaz.github.io/tags/xml/"/>
    
      <category term="快速入门" scheme="https://oldaz.github.io/tags/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    
      <category term="Jsoup" scheme="https://oldaz.github.io/tags/Jsoup/"/>
    
  </entry>
  
  <entry>
    <title>xml解析--Jsoup快速入门</title>
    <link href="https://oldaz.github.io/2020/08/13/xml%E8%A7%A3%E6%9E%90--Jsoup%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <id>https://oldaz.github.io/2020/08/13/xml%E8%A7%A3%E6%9E%90--Jsoup%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</id>
    <published>2020-08-13T06:35:50.000Z</published>
    <updated>2020-08-13T08:21:17.414Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200813143329389.png#pic_center" alt="jsoup"></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p> Jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</p><a id="more"></a><h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li><p>导入jar包</p><pre><code>jsoup-1.11.2.jar</code></pre></li><li><p>获取Document</p></li><li><p>获取对应的标签Element对象</p></li><li><p>获取数据</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xml.jsoup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> OldAZ-PC</span></span><br><span class="line"><span class="comment"> * Jsoup快速入门</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//2.获取Document对象,根据xml文档来获取</span></span><br><span class="line">        <span class="comment">//2.1 获取student。xml的路径</span></span><br><span class="line">        String path = JsoupDemo1.class.getResource("student.xml").getPath();</span><br><span class="line">        <span class="comment">//2.2解析xml文档，加载文档进入内存，获取dom树--&gt;Document</span></span><br><span class="line">        Document document = Jsoup.parse(<span class="keyword">new</span> File(path), <span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="comment">//3.获取元素对象</span></span><br><span class="line">        Elements elements = document.getElementsByTag(<span class="string">"name"</span>);</span><br><span class="line">        System.out.println(elements.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.1获取第一个name的element对象</span></span><br><span class="line">        Element element = elements.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.2获取数据</span></span><br><span class="line">        String name = element.text();</span><br><span class="line">        System.out.println(name);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="对象的使用"><a href="#对象的使用" class="headerlink" title="对象的使用"></a>对象的使用</h1><ol><li>Jsoup：工具类，可以解析html或者xml文档返回给Document对象。</li><li>Document：文档对象，代表内存中的dom树</li><li>Elements：元素Element对象的集合。可以当作ArrayList<Element>来使用</li><li>Element：元素对象</li><li>Node：节点对象<h2 id="Jsoup对象"><a href="#Jsoup对象" class="headerlink" title="Jsoup对象"></a>Jsoup对象</h2><ul><li>parse：解析html或者xml文档，返回Document<ul><li>parse(File in,String charsetName) :解析html或者xml文件的</li><li>parse(String html):解析xml或者html字符串的</li><li>parse(URL url ,int timeoutMillis):通过网络路径获取指定的HTML和xml的文档对象</li></ul></li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xml.jsoup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> OldAZ-PC</span></span><br><span class="line"><span class="comment"> * Jsoup对象功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//2.1 获取student。xml的路径</span></span><br><span class="line">        String path = JsoupDemo2.class.getResource("student.xml").getPath();</span><br><span class="line">        <span class="comment">//2.2解析xml文档，加载文档进入内存，获取dom树--&gt;Document</span></span><br><span class="line"><span class="comment">//        Document document = Jsoup.parse(new File(path), "utf-8");</span></span><br><span class="line"><span class="comment">//        System.out.println(document);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//parse(String html):解析xml或者html字符串的</span></span><br><span class="line">        String str = <span class="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n"</span> +</span><br><span class="line">                <span class="string">" &lt;students   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"</span> +</span><br><span class="line">                <span class="string">" \t\t\t xmlns=\"http://www.itcast.cn/xml\" \n"</span> +</span><br><span class="line">                <span class="string">" \t\t   xsi:schemaLocation=\"http://www.itcast.cn/xml  student.xsd\"\n"</span> +</span><br><span class="line">                <span class="string">" \t\t    &gt;\n"</span> +</span><br><span class="line">                <span class="string">" \t&lt;student number=\"xml_0001\"&gt;\n"</span> +</span><br><span class="line">                <span class="string">" \t\t&lt;name&gt;tom&lt;/name&gt;\n"</span> +</span><br><span class="line">                <span class="string">" \t\t&lt;age&gt;18&lt;/age&gt;\n"</span> +</span><br><span class="line">                <span class="string">" \t\t&lt;sex&gt;male&lt;/sex&gt;\n"</span> +</span><br><span class="line">                <span class="string">" \t&lt;/student&gt;\n"</span> +</span><br><span class="line">                <span class="string">"\t&lt;student number=\"xml_0002\"&gt;\n"</span> +</span><br><span class="line">                <span class="string">" \t\t&lt;name&gt;mark&lt;/name&gt;\n"</span> +</span><br><span class="line">                <span class="string">" \t\t&lt;age&gt;18&lt;/age&gt;\n"</span> +</span><br><span class="line">                <span class="string">" \t\t&lt;sex&gt;female&lt;/sex&gt;\n"</span> +</span><br><span class="line">                <span class="string">" \t&lt;/student&gt;\n"</span> +</span><br><span class="line">                <span class="string">"\t\t \n"</span> +</span><br><span class="line">                <span class="string">" &lt;/students&gt;"</span>;</span><br><span class="line">        Document document = Jsoup.parse(str);</span><br><span class="line">        System.out.println(document);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//parse(URL url ,int timeoutMillis):通过网络路径获取指定的HTML和xml的文档对象</span></span><br><span class="line">        <span class="comment">//代表网络中的资源路径</span></span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">"http://oldaz.top/"</span>);</span><br><span class="line">        Document document1 = Jsoup.parse(url, <span class="number">10000</span>);</span><br><span class="line">        System.out.println(document1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Document对象"><a href="#Document对象" class="headerlink" title="Document对象"></a>Document对象</h2><pre><code>文本对象，代表内存中的dom树</code></pre><h3 id="功能：获取Element对象"><a href="#功能：获取Element对象" class="headerlink" title="功能：获取Element对象"></a>功能：获取Element对象</h3><pre><code>getElementById(id):根据id属性值获取唯一的element对象getElementsByTag(String tagName):根据标签名称获取元素对象集合getElementsByAttribute(String key):根据属性名称来获取元素元素对象集合getElementsByAttribute(String key,String value):                     根据对应的属性名和属性值获取元素对象集合。</code></pre><h3 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h3><p>xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">students</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">student</span> <span class="attr">number</span>=<span class="string">"xml_0001"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">name</span> <span class="attr">id</span> =<span class="string">"id01"</span>&gt;</span>tom<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">sex</span>&gt;</span>male<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">student</span> <span class="attr">number</span>=<span class="string">"xml_0002"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">name</span>&gt;</span>mark<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">sex</span>&gt;</span>female<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br></pre></td></tr></table></figure><p>获取Elements对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xml.jsoup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> OldAZ-PC</span></span><br><span class="line"><span class="comment"> * Document/Element对象功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1 获取student。xml的路径</span></span><br><span class="line">        String path = JsoupDemo2.class.getResource("student.xml").getPath();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取Document对象</span></span><br><span class="line">        Document document = Jsoup.parse(<span class="keyword">new</span> File(path), <span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.获取元素对象</span></span><br><span class="line">        <span class="comment">// 3.1获取所有的student对象</span></span><br><span class="line">        Elements elements = document.getElementsByTag(<span class="string">"student"</span>);</span><br><span class="line">        System.out.println(elements);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"----------getEleentsById-----------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.2获取属性名为id的元素对象</span></span><br><span class="line">        Elements elements1 = document.getElementsByAttribute(<span class="string">"id"</span>);</span><br><span class="line">        System.out.println(elements1);</span><br><span class="line">        System.out.println(<span class="string">"--------------------"</span>);</span><br><span class="line">        <span class="comment">//3.3获取number属性值为xml_0001的元素对象</span></span><br><span class="line">        Elements elements2 = document.getElementsByAttributeValue(<span class="string">"number"</span>, <span class="string">"xml_0001"</span>);</span><br><span class="line">        System.out.println(elements2);</span><br><span class="line">        System.out.println(<span class="string">"--------------------"</span>);</span><br><span class="line">            <span class="comment">//3.4获取id属性值的元素对象</span></span><br><span class="line">        Element id01 = document.getElementById(<span class="string">"id01"</span>);</span><br><span class="line">        System.out.println(id01);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Element对象"><a href="#Element对象" class="headerlink" title="Element对象"></a>Element对象</h2><h3 id="获取子元素对象"><a href="#获取子元素对象" class="headerlink" title="获取子元素对象"></a>获取子元素对象</h3><pre><code>getElementById(id):根据id属性值获取唯一的element对象getElementsByTag(String tagName):根据标签名称获取元素对象集合getElementsByAttribute(String key):根据属性名称来获取元素元素对象集合getElementsByAttribute(String key,String value):                     根据对应的属性名和属性值获取元素对象集合。</code></pre><h3 id="获取属性值"><a href="#获取属性值" class="headerlink" title="获取属性值"></a>获取属性值</h3><pre><code>String attr(String key):根据属性名称获取属性值</code></pre><h3 id="获取文本内容"><a href="#获取文本内容" class="headerlink" title="获取文本内容"></a>获取文本内容</h3><pre><code>String text():获取文本内容String html():获取标签体的所有内容（包括子标签的字符串内容）</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xml.jsoup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> OldAZ-PC</span></span><br><span class="line"><span class="comment"> * Element对象功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupDemo4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1 获取student。xml的路径</span></span><br><span class="line">        String path = JsoupDemo2.class.getResource("student.xml").getPath();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取Document对象</span></span><br><span class="line">        Document document = Jsoup.parse(<span class="keyword">new</span> File(path), <span class="string">"utf-8"</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Element对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  获取子元素对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       getElementById(id):根据id属性值获取唯一的element对象</span></span><br><span class="line"><span class="comment">       getElementsByTag(String tagName):根据标签名称获取元素对象集合</span></span><br><span class="line"><span class="comment">       getElementsByAttribute(String key):根据属性名称来获取元素元素对象集合</span></span><br><span class="line"><span class="comment">       getElementsByAttribute(String key,String value):</span></span><br><span class="line"><span class="comment">                            根据对应的属性名和属性值获取元素对象集合。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  获取属性值</span></span><br><span class="line"><span class="comment">    String attr(String key):根据属性名称获取属性值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  获取文本内容</span></span><br><span class="line"><span class="comment">    String text():获取文本内容</span></span><br><span class="line"><span class="comment">    String html():获取标签体的所有内容（包括子标签的字符串内容）</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过document 对象获取name标签，获取所有的name标签   2个</span></span><br><span class="line">        Elements elements = document.getElementsByTag(<span class="string">"name"</span>);</span><br><span class="line">        System.out.println(elements.size());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//通过Element对象获取子标签对象</span></span><br><span class="line">        System.out.println(<span class="string">"---------------"</span>);</span><br><span class="line">        Element student_1 = document.getElementsByTag(<span class="string">"student"</span>).get(<span class="number">0</span>);</span><br><span class="line">        Elements stdent_1_name = student_1.getElementsByTag(<span class="string">"name"</span>);</span><br><span class="line">        System.out.println(stdent_1_name.size());</span><br><span class="line">            <span class="comment">//获取student对象的属性值</span></span><br><span class="line">        String number = student_1.attr(<span class="string">"number"</span>);</span><br><span class="line">        System.out.println(number);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取文本内容，text只获取纯文本内容，html会获取标签</span></span><br><span class="line">        String text = stdent_1_name.text();</span><br><span class="line">        String html = stdent_1_name.html();</span><br><span class="line">        System.out.println(text);</span><br><span class="line">        System.out.println(html);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Node节点对象"><a href="#Node节点对象" class="headerlink" title="Node节点对象"></a>Node节点对象</h2><pre><code>是Document和Element的父类 主要是包含增删改的方法</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200813143329389.png#pic_center&quot; alt=&quot;jsoup&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;p&gt; Jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://oldaz.github.io/tags/Java/"/>
    
      <category term="xml" scheme="https://oldaz.github.io/tags/xml/"/>
    
      <category term="快速入门" scheme="https://oldaz.github.io/tags/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    
      <category term="Jsoup" scheme="https://oldaz.github.io/tags/Jsoup/"/>
    
  </entry>
  
  <entry>
    <title>来看看XML到底是个啥--xml解析</title>
    <link href="https://oldaz.github.io/2020/08/12/%E6%9D%A5%E7%9C%8B%E7%9C%8BXML%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5--xml%E8%A7%A3%E6%9E%90/"/>
    <id>https://oldaz.github.io/2020/08/12/%E6%9D%A5%E7%9C%8B%E7%9C%8BXML%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5--xml%E8%A7%A3%E6%9E%90/</id>
    <published>2020-08-12T08:38:30.000Z</published>
    <updated>2020-08-12T08:39:16.160Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200812163705788.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="xml解析"></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>操作xml文档，将文档中的数据读取到内存中。</p><pre><code>操作xml文档：     1.解析（读取）：将文档中的数据读取到内存中              2.写入：将内存中的数据写到xml文档中。持久化的存储。</code></pre><a id="more"></a><h1 id="解析xml的方式"><a href="#解析xml的方式" class="headerlink" title="解析xml的方式"></a>解析xml的方式</h1><p>两种思想</p><ul><li><p>DOM思想（服务器端）</p><pre><code>将标记语言文档一次性加入内存中，在内存中形成dom树       优点：操作方便，可以对文档进行CRUD（增删改查）的所有操作       缺点：占内存（一次性读取，形成的dom树是文档大小的上千倍）</code></pre></li><li><p>SAX思想（移动端）</p><pre><code>逐行读取，基于事件驱动的   优点：不占内存   缺点：只能读取（不能增删改） </code></pre><p><img src="https://img-blog.csdnimg.cn/2020081216133641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="SAXs思想"></p><h1 id="xml常见的解析器"><a href="#xml常见的解析器" class="headerlink" title="xml常见的解析器"></a>xml常见的解析器</h1></li></ul><ol><li><p>JAXP</p><pre><code>sun公司提供的解析器，支持dom和sax两种思想* 性能不好，一般不会使用，了解即可</code></pre></li><li><p>DOM4J</p><pre><code>基于DOM思想的解析器*一款很优秀的解析器，使用于服务器端。   </code></pre></li><li><p>Jsounp</p><pre><code>jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。*由于xml刚开始就是为了代替html的，因此可以通过Jsoup解析xml。</code></pre></li><li><p>PULL</p><pre><code>安卓内置的解析器，sax方式的</code></pre></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200812163705788.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;xml解析&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;p&gt;操作xml文档，将文档中的数据读取到内存中。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;操作xml文档：
     1.解析（读取）：将文档中的数据读取到内存中         
     2.写入：将内存中的数据写到xml文档中。持久化的存储。&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://oldaz.github.io/tags/Java/"/>
    
      <category term="xml" scheme="https://oldaz.github.io/tags/xml/"/>
    
  </entry>
  
  <entry>
    <title>来看看XML到底是个啥--xml约束文档</title>
    <link href="https://oldaz.github.io/2020/08/11/%E6%9D%A5%E7%9C%8B%E7%9C%8BXML%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5--xml%E7%BA%A6%E6%9D%9F%E6%96%87%E6%A1%A3/"/>
    <id>https://oldaz.github.io/2020/08/11/%E6%9D%A5%E7%9C%8B%E7%9C%8BXML%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5--xml%E7%BA%A6%E6%9D%9F%E6%96%87%E6%A1%A3/</id>
    <published>2020-08-11T09:54:10.000Z</published>
    <updated>2020-08-11T10:03:46.778Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200811180313461.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="xml"></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><pre><code>规定xml文档的书写规则     * 作为框架的使用者（程序员）       1.能够在xml中引入约束文档       2.能够简单的读懂约束文档</code></pre> <a id="more"></a><h1 id="逻辑图"><a href="#逻辑图" class="headerlink" title="逻辑图"></a>逻辑图</h1><p>以下是约束文档的的作用和逻辑关系的图解：<br>   <img src="https://img-blog.csdnimg.cn/20200811160148642.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="约束"></p><h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><h2 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h2><pre><code>一种简单的约束文档</code></pre><h3 id="student-dtd"><a href="#student-dtd" class="headerlink" title="student.dtd"></a>student.dtd</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">students</span> (<span class="meta-keyword">student</span>*) &gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">student</span> (<span class="meta-keyword">name</span>,<span class="meta-keyword">age</span>,<span class="meta-keyword">sex</span>)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">name</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">age</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">sex</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ATTLIST <span class="meta-keyword">student</span> <span class="meta-keyword">number</span> <span class="meta-keyword">ID</span> <span class="meta-keyword">#REQUIRED</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这是对于约束文档的说明：<br><img src="https://img-blog.csdnimg.cn/20200811164408212.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="解释"></p><h3 id="引入约束文档"><a href="#引入约束文档" class="headerlink" title="引入约束文档"></a>引入约束文档</h3><p>1.内部dtd文档</p><pre><code>将约束规则定义在xml文档中（不常用）&lt;!DOCTYPE students [                        里面书写约束文档                    ]&gt;</code></pre><p>2.外部dtd文档</p><pre><code>将约束文档定义在外部dtd文件中     1.本地的   &lt;!DOCTYPE 根标签 SYSTEM &quot;外部的dtd文件&quot;&gt;   2.网络的    &lt;!DOCTYPE 根标签 PUBLIC &quot;dtd文件的名字&quot; &quot;外部的dtd文件URL&quot;&gt;</code></pre><h3 id="dtd实例"><a href="#dtd实例" class="headerlink" title="dtd实例"></a>dtd实例</h3><p>根据上面的约束文档书写的xml文档</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">students</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"student.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">students</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">student</span> <span class="attr">number</span>=<span class="string">"itcast_0001"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>tom<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sex</span>&gt;</span>male<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Schema"><a href="#Schema" class="headerlink" title="Schema"></a>Schema</h2><pre><code>一种复杂的约束技术弥补了dtd约束文档的缺陷（dtd定义的标签里面的值不能进行限制）。</code></pre><h3 id="student-xsd"><a href="#student-xsd" class="headerlink" title="student.xsd"></a>student.xsd</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--schema文档本身就是xml文档--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:schema</span> <span class="attr">xmlns</span>=<span class="string">"http://www.itcast.cn/xml"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsd</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">targetNamespace</span>=<span class="string">"http://www.itcast.cn/xml"</span> <span class="attr">elementFormDefault</span>=<span class="string">"qualified"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    定义元素，名字叫做students;元素的类型为studentsType ，自定义的studentsType需要在下面声明--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"students"</span> <span class="attr">type</span>=<span class="string">"studentsType"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    声明类型studentsType    complex：组合类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"studentsType"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        sequence表示按顺序出现 student元素  为studentType类型  最少出现0次   最多出现（未绑定）无数次--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"student"</span> <span class="attr">type</span>=<span class="string">"studentType"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    声明类型studentType  complex：组合类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"studentType"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        按顺序出现里面声明的标签--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"xsd:string"</span>/&gt;</span> <span class="comment">&lt;!--字符串--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">type</span>=<span class="string">"ageType"</span> /&gt;</span> <span class="comment">&lt;!--自定义类型--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">type</span>=<span class="string">"sexType"</span> /&gt;</span><span class="comment">&lt;!--自定义类型--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        属性名为number，类型为自定义类型numberType，必须出现--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"number"</span> <span class="attr">type</span>=<span class="string">"numberType"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--           声明sex类型   simple：简单类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:simpleType</span> <span class="attr">name</span>=<span class="string">"sexType"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        类型为String--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:restriction</span> <span class="attr">base</span>=<span class="string">"xsd:string"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            必须二选一--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:enumeration</span> <span class="attr">value</span>=<span class="string">"male"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:enumeration</span> <span class="attr">value</span>=<span class="string">"female"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--           声明age类型   simple：简单类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:simpleType</span> <span class="attr">name</span>=<span class="string">"ageType"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:restriction</span> <span class="attr">base</span>=<span class="string">"xsd:integer"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            最小值为0--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:minInclusive</span> <span class="attr">value</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            最大值为256--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:maxInclusive</span> <span class="attr">value</span>=<span class="string">"256"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--           声明number类型   simple：简单类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:simpleType</span> <span class="attr">name</span>=<span class="string">"numberType"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        类型为String--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:restriction</span> <span class="attr">base</span>=<span class="string">"xsd:string"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            命名规则--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:pattern</span> <span class="attr">value</span>=<span class="string">"xml_\d&#123;4&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:schema</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="引入schema文档"><a href="#引入schema文档" class="headerlink" title="引入schema文档"></a>引入schema文档</h3><p>1.填写xml文档的根元素<br>2.引入xsi前缀.  xmlns:xsi=”<a href="http://www.w3.org/2001/XMLSchema-instance&quot;" target="_blank" rel="noopener">http://www.w3.org/2001/XMLSchema-instance&quot;</a><br>3.引入xsd文件命名空间.  xsi:schemaLocation=”<a href="http://www.itcast.cn/xml" target="_blank" rel="noopener">http://www.itcast.cn/xml</a>  student.xsd”<br>4.为每一个xsd约束声明一个前缀,作为标识  xmlns=”<a href="http://www.itcast.cn/xml&quot;" target="_blank" rel="noopener">http://www.itcast.cn/xml&quot;</a> </p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><pre><code>这是一个只有一个约束文档的实例</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">students</span>   <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns</span>=<span class="string">"http://www.itcast.cn/xml"</span> </span></span><br><span class="line"><span class="tag"> </span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.itcast.cn/xml  student.xsd"</span></span></span><br><span class="line"><span class="tag">     &gt;</span> </span><br><span class="line">     <span class="comment">&lt;!-- 当有多个约束文档时可加前缀  xmlns：a(前缀)--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">student</span> <span class="attr">number</span>=<span class="string">"heima_0001"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">name</span>&gt;</span>tom<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">sex</span>&gt;</span>male<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br></pre></td></tr></table></figure><pre><code>以下是多个约束文档的实例（spring框架的配置文件）</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.cisol.mvcdemo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/resources/**"</span> <span class="attr">location</span>=<span class="string">"/resources/"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.ContentNegotiatingViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"order"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mediaTypes"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"json"</span> <span class="attr">value</span>=<span class="string">"application/json"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"xml"</span> <span class="attr">value</span>=<span class="string">"application/xml"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"htm"</span> <span class="attr">value</span>=<span class="string">"text/html"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultViews"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                </span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.json.MappingJackson2JsonView"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ignoreAcceptHeader"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.JstlView"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsps/"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"209715200"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"resolveLazily"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200811180313461.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70&quot; alt=&quot;xml&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;规定xml文档的书写规则
     * 作为框架的使用者（程序员）
       1.能够在xml中引入约束文档
       2.能够简单的读懂约束文档&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://oldaz.github.io/tags/Java/"/>
    
      <category term="xml" scheme="https://oldaz.github.io/tags/xml/"/>
    
  </entry>
  
  <entry>
    <title>来看看XML到底是个啥--xml快速入门</title>
    <link href="https://oldaz.github.io/2020/08/11/%E6%9D%A5%E7%9C%8B%E7%9C%8BXML%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5--xml%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <id>https://oldaz.github.io/2020/08/11/%E6%9D%A5%E7%9C%8B%E7%9C%8BXML%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5--xml%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</id>
    <published>2020-08-11T03:18:27.000Z</published>
    <updated>2020-08-11T10:02:31.857Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/2020081118012415.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="xml"></p><h1 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h1><pre><code>以前为了代替语法松散的html而诞生。最后竞争不赢，就发展自己的优势，与properties配置文件竞争。（xml 存数据比properties厉害，标签存数据特别的结构化）。</code></pre>  <a id="more"></a><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><pre><code>Extensib Markup language 可扩展标记语言*可扩展：标签都是自定义的。如 &lt;suer&gt; &lt; student&gt;</code></pre><h2 id="功能：存储数据"><a href="#功能：存储数据" class="headerlink" title="功能：存储数据"></a>功能：存储数据</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><pre><code>简单的配置文件用properties文件复杂的配置文件用xml文件</code></pre><h3 id="在网络中传输"><a href="#在网络中传输" class="headerlink" title="在网络中传输"></a>在网络中传输</h3><pre><code>因为xml是纯文本的，所以可以跨平台传输。</code></pre><h2 id="xml与html的-区别"><a href="#xml与html的-区别" class="headerlink" title="xml与html的    区别"></a>xml与html的    区别</h2><ul><li>xml标签是自定义的，html标签是预定义的</li><li>xml的语法严格，html语法松散</li><li>xml是存储数据，html是展示数据<h1 id="语法：快速入门"><a href="#语法：快速入门" class="headerlink" title="语法：快速入门"></a>语法：快速入门</h1><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2> 1.xml文档后缀名必须为.xml</li></ul><p><img src="https://img-blog.csdnimg.cn/20200811101456282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="后缀"></p><ol start="2"><li>xml第一行必须定义为文档声明</li></ol><p><img src="https://img-blog.csdnimg.cn/20200811102811260.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="声明"></p><p>-判断是否书写正确，将文档直接拉入浏览器，如不报错。就说明书写正确。</p><p><img src="https://img-blog.csdnimg.cn/20200811102852177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="书写正确"></p><p> 3.xml文档中有且只有一个根标签<br> 4.属性值必须用引号包裹（单双都可以）</p><pre><code>例如第一行的版本属性值，标签的id值 </code></pre><p>5.标签必须正确的关闭<br>6.标签名称区分大小写</p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version = '1.0' ?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">users</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span> = <span class="string">'1'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>huangzhong<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>23<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">gender</span>&gt;</span>male<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span> = <span class="string">'2'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>zhaoyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>20<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">gender</span>&gt;</span>male<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">users</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h2><h3 id="文档申明"><a href="#文档申明" class="headerlink" title="文档申明"></a>文档申明</h3><p> 1.格式</p><pre><code>&lt;?xml 属性列表 ?&gt;*尖括号与问号之间不能有空格、问号与xml之间不能有问号</code></pre><p>2.属性列表</p><pre><code>version  ：版本号 ，必须的属性（不存在就报错）encoding   ：  编码方式。告知解析引擎当前文档使用的字符集。默认值：ISO-8859-1standalone  ： 是否独立      取值：          yes：不依赖其他文件          no:依赖其他文件</code></pre><h3 id="指令（已经不这么使用了，了解即可）"><a href="#指令（已经不这么使用了，了解即可）" class="headerlink" title="指令（已经不这么使用了，了解即可）"></a>指令（已经不这么使用了，了解即可）</h3><pre><code>结合css控制标签样式。</code></pre><p><img src="https://img-blog.csdnimg.cn/20200811105704538.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="css样式"><br><img src="https://img-blog.csdnimg.cn/20200811105929318.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="引入css"></p><p><img src="https://img-blog.csdnimg.cn/20200811105756459.png" alt="数据的展示"></p><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><pre><code>标签名称自定义的</code></pre><p>规则</p><pre><code>名称可以含字母、数字以及其他的字符名称不能以数字或者标点符号开始名称不能以字符 “xml”（或者 XML、Xml）开始名称不能包含空格可使用任何名称，没有保留的字词。</code></pre><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><pre><code>id属性值唯一</code></pre><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><pre><code>CDATA区：该区域中的数据会被原样展示格式：&lt;![CDATA[数据]]&gt;   例如：展示代码</code></pre><p><img src="https://img-blog.csdnimg.cn/20200811111253632.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="代码"></p><p>效果：<br><img src="https://img-blog.csdnimg.cn/20200811111349436.png" alt="展示效果"></p><p><strong>约束部分在下一篇文章，不然一篇文章太长了！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/2020081118012415.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70&quot; alt=&quot;xml&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;XML&quot;&gt;&lt;a href=&quot;#XML&quot; class=&quot;headerlink&quot; title=&quot;XML&quot;&gt;&lt;/a&gt;XML&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;以前为了代替语法松散的html而诞生。
最后竞争不赢，就发展自己的优势，与properties配置文件竞争。
（xml 存数据比properties厉害，标签存数据特别的结构化）。&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://oldaz.github.io/tags/Java/"/>
    
      <category term="xml" scheme="https://oldaz.github.io/tags/xml/"/>
    
      <category term="快速入门" scheme="https://oldaz.github.io/tags/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>阿哲学了就来聊——Java反射</title>
    <link href="https://oldaz.github.io/2020/08/09/%E9%98%BF%E5%93%B2%E5%AD%A6%E4%BA%86%E5%B0%B1%E6%9D%A5%E8%81%8A%E2%80%94%E2%80%94Java%E5%8F%8D%E5%B0%84/"/>
    <id>https://oldaz.github.io/2020/08/09/%E9%98%BF%E5%93%B2%E5%AD%A6%E4%BA%86%E5%B0%B1%E6%9D%A5%E8%81%8A%E2%80%94%E2%80%94Java%E5%8F%8D%E5%B0%84/</id>
    <published>2020-08-09T06:02:58.000Z</published>
    <updated>2020-08-11T10:07:11.983Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p><img src="https://img-blog.csdnimg.cn/20200811180620383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="反射"></p><pre><code>reflect 反射 ，反转 权力的转让类中有很多的方法和属性，方法的调用权限，属性的赋值权限，属于对象的。让对象把这些权力交出来，交给Class和其它反射类（Field,Method,Contructor）管理。</code></pre><a id="more"></a><p>Class类 的范围就是天下所有的字节码文件，每一个类被编译成字节码文件后，都可以看成是Class类的对象</p><p><img src="https://img-blog.csdnimg.cn/20200808124514232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="反射"></p><ul><li>与Java反射相关的类如下：</li></ul><table><thead><tr><th>类名</th><th>用途</th></tr></thead><tbody><tr><td>Class类</td><td>代表类的实体，在运行的Java程序中表示类和接口</td></tr><tr><td>Field类</td><td>代表成员变量（成员变量也成为属性）</td></tr><tr><td>Mehod</td><td>代表类的方法</td></tr><tr><td>Construtor类</td><td>代表类的构造方法</td></tr></tbody></table><h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><p>Class类代表实体，在运行Java应用程序中表示类和接口。这个类中提供了很多有用的方法，这里对他们的分类进行简单介绍。</p><h3 id="获得类的相关方法"><a href="#获得类的相关方法" class="headerlink" title="获得类的相关方法"></a>获得类的相关方法</h3><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>asSubclass(Class<U>  class)</td><td>把传递的类和对象转换成代表其子类的对象</td></tr><tr><td>Cast</td><td>把对象转换成代表类或是接口对象</td></tr><tr><td>getClassLoader()</td><td>获得类的加载器</td></tr><tr><td>getClasses()</td><td>返回一个数组，该数组中含该类中有所有的公共类和接口类的对象</td></tr><tr><td>getDeclaredClasses</td><td>返回一个数组，该数组中包含该类所有的类和接口对象</td></tr><tr><td>forName(String className)</td><td>根据类返回类的对象</td></tr><tr><td>getName()</td><td>获得类的完整路径名字</td></tr><tr><td>newInstance()</td><td>创建类的实例</td></tr><tr><td>getPackage()</td><td>获得类的包</td></tr><tr><td>getSimpleName()</td><td>获得类的名字</td></tr><tr><td>getSuperclass()</td><td>获得当前类继承的父类的名字</td></tr><tr><td>getInterfaces()</td><td>获得当前实现的类或者是接口</td></tr></tbody></table><h3 id="获得类中属性相关的方法"><a href="#获得类中属性相关的方法" class="headerlink" title="获得类中属性相关的方法"></a>获得类中属性相关的方法</h3><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>getFiled(String name)</td><td>获得某个共有的属性对象</td></tr><tr><td>getDFileds()</td><td>获得所有的共有属性对象</td></tr><tr><td>getDeclaredFiled ( String name )</td><td>获得某个属性对象</td></tr><tr><td>getDeclaredFileds ( String name )</td><td>获得所有属性对象</td></tr></tbody></table><h3 id="获得类中构造器的相关方法"><a href="#获得类中构造器的相关方法" class="headerlink" title="获得类中构造器的相关方法"></a>获得类中构造器的相关方法</h3><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>getMethod(String name, Class…&lt;?&gt; parameterTypes)</td><td>获得该类某个公有的方法</td></tr><tr><td>getMethods()</td><td>获得该类所有公有的方法</td></tr><tr><td>getDeclaredMethod(String name, Class…&lt;?&gt; parameterTypes)</td><td>获得该类某个方法</td></tr><tr><td>getDeclaredMethods()</td><td>获得该类所有方法</td></tr></tbody></table><h2 id="Field"><a href="#Field" class="headerlink" title="Field"></a>Field</h2><p><a href="https://developer.android.google.cn/reference/java/lang/reflect/Field" target="_blank" rel="noopener">Field</a>代表类的成员变量（成员变量也称为类的属性）。</p><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>equals(Object obj)</td><td>属性与obj相等则返回true</td></tr><tr><td>get(Object obj)</td><td>获得obj中对应的属性值</td></tr><tr><td>set(Object obj, Object value)</td><td>设置obj中对应属性值</td></tr></tbody></table><h2 id="Method类"><a href="#Method类" class="headerlink" title="Method类"></a>Method类</h2><p><a href="https://developer.android.google.cn/reference/java/lang/reflect/Method" target="_blank" rel="noopener">Method</a>代表类的方法。</p><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>invoke(Object obj, Object… args)</td><td>传递object对象及参数调用该对象对应的方法</td></tr></tbody></table><h2 id="Constructor类"><a href="#Constructor类" class="headerlink" title="Constructor类"></a>Constructor类</h2><p><a href="https://developer.android.google.cn/reference/java/lang/reflect/Constructor" target="_blank" rel="noopener">Constructor</a>代表类的构造方法。</p><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>newInstance(Object… initargs)</td><td>根据传递的参数创建类的对象</td></tr></tbody></table><h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><ul><li>获取Class对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public <span class="keyword">void</span> test1()&#123;</span><br><span class="line">    <span class="comment">// 1.获取某个类的实体类对象：三种方式</span></span><br><span class="line">    Class&lt;Emps&gt; c1 = Emps.class;</span><br><span class="line">    Class&lt;?extends Emps&gt; c2 = <span class="keyword">new</span> Emps().getClass();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class&lt;?&gt; c3 = Class.forName(<span class="string">"com.web.pojo.Emps"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.分别对实体类的成员（属性，方法，构造方法）进行托管</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Test<span class="comment">//使用构造器管理实体类中的构造方法</span></span><br><span class="line">    public <span class="keyword">void</span> test2() throws Exception &#123;</span><br><span class="line">        <span class="comment">// 1.获取class对象对象：三种方式</span></span><br><span class="line">        Class&lt;Emps&gt; c1 = Emps.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取构造方法的管理类</span></span><br><span class="line">            <span class="comment">//2.1托管无参构造</span></span><br><span class="line">            Emps emps =  c1.newInstance();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.2托管有参构造</span></span><br><span class="line">        Constructor&lt;Emps&gt; Constructor = c1.getDeclaredConstructor(Integer.class, <span class="built_in">String</span>.class);</span><br><span class="line">        Emps emps1 = Constructor.newInstance(<span class="number">1</span>, <span class="string">"元歌"</span>);</span><br><span class="line">        System.out.println(emps);</span><br><span class="line">        System.out.println(emps1);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="普通方法"><a href="#普通方法" class="headerlink" title="普通方法"></a>普通方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Test<span class="comment">//使用Method类，来管理实体类中的某个方法</span></span><br><span class="line">public <span class="keyword">void</span> test4() throws Exception &#123;</span><br><span class="line">    <span class="comment">// 1.获取class对象对象</span></span><br><span class="line">    Class&lt;Emps&gt; c1 = Emps.class;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.获取某个方法的管理类Method</span></span><br><span class="line">    Method method = c1.getDeclaredMethod(<span class="string">"setName"</span>, <span class="built_in">String</span>.class);</span><br><span class="line">    Emps emps = c1.newInstance();</span><br><span class="line">    System.out.println(emps);</span><br><span class="line">    method.invoke(emps,<span class="string">"韩信"</span>);</span><br><span class="line">    System.out.println(emps);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"--------调用toString------"</span>);</span><br><span class="line">    Method method1 = c1.getDeclaredMethod(<span class="string">"toString"</span>);</span><br><span class="line">    <span class="built_in">Object</span> invoke = method1.invoke(emps);</span><br><span class="line">    System.out.println(invoke);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@Test<span class="comment">//使用field类，来管理实体类中的某个属性</span></span><br><span class="line">public <span class="keyword">void</span> test3() throws Exception &#123;</span><br><span class="line">    <span class="comment">// 1.获取class对象对象：三种方式</span></span><br><span class="line">    Class&lt;Emps&gt; c1 = Emps.class;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.获取某个属性的管理类Field</span></span><br><span class="line">    Field f1 = c1.getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line">    Field f2 = c1.getDeclaredField(<span class="string">"age"</span>);</span><br><span class="line">    Emps emps = c1.newInstance();</span><br><span class="line">    <span class="comment">//3.开启私有属性的操作权限</span></span><br><span class="line">    f1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    f2.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    System.out.println(emps);</span><br><span class="line">    f1.set(emps,<span class="string">"孙尚香"</span>);</span><br><span class="line">    f2.set(emps,<span class="number">18</span>);</span><br><span class="line">    System.out.println(emps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="反射案例"><a href="#反射案例" class="headerlink" title="反射案例"></a>反射案例</h1><h2 id="实现DBUtils工具类"><a href="#实现DBUtils工具类" class="headerlink" title="实现DBUtils工具类"></a>实现DBUtils工具类</h2><pre><code>封装查询结果集的原理实用多个数据表格的通用查询</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">package com.web.jdbc;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">JdbcUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">//封装结果集的通用方法</span></span><br><span class="line">    public <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; rsToList(<span class="built_in">String</span> sql,Class&lt;T&gt; c)&#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;T&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//加载驱动，获取连接对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//加载驱动，获取连接对象</span></span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">            Connection con = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/wuhanhb?useSSL=false"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line">            <span class="comment">//获取执行sql对象,执行sql，返回结果集rs</span></span><br><span class="line">            PreparedStatement psmt = con.prepareStatement(sql);</span><br><span class="line">            ResultSet rs = psmt.executeQuery(sql);</span><br><span class="line">            <span class="comment">//3.遍历rs</span></span><br><span class="line">               <span class="comment">//3.1借助元数据，获取列名和总列数</span></span><br><span class="line">            ResultSetMetaData md = rs.getMetaData();</span><br><span class="line">            int conut = md.getColumnCount();</span><br><span class="line">            <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">                <span class="comment">//循环一次获取一行数据，调用一次Object获取一个单元格的数据</span></span><br><span class="line">                T t = c.newInstance();</span><br><span class="line">                <span class="keyword">for</span> (int i=<span class="number">1</span>;i&lt;=conut;i++) &#123;</span><br><span class="line">                    <span class="built_in">Object</span> value = rs.getObject(i);</span><br><span class="line">                        <span class="comment">//每一列的列名充当T中的属性名，获取对应的属性管理对象f</span></span><br><span class="line">                    Field f = c.getDeclaredField(md.getColumnName(i));</span><br><span class="line">                    f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="comment">//为私有属性赋值</span></span><br><span class="line">                    f.set(t,value);</span><br><span class="line">                &#125;</span><br><span class="line">                list.add(t);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><h3 id="查询emps数据表"><a href="#查询emps数据表" class="headerlink" title="查询emps数据表"></a>查询emps数据表</h3><ul><li><p>这是数据库中的数据<br><img src="https://img-blog.csdnimg.cn/20200809134612880.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="数据库中的数据"></p></li><li><p>这是测试类代码(<em>Emps实体类不单独贴出</em>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public <span class="keyword">void</span> test5()&#123;</span><br><span class="line">    <span class="comment">//测试jdbc工具类</span></span><br><span class="line">    List&lt;Emps&gt; emps = JdbcUtil.rsToList(<span class="string">"select * from emps"</span>, Emps.class);</span><br><span class="line">    System.out.println(emps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>查询结果<br><img src="https://img-blog.csdnimg.cn/20200809134947476.png" alt="查询emps表"></p><h3 id="查询dept数据表"><a href="#查询dept数据表" class="headerlink" title="查询dept数据表"></a>查询dept数据表</h3></li><li><p>这是数据库中的数据<br><img src="https://img-blog.csdnimg.cn/20200809135144525.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="dept数据"></p></li><li><p>这是测试类代码(<em>Emps实体类不单独贴出</em>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public <span class="keyword">void</span> test5()&#123;</span><br><span class="line">    <span class="comment">//测试jdbc工具类</span></span><br><span class="line">    List&lt;Dept&gt; dept = JdbcUtil.rsToList(<span class="string">"select * from dept"</span>, Dept.class);</span><br><span class="line">    System.out.println(dept);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>D</p></li><li><p>查询结果<br><img src="https://img-blog.csdnimg.cn/20200809135555587.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="dept表查询结果"></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200811180620383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70&quot; alt=&quot;反射&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;reflect 反射 ，反转 权力的转让
类中有很多的方法和属性，方法的调用权限，属性的赋值权限，属于对象的。
让对象把这些权力交出来，交给Class和其它反射类（Field,Method,Contructor）管理。&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://oldaz.github.io/tags/Java/"/>
    
      <category term="反射" scheme="https://oldaz.github.io/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript基础_1</title>
    <link href="https://oldaz.github.io/2020/05/30/JavaScript%E5%9F%BA%E7%A1%80_1/"/>
    <id>https://oldaz.github.io/2020/05/30/JavaScript%E5%9F%BA%E7%A1%80_1/</id>
    <published>2020-05-30T13:55:34.000Z</published>
    <updated>2020-05-30T14:03:56.129Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200530215426605.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="Javascript基础_1"></p><h1 id="JS-简介"><a href="#JS-简介" class="headerlink" title="JS 简介"></a>JS 简介</h1><pre><code>JavaScript 是属于 HTML 和 Web 的编程语言。编程令计算机完成您需要它们做的工作。JavaScript 很容易学习。</code></pre><h2 id="为何学习-JavaScript？"><a href="#为何学习-JavaScript？" class="headerlink" title="为何学习 JavaScript？"></a>为何学习 JavaScript？</h2><p>JavaScript 是 web 开发者必学的三种语言之一：</p><ul><li>HTML 定义网页的内容</li><li>CSS 规定网页的布局</li><li>JavaScript 对网页行为进行编程</li></ul><a id="more"></a><h2 id="JavaScript-简介"><a href="#JavaScript-简介" class="headerlink" title="JavaScript 简介"></a>JavaScript 简介</h2><pre><code>JavaScript 能够改变 HTML 内容getElementById() 是多个 JavaScript HTML 方法之一。</code></pre><p>本例使用该方法来“查找” id=”demo” 的 HTML 元素，并把元素内容（innerHTML）更改为 “Hello JavaScript”：</p><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = <span class="string">"Hello JavaScript"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = <span class="string">'Hello JavaScript'</span>;</span><br></pre></td></tr></table></figure><ol><li><p>JavaScript 能够改变 HTML 属性</p><p> 通过改变 <img> 标签的 src 属性（source）来改变一张 HTML 图像<br> JavaScript 能够改变 HTML 样式 (CSS)<br>改变 HTML 元素的样式，是改变 HTML 属性的一种变种：</p></li></ol><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).style.fontSize = <span class="string">"25px"</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>JavaScript 能够隐藏 HTML 元素<br>可通过改变 display 样式来隐藏 HTML 元素：</li></ol><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).style.display=<span class="string">"none"</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>JavaScript 能够显示 HTML 元素<br>可通过改变 display 样式来显示隐藏的 HTML 元素：</li></ol><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).style.display=<span class="string">"block"</span>;</span><br></pre></td></tr></table></figure><h1 id="JavaScript-使用"><a href="#JavaScript-使用" class="headerlink" title="JavaScript 使用"></a>JavaScript 使用</h1><h2 id="JS-输出"><a href="#JS-输出" class="headerlink" title="JS 输出"></a>JS 输出</h2><h3 id="60-script-gt-标签"><a href="#60-script-gt-标签" class="headerlink" title="&#60;script&gt; 标签"></a>&#60;script&gt; 标签</h3><p>在 HTML 中，JavaScript 代码必须位于 &#60;script&gt; 与 &#60;/script&gt; 标签之间。</p><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = <span class="string">"我的第一段 JavaScript"</span>;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>注释：旧的 JavaScript 例子也许会使用 type 属性：&#60;script type=”text/javascript”&gt;。<br>注释：type 属性不是必需的。JavaScript 是 HTML 中的默认脚本语言。</p><ol><li><p>&#60;head&gt; 或&#60;body&gt; 中的 JavaScript</p><p> 您能够在 HTML 文档中放置任意数量的脚本。<br> 脚本可被放置与 HTML 页面的 <body> 或 <head> 部分中，或兼而有之。</p></li><li><p>&#60;head&gt; 中的 JavaScript<br>在本例中，JavaScript 函数被放置于 HTML 页面的 &#60;head&gt; 部分。<br>该函数会在按钮被点击时调用：</p></li></ol><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = <span class="string">"段落被更改。"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;一张网页&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;p id="demo"&gt;一个段落&lt;/</span>p&gt;</span><br><span class="line">&lt;button type=<span class="string">"button"</span> onclick=<span class="string">"myFunction()"</span>&gt;试一试&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p>提示：把脚本置于 <body> 元素的底部，可改善显示速度，因为脚本编译会拖慢显示。</p><h1 id="外部脚本"><a href="#外部脚本" class="headerlink" title="外部脚本"></a>外部脚本</h1><p>脚本可放置与外部文件中：<br>外部文件：myScript.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = <span class="string">"段落被更改。"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>外部脚本很实用，如果相同的脚本被用于许多不同的网页。<br>JavaScript 文件的文件扩展名是 .js。</p><p>如需使用外部脚本，请在 &#60;script&gt; 标签的 src (source) 属性中设置脚本的名称：</p><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"myScript.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><pre><code>您可以在 &amp;#60;head&gt; 或 &amp;#60;body&gt; 中放置外部脚本引用。该脚本的表现与它被置于 &amp;#60;script&gt; 标签中是一样的。</code></pre><p>注释：外部脚本不能包含 &#60;script&gt; 标签。</p><h1 id="外部-JavaScript-的优势"><a href="#外部-JavaScript-的优势" class="headerlink" title="外部 JavaScript 的优势"></a>外部 JavaScript 的优势</h1><p>在外部文件中放置脚本有如下优势：</p><ul><li>分离了 HTML 和代码</li><li>使 HTML 和 JavaScript 更易于阅读和维护</li><li>已缓存的 JavaScript 文件可加速页面加载</li></ul><p>如需向一张页面添加多个脚本文件 - 请使用多个 script 标签：</p><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"myScript1.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="myScript2.js"&gt;&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h2 id="外部引用"><a href="#外部引用" class="headerlink" title="外部引用"></a>外部引用</h2><p>可通过完整的 URL 或相对于当前网页的路径引用外部脚本</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://www.xxxx.com/js/myScript1.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h1 id="JavaScript-输出"><a href="#JavaScript-输出" class="headerlink" title="JavaScript 输出"></a>JavaScript 输出</h1><pre><code>JavaScript 不提供任何内建的打印或显示函数。</code></pre><h2 id="JavaScript-显示方案"><a href="#JavaScript-显示方案" class="headerlink" title="JavaScript 显示方案"></a>JavaScript 显示方案</h2><p>JavaScript 能够以不同方式“显示”数据：</p><ul><li>使用 window.alert() 写入警告框</li><li>使用 document.write() 写入 HTML 输出</li><li>使用 innerHTML 写入 HTML 元素</li><li>使用 console.log() 写入浏览器控制台</li></ul><h3 id="使用-innerHTML"><a href="#使用-innerHTML" class="headerlink" title="使用 innerHTML"></a>使用 innerHTML</h3><pre><code>如需访问 HTML 元素，JavaScript 可使用 document.getElementById(id) 方法。</code></pre><p>id 属性定义 HTML 元素。innerHTML 属性定义 HTML 内容：</p><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;我的第一张网页&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;p&gt;我的第一个段落&lt;/</span>p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p id=<span class="string">"demo"</span>&gt;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp"> document.getElementById("demo").innerHTML = 5 + 6;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><p>提示：更改 HTML 元素的 innerHTML 属性是在 HTML 中显示数据的常用方法。</p><h3 id="使用-document-write"><a href="#使用-document-write" class="headerlink" title="使用 document.write()"></a>使用 document.write()</h3><pre><code>出于测试目的，使用 document.write() 比较方便：</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;我的第一张网页&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;p&gt;我的第一个段落&lt;/</span>p&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="number">5</span> + <span class="number">6</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p>注意：在 HTML 文档完全加载后使用 document.write() 将删除所有已有的 HTML ：</p><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;我的第一张网页&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;p&gt;我的第一个段落&lt;/</span>p&gt;</span><br><span class="line"></span><br><span class="line">&lt;button onclick=<span class="string">"document.write(5 + 6)"</span>&gt;试一试&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p>提示：document.write() 方法仅用于测试。</p><h3 id="使用-window-alert"><a href="#使用-window-alert" class="headerlink" title="使用 window.alert()"></a>使用 window.alert()</h3><pre><code>您能够使用警告框来显示数据：</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;我的第一张网页&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;p&gt;我的第一个段落&lt;/</span>p&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">window</span>.alert(<span class="number">5</span> + <span class="number">6</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用-console-log"><a href="#使用-console-log" class="headerlink" title="使用 console.log()"></a>使用 console.log()</h3><pre><code>在浏览器中，您可使用 console.log() 方法来显示数据。请通过 F12 来激活浏览器控制台，并在菜单中选择“控制台”。</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;我的第一张网页&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;p&gt;我的第一个段落&lt;/</span>p&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span> + <span class="number">6</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><h1 id="JavaScript-语句"><a href="#JavaScript-语句" class="headerlink" title="JavaScript 语句"></a>JavaScript 语句</h1><pre><code>在 HTML 中，JavaScript 语句是由 web 浏览器“执行”的“指令”。</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x, y, z;<span class="comment">// 语句 1</span></span><br><span class="line">x = <span class="number">22</span>;<span class="comment">// 语句 2</span></span><br><span class="line">y = <span class="number">11</span>;<span class="comment">// 语句 3</span></span><br><span class="line">z = x + y;<span class="comment">// 语句 4</span></span><br></pre></td></tr></table></figure><h2 id="JavaScript-程序"><a href="#JavaScript-程序" class="headerlink" title="JavaScript 程序"></a>JavaScript 程序</h2><ul><li>计算机程序是由计算机“执行”的一系列“指令”。</li><li>在编程语言中，这些编程指令被称为语句。</li><li>JavaScript 程序就是一系列的编程语句。</li></ul><p>注释：在 HTML 中，JavaScript 程序由 web 浏览器执行。</p><h2 id="JavaScript-语句-1"><a href="#JavaScript-语句-1" class="headerlink" title="JavaScript 语句"></a>JavaScript 语句</h2><pre><code>JavaScript 语句由以下构成：          值、运算符、表达式、关键词和注释。</code></pre><p>这条语句告诉浏览器在 id=”demo” 的 HTML 元素中输出 “Hello Kitty.”：</p><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = <span class="string">"Hello Kitty."</span>;</span><br></pre></td></tr></table></figure><pre><code>大多数 JavaScript 程序都包含许多 JavaScript 语句。这些语句会按照它们被编写的顺序逐一执行。</code></pre><p>注释：JavaScript 程序（以及 JavaScript 语句）常被称为 JavaScript 代码。</p><h2 id="分号"><a href="#分号" class="headerlink" title="分号( ; )"></a>分号( ; )</h2><pre><code>分号分隔 JavaScript 语句。</code></pre><p>请在每条可执行的语句之后添加分号：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">5</span>;</span><br><span class="line">b = <span class="number">6</span>;</span><br><span class="line">c = a + b;</span><br></pre></td></tr></table></figure><p>如果有分号分隔，允许在同一行写多条语句：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">5</span>; b = <span class="number">6</span>; c = a + b;</span><br></pre></td></tr></table></figure><pre><code>可能在网上看到不带分号的例子。</code></pre><p>提示：以分号结束语句不是必需的，但我们仍然强烈建议您这么做。</p><h2 id="JavaScript-空白字符"><a href="#JavaScript-空白字符" class="headerlink" title="JavaScript 空白字符"></a>JavaScript 空白字符</h2><pre><code>JavaScript 会忽略多个空格。您可以向脚本添加空格，以增强可读性。</code></pre><p>下面这两行是相等的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="string">"Bill"</span>;</span><br><span class="line"><span class="keyword">var</span> person=<span class="string">"Bill"</span>;</span><br></pre></td></tr></table></figure><pre><code>在运算符旁边（ = + - * / ）添加空格是个好习惯：</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = y + z;</span><br></pre></td></tr></table></figure><h2 id="JavaScript-行长度和折行"><a href="#JavaScript-行长度和折行" class="headerlink" title="JavaScript 行长度和折行"></a>JavaScript 行长度和折行</h2><pre><code>为了达到最佳的可读性，程序员们常常喜欢把代码行控制在 80 个字符以内。如果 JavaScript 语句太长，对其进行折行的最佳位置是某个运算符：</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML =</span><br><span class="line"> <span class="string">"Hello Kitty."</span>;</span><br></pre></td></tr></table></figure><h2 id="JavaScript-代码块"><a href="#JavaScript-代码块" class="headerlink" title="JavaScript 代码块"></a>JavaScript 代码块</h2><pre><code>JavaScript 语句可以用花括号（{...}）组合在代码块中。代码块的作用是定义一同执行的语句。</code></pre><p>您会在 JavaScript 中看到成块组合在一起的语句：</p><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = <span class="string">"Hello Kitty."</span>;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"myDIV"</span>).innerHTML = <span class="string">"How are you?"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释：在本教程中我们为代码块用了 4 个空格的缩进。</p><h2 id="JavaScript-关键词"><a href="#JavaScript-关键词" class="headerlink" title="JavaScript 关键词"></a>JavaScript 关键词</h2><pre><code>JavaScript 语句常常通过某个关键词来标识需要执行的 JavaScript 动作。</code></pre><p>下面的表格列出了一部分将在教程中学到的关键词：</p><table><thead><tr><th>关键词</th><th>描述</th></tr></thead><tbody><tr><td>break</td><td>终止 switch 或循环。</td></tr><tr><td>continue</td><td>跳出循环并在顶端开始。</td></tr><tr><td>debugger</td><td>停止执行 JavaScript，并调用调试函数（如果可用）。</td></tr><tr><td>do … while</td><td>执行语句块，并在条件为真时重复代码块。</td></tr><tr><td>for</td><td>标记需被执行的语句块，只要条件为真。</td></tr><tr><td>function</td><td>声明函数。</td></tr><tr><td>if … else</td><td>标记需被执行的语句块，根据某个条件。</td></tr><tr><td>return</td><td>退出函数。</td></tr><tr><td>switch</td><td>标记需被执行的语句块，根据不同的情况。</td></tr><tr><td>try … catch</td><td>对语句块实现错误处理。</td></tr><tr><td>var</td><td>声明变量。</td></tr><tr><td>注释：JavaScript 关键词指的是保留的单词。保留词无法用作变量名。</td><td></td></tr></tbody></table><h1 id="JavaScript-语法"><a href="#JavaScript-语法" class="headerlink" title="JavaScript 语法"></a>JavaScript 语法</h1><pre><code>JavaScript 语法是一套规则，它定义了 JavaScript 的语言结构。</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x, y;<span class="comment">// 如何声明变量</span></span><br><span class="line">x = <span class="number">7</span>; y = <span class="number">8</span>;<span class="comment">// 如何赋值</span></span><br><span class="line">z = x + y;<span class="comment">// 如何计算值</span></span><br></pre></td></tr></table></figure><h1 id="JavaScript-值"><a href="#JavaScript-值" class="headerlink" title="JavaScript 值"></a>JavaScript 值</h1><pre><code>JavaScript 语句定义两种类型的值：混合值和变量值。混合值被称为字面量（literal）。变量值被称为变量。</code></pre><h1 id="JavaScript-字面量"><a href="#JavaScript-字面量" class="headerlink" title="JavaScript 字面量"></a>JavaScript 字面量</h1><ul><li><p>书写混合值最重要的规则是：<br>  写数值有无小数点均可：</p><p>  15.90</p><p>  10011</p></li></ul><ul><li><p>字符串是文本，由双引号或单引号包围：</p><pre><code>&quot;Bill Gates&quot;&apos;Bill Gates&apos; </code></pre></li></ul><h1 id="JavaScript-变量"><a href="#JavaScript-变量" class="headerlink" title="JavaScript 变量"></a>JavaScript 变量</h1><pre><code>在编程语言中，变量用于存储数据值。JavaScript 使用 var 关键词来声明变量。</code></pre><p>= 号用于为变量赋值。</p><p>在本例中，x 被定义为变量。然后，x 被赋的值是 7：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x;</span><br><span class="line"></span><br><span class="line">x = <span class="number">7</span>;</span><br></pre></td></tr></table></figure><h1 id="JavaScript-运算符"><a href="#JavaScript-运算符" class="headerlink" title="JavaScript 运算符"></a>JavaScript 运算符</h1><p>JavaScript 使用算数运算符（+ - * /）来计算值：</p><p>(7 + 8) * 10</p><p>JavaScript 使用赋值运算符（=）向变量赋值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x, y;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">var</span> y = <span class="number">8</span>;</span><br></pre></td></tr></table></figure><p>值可以是多种类型，比如数值和字符串。</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"Bill"</span> + <span class="string">" "</span> + <span class="string">"Gates"</span>，计算为 <span class="string">"Bill Gates"</span>：</span><br><span class="line"></span><br><span class="line"><span class="string">"Bill"</span> + <span class="string">" "</span> + <span class="string">"Gates"</span></span><br></pre></td></tr></table></figure><h1 id="JavaScript-关键词-1"><a href="#JavaScript-关键词-1" class="headerlink" title="JavaScript 关键词"></a>JavaScript 关键词</h1><pre><code>JavaScript 关键词用于标识被执行的动作。</code></pre><p>var 关键词告知浏览器创建新的变量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">7</span> + <span class="number">8</span>;</span><br><span class="line"><span class="keyword">var</span> y = x * <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h1 id="JavaScript-注释"><a href="#JavaScript-注释" class="headerlink" title="JavaScript 注释"></a>JavaScript 注释</h1><pre><code>并非所有 JavaScript 语句都被“执行”。双斜杠 // 或 /* 与 */ 之间的代码被视为注释。</code></pre><p>注释会被忽略，不会被执行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">7</span>;   <span class="comment">// 会执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// var x = 8;   不会执行</span></span><br></pre></td></tr></table></figure><h1 id="JavaScript-标识符"><a href="#JavaScript-标识符" class="headerlink" title="JavaScript 标识符"></a>JavaScript 标识符</h1><pre><code>标识符是名称。</code></pre><ul><li><p>在 JavaScript 中，标识符用于命名变量（以及关键词、函数和标签）。</p></li><li><p>在大多数编程语言中，合法名称的规则大多相同。</p></li><li><p>在 JavaScript 中，首字符必须是字母、下划线（-）或美元符号（$）。</p></li><li><p>连串的字符可以是字母、数字、下划线或美元符号。</p></li></ul><p>提示：数值不可以作为首字符。这样，JavaScript 就能轻松区分标识符和数值。</p><h2 id="JavaScript-对大小写敏感"><a href="#JavaScript-对大小写敏感" class="headerlink" title="JavaScript 对大小写敏感"></a>JavaScript 对大小写敏感</h2><pre><code>所有 JavaScript 标识符对大小写敏感。变量 lastName 和 lastname，是两个不同的变量。</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lastName = <span class="string">"Gates"</span>;</span><br><span class="line">lastname = <span class="string">"Jobs"</span>;</span><br></pre></td></tr></table></figure><p><strong>JavaScript 不会把 VAR 或 Var 译作关键词 var。</strong></p><h2 id="JavaScript-与驼峰式大小写"><a href="#JavaScript-与驼峰式大小写" class="headerlink" title="JavaScript 与驼峰式大小写"></a>JavaScript 与驼峰式大小写</h2><pre><code>历史上，程序员曾使用三种把多个单词连接为一个变量名的方法：</code></pre><p>连字符：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">first-name, last-name, master-card, inter-city.</span><br></pre></td></tr></table></figure><p>注释：JavaScript 中不能使用连字符。它是为减法预留的。</p><p>下划线：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">first_name, last_name, master_card, inter_city.</span><br></pre></td></tr></table></figure><p>驼峰式大小写（Camel Case）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FirstName, LastName, MasterCard, InterCity.</span><br></pre></td></tr></table></figure><p>JavaScript 程序员倾向于使用以小写字母开头的驼峰大小写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firstName, lastName, masterCard, interCity</span><br></pre></td></tr></table></figure><h1 id="JavaScript-字符集"><a href="#JavaScript-字符集" class="headerlink" title="JavaScript 字符集"></a>JavaScript 字符集</h1><pre><code>JavaScript 使用 Unicode 字符集。Unicode 覆盖世界上几乎所有的字符、标点和符号。</code></pre><h1 id="JavaScript-注释（2）"><a href="#JavaScript-注释（2）" class="headerlink" title="JavaScript 注释（2）"></a>JavaScript 注释（2）</h1><pre><code>JavaScript 注释用于解释 JavaScript 代码，增强其可读性。JavaScript 注释也可以用于在测试替代代码时阻止执行。</code></pre><h2 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h2><pre><code>单行注释以 // 开头。任何位于 // 与行末之间的文本都会被 JavaScript 忽略（不会执行）。</code></pre><p>本例在每条代码行之前使用单行注释：</p><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 改变标题：</span></span><br><span class="line"> <span class="built_in">document</span>.getElementById(<span class="string">"myH"</span>).innerHTML = <span class="string">"我的第一张页面"</span>;</span><br><span class="line"><span class="comment">// 改变段落：</span></span><br><span class="line"> <span class="built_in">document</span>.getElementById(<span class="string">"myP"</span>).innerHTML = <span class="string">"我的第一个段落。"</span>;</span><br></pre></td></tr></table></figure><p> 本例在每行结尾处使用了单行注释来解释代码：</p><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">5</span>;      <span class="comment">// 声明 x，为其赋值 5</span></span><br><span class="line"><span class="keyword">var</span> y = x + <span class="number">2</span>;  <span class="comment">// 声明 y，为其赋值 x + 2</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200530215426605.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70&quot; alt=&quot;Javascript基础_1&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;JS-简介&quot;&gt;&lt;a href=&quot;#JS-简介&quot; class=&quot;headerlink&quot; title=&quot;JS 简介&quot;&gt;&lt;/a&gt;JS 简介&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;JavaScript 是属于 HTML 和 Web 的编程语言。
编程令计算机完成您需要它们做的工作。
JavaScript 很容易学习。&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;为何学习-JavaScript？&quot;&gt;&lt;a href=&quot;#为何学习-JavaScript？&quot; class=&quot;headerlink&quot; title=&quot;为何学习 JavaScript？&quot;&gt;&lt;/a&gt;为何学习 JavaScript？&lt;/h2&gt;&lt;p&gt;JavaScript 是 web 开发者必学的三种语言之一：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTML 定义网页的内容&lt;/li&gt;
&lt;li&gt;CSS 规定网页的布局&lt;/li&gt;
&lt;li&gt;JavaScript 对网页行为进行编程&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="HTML" scheme="https://oldaz.github.io/categories/HTML/"/>
    
    
      <category term="JavaScript" scheme="https://oldaz.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>HTML基础_14</title>
    <link href="https://oldaz.github.io/2020/05/29/HTML%E5%9F%BA%E7%A1%80_14/"/>
    <id>https://oldaz.github.io/2020/05/29/HTML%E5%9F%BA%E7%A1%80_14/</id>
    <published>2020-05-28T16:11:34.000Z</published>
    <updated>2020-05-28T16:17:08.151Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200529000957933.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="HTML基础_14"></p><h1 id="HTML-Web-Workers"><a href="#HTML-Web-Workers" class="headerlink" title="HTML Web Workers"></a>HTML Web Workers</h1><pre><code>Web worker 是运行在后台的 JavaScript，不会影响页面的性能。</code></pre><h2 id="什么是-Web-Worker？"><a href="#什么是-Web-Worker？" class="headerlink" title="什么是 Web Worker？"></a>什么是 Web Worker？</h2><pre><code>当在 HTML 页面中执行脚本时，页面是不可响应的，直到脚本已完成。</code></pre><a id="more"></a><pre><code>Web worker 是运行在后台的 JavaScript，独立于其他脚本，不会影响页面的性能。您可以继续做任何愿意做的事情：点击、选取内容等等，而此时 web worker 运行在后台。</code></pre><h2 id="检测-Web-Worker-支持"><a href="#检测-Web-Worker-支持" class="headerlink" title="检测 Web Worker 支持"></a>检测 Web Worker 支持</h2><pre><code>在创建 web worker 之前，请检测用户浏览器是否支持它：</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span>(Worker) !== <span class="string">"undefined"</span>) &#123;</span><br><span class="line">       <span class="comment">// 是的！支持 Web worker！</span></span><br><span class="line">       <span class="comment">// 一些代码.....</span></span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">// 抱歉！不支持 Web Worker！</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="创建-Web-Worker-文件"><a href="#创建-Web-Worker-文件" class="headerlink" title="创建 Web Worker 文件"></a>创建 Web Worker 文件</h2><pre><code>现在，让我们在一个外部 JavaScript 文件中创建我们的 web worker。</code></pre><p>   在此处，我们创建了计数脚本。该脚本存储于 “demo_workers.js” 文件中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timedCount</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    i = i + <span class="number">1</span>;</span><br><span class="line">    postMessage(i);</span><br><span class="line">    setTimeout(<span class="string">"timedCount()"</span>,<span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">timedCount();</span><br></pre></td></tr></table></figure><pre><code>以上代码中重要的部分是 postMessage() 方法 - 它用于向 HTML 页面传回一段消息。</code></pre><p>   注释: web worker 通常不用于如此简单的脚本，而是用于更耗费 CPU 资源的任务。</p><h2 id="创建-Web-Worker-对象"><a href="#创建-Web-Worker-对象" class="headerlink" title="创建 Web Worker 对象"></a>创建 Web Worker 对象</h2><pre><code>现在我们已经有了 web worker 文件，我们需要从 HTML 页面调用它。</code></pre><p>   下面的代码行检测是否存在 worker，如果不存在，- 它会创建一个新的 web worker 对象，然后运行 “demo_workers.js” 中的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span>(w) == <span class="string">"undefined"</span>) &#123;</span><br><span class="line">      w = <span class="keyword">new</span> Worker(<span class="string">"demo_workers.js"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  然后我们就可以从 web worker 发生和接收消息了。</span><br><span class="line">  向 web worker 添加一个 <span class="string">"onmessage"</span> 事件监听器：</span><br><span class="line">  w.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">"result"</span>).innerHTML = event.data;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><pre><code>当 web worker 传送消息时，会执行事件监听器中的代码。来自 web worker 的数据会存储于 event.data 中。</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span>(w) == <span class="string">"undefined"</span>) &#123;</span><br><span class="line">       w = <span class="keyword">new</span> Worker(<span class="string">"demo_workers.js"</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>   然后我们就可以从 web worker 发生和接收消息了。<br>    向 web worker 添加一个 “onmessage” 事件监听器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">w.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">     <span class="built_in">document</span>.getElementById(<span class="string">"result"</span>).innerHTML = event.data;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><p>   当 web worker 传送消息时，会执行事件监听器中的代码。来自 web worker 的数据会存储于 event.data 中。</p><h2 id="终止-Web-Worker"><a href="#终止-Web-Worker" class="headerlink" title="终止 Web Worker"></a>终止 Web Worker</h2><ul><li>当创建 web worker 后，它会继续监听消息（即使在外部脚本完成后）直到其被终止为止。</li><li>如需终止 web worker，并释放浏览器/计算机资源，请使用 terminate() 方法：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">w.terminate();</span><br></pre></td></tr></table></figure><h2 id="复用-Web-Worker"><a href="#复用-Web-Worker" class="headerlink" title="复用 Web Worker"></a>复用 Web Worker</h2><p>   如果您把 worker 变量设置为 undefined，在其被终止后，可以重复使用该代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">w = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><h1 id="Web-Worker-和-DOM"><a href="#Web-Worker-和-DOM" class="headerlink" title="Web Worker 和 DOM"></a>Web Worker 和 DOM</h1><p>   由于 web worker 位于外部文件中，它们无法访问下例 JavaScript 对象：</p><ul><li>window 对象</li><li>document 对象</li><li>parent 对象</li></ul><h1 id="HTML-Server-Sent-事件"><a href="#HTML-Server-Sent-事件" class="headerlink" title="HTML Server-Sent 事件"></a>HTML Server-Sent 事件</h1><pre><code>Server-Sent 事件允许网页从服务器获得更新。Server-Sent 事件 - One Way Messaging</code></pre><p>Server-Sent 事件指的是网页自动从服务器获得更新。<br>以前也可能做到这一点，前提是网页不得不询问是否有可用的更新。<br>通过 Server-Sent 事件，更新能够自动到达。</p><p>例如：Facebook/Twitter 更新、股价更新、新的博文、赛事结果，等等。</p><h2 id="接收-Server-Sent-事件通知"><a href="#接收-Server-Sent-事件通知" class="headerlink" title="接收 Server-Sent 事件通知"></a>接收 Server-Sent 事件通知</h2><pre><code>EventSource 对象用于接收服务器发送事件通知：</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> source = <span class="keyword">new</span> EventSource(<span class="string">"demo_sse.php"</span>);</span><br><span class="line">source.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"result"</span>).innerHTML += event.data + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>例子解释：</p><pre><code>创建一个新的 EventSource 对象，然后规定发送更新的页面的 URL（本例中是 &quot;demo_sse.php&quot;）每当接收到一次更新，就会发生 onmessage 事件当 onmessage 事件发生时，把已接收的数据推入 id 为 &quot;result&quot; 的元素中</code></pre><h2 id="检测-Server-Sent-事件支持"><a href="#检测-Server-Sent-事件支持" class="headerlink" title="检测 Server-Sent 事件支持"></a>检测 Server-Sent 事件支持</h2><p>在 TIY 实例中，我们编写了一段额外的代码来检测服务器发送事件的浏览器支持：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span>(EventSource) !== <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    <span class="comment">// 是的！支持服务器发送事件！</span></span><br><span class="line">    <span class="comment">// 一些代码.....</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 抱歉！不支持服务器发送事件！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="服务器端代码实例"><a href="#服务器端代码实例" class="headerlink" title="服务器端代码实例"></a>服务器端代码实例</h2><pre><code>为了使上例运行，您需要能够发送数据更新的服务器（比如 PHP 或 ASP）。</code></pre><p>服务器端事件流的语法非常简单。请把 “Content-Type” 报头设置为 “text/event-stream”。现在，您可以开始发送事件流了。</p><p>PHP 中的代码 (demo_sse.php)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header(<span class="string">'Content-Type: text/event-stream'</span>);</span><br><span class="line">header(<span class="string">'Cache-Control: no-cache'</span>);</span><br><span class="line"></span><br><span class="line">$time = date(<span class="string">'r'</span>);</span><br><span class="line">echo <span class="string">"data: The server time is: &#123;$time&#125;\n\n"</span>;</span><br><span class="line">flush();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>ASP 中的代码 (VB) (demo_sse.asp)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">Response.ContentType = <span class="string">"text/event-stream"</span></span><br><span class="line">Response.Expires = <span class="number">-1</span></span><br><span class="line">Response.Write(<span class="string">"data: The server time is: "</span> &amp; now())</span><br><span class="line">Response.Flush()</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>代码解释：</p><ul><li>把报头 “Content-Type” 设置为 “text/event-stream”</li><li>规定不对页面进行缓存</li><li>输出要发送的日期（始终以 “data: “ 开头）</li><li>向网页刷新输出数据</li></ul><h1 id="EventSource-对象"><a href="#EventSource-对象" class="headerlink" title="EventSource 对象"></a>EventSource 对象</h1><p>在上例中，我们使用 onmessage 事件来获取消息。不过还可以使用其他事件：</p><table><thead><tr><th>事件</th><th>描述</th></tr></thead><tbody><tr><td>onopen</td><td>当通往服务器的连接被打开</td></tr><tr><td>onmessage</td><td>当接收到消息</td></tr><tr><td>onerror</td><td>当发生错误</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200529000957933.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70&quot; alt=&quot;HTML基础_14&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;HTML-Web-Workers&quot;&gt;&lt;a href=&quot;#HTML-Web-Workers&quot; class=&quot;headerlink&quot; title=&quot;HTML Web Workers&quot;&gt;&lt;/a&gt;HTML Web Workers&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;Web worker 是运行在后台的 JavaScript，不会影响页面的性能。&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;什么是-Web-Worker？&quot;&gt;&lt;a href=&quot;#什么是-Web-Worker？&quot; class=&quot;headerlink&quot; title=&quot;什么是 Web Worker？&quot;&gt;&lt;/a&gt;什么是 Web Worker？&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;当在 HTML 页面中执行脚本时，页面是不可响应的，直到脚本已完成。&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="HTML" scheme="https://oldaz.github.io/categories/HTML/"/>
    
    
      <category term="HTML" scheme="https://oldaz.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>HTML基础_13</title>
    <link href="https://oldaz.github.io/2020/05/28/HTML%E5%9F%BA%E7%A1%80_13/"/>
    <id>https://oldaz.github.io/2020/05/28/HTML%E5%9F%BA%E7%A1%80_13/</id>
    <published>2020-05-28T15:55:03.000Z</published>
    <updated>2020-05-28T15:55:49.937Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200528235355793.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="HTMLj基础_13"></p><h1 id="HTML5-地理定位"><a href="#HTML5-地理定位" class="headerlink" title="HTML5 地理定位"></a>HTML5 地理定位</h1><p>   定位用户的位置</p><h2 id="HTML5-Geolocation-API-用于获得用户的地理位置。"><a href="#HTML5-Geolocation-API-用于获得用户的地理位置。" class="headerlink" title="HTML5 Geolocation API 用于获得用户的地理位置。"></a>HTML5 Geolocation API 用于获得用户的地理位置。</h2><pre><code>鉴于该特性可能侵犯用户的隐私，除非用户同意，否则用户位置信息是不可用的。</code></pre><a id="more"></a><h2 id="HTML5-使用地理定位"><a href="#HTML5-使用地理定位" class="headerlink" title="HTML5 - 使用地理定位"></a>HTML5 - 使用地理定位</h2><pre><code>请使用 getCurrentPosition() 方法来获得用户的位置。</code></pre><p>   下例是一个简单的地理定位实例，可返回用户位置的经度和纬度。<br>    实例<br>    <script></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x=<span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>);</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getLocation</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (navigator.geolocation)</span><br><span class="line">      &#123;</span><br><span class="line">      navigator.geolocation.getCurrentPosition(showPosition);</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;x.innerHTML=<span class="string">"Geolocation is not supported by this browser."</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">showPosition</span>(<span class="params">position</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    x.innerHTML=<span class="string">"Latitude: "</span> + position.coords.latitude +</span><br><span class="line">    <span class="string">"&lt;br /&gt;Longitude: "</span> + position.coords.longitude;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>   例子解释：</p><p>   检测是否支持地理定位</p><pre><code>如果支持，则运行 getCurrentPosition() 方法。如果不支持，则向用户显示一段消息。如果getCurrentPosition()运行成功，则向参数showPosition中规定的函数返回一个coordinates对象showPosition() 函数获得并显示经度和纬度</code></pre><p>   上面的例子是一个非常基础的地理定位脚本，不含错误处理。</p><h2 id="getCurrentPosition-方法-返回数据"><a href="#getCurrentPosition-方法-返回数据" class="headerlink" title="getCurrentPosition() 方法 - 返回数据"></a>getCurrentPosition() 方法 - 返回数据</h2><pre><code>若成功，则 getCurrentPosition() 方法返回对象。始终会返回 latitude、longitude 以及 accuracy 属性。如果可用，则会返回其他下面的属性。</code></pre><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>coords.latitude</td><td>十进制数的纬度</td></tr><tr><td>coords.longitude</td><td>十进制数的经度</td></tr><tr><td>coords.accuracy</td><td>位置精度</td></tr><tr><td>coords.altitude</td><td>海拔，海平面以上以米计</td></tr><tr><td>coords.altitudeAccuracy</td><td>位置的海拔精度</td></tr><tr><td>coords.heading</td><td>方向，从正北开始以度计</td></tr><tr><td>coords.speed</td><td>速度，以米/每秒计</td></tr><tr><td>timestamp</td><td>响应的日期/时间</td></tr><tr><td>Geolocation</td><td>对象 - 其他有趣的方法</td></tr><tr><td>watchPosition()</td><td>返回用户的当前位置，并继续返回用户移动时的更新位置（就像汽车上的 GPS）。</td></tr><tr><td>clearWatch()</td><td>停止 watchPosition() 方法</td></tr></tbody></table><pre><code>下面的例子展示 watchPosition() 方法。</code></pre><p>   实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> x=<span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLocation</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (navigator.geolocation)</span><br><span class="line">    &#123;</span><br><span class="line">    navigator.geolocation.watchPosition(showPosition);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;x.innerHTML=<span class="string">"Geolocation is not supported by this browser."</span>;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showPosition</span>(<span class="params">position</span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">  x.innerHTML=<span class="string">"Latitude: "</span> + position.coords.latitude +</span><br><span class="line">  <span class="string">"&lt;br /&gt;Longitude: "</span> + position.coords.longitude;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h1 id="HTML5-拖放"><a href="#HTML5-拖放" class="headerlink" title="HTML5 拖放"></a>HTML5 拖放</h1><pre><code>拖放拖放（Drag 和 Drop）是很常见的特性。它指的是您抓取某物并拖入不同的位置。</code></pre><p>拖放是 HTML5 标准的组成部分：任何元素都是可拖放的。</p><h1 id="HTML-拖放实例"><a href="#HTML-拖放实例" class="headerlink" title="HTML 拖放实例"></a>HTML 拖放实例</h1><p>下列是关于拖放的简单例子：</p><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">allowDrop</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    ev.preventDefault();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drag</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    ev.dataTransfer.setData(<span class="string">"text"</span>, ev.target.id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drop</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    ev.preventDefault();</span><br><span class="line">    <span class="keyword">var</span> data = ev.dataTransfer.getData(<span class="string">"text"</span>);</span><br><span class="line">    ev.target.appendChild(<span class="built_in">document</span>.getElementById(data));</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">"div1"</span> ondrop=<span class="string">"drop(event)"</span> ondragover=<span class="string">"allowDrop(event)"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;img id="drag1" src="img_logo.gif" draggable="true" ondragstart="drag(event)" width="336" height="69"&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><pre><code>它也许看上去有点复杂，不过让我们研究一下拖放事件的所有不同部分。</code></pre><p>把元素设置为可拖放<br>首先：<br>为了把一个元素设置为可拖放，请把 draggable 属性设置为 true：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img draggable=<span class="string">"true"</span>&gt;</span><br></pre></td></tr></table></figure><pre><code>拖放的内容 - ondragstart 和 setData()然后，规定当元素被拖动时发生的事情。</code></pre><p>在上面的例子中，ondragstart 属性调用了一个 drag(event) 函数，规定拖动什么数据。<br>dataTransfer.setData() 方法设置被拖动数据的数据类型和值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drag</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    ev.dataTransfer.setData(<span class="string">"text"</span>, ev.target.id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在本例中，数据类型是 "text"，而值是这个可拖动元素的 id ("drag1")。</p><h2 id="拖到何处-ondragover"><a href="#拖到何处-ondragover" class="headerlink" title="拖到何处 - ondragover"></a>拖到何处 - ondragover</h2><pre><code>ondragover 事件规定被拖动的数据能够被放置到何处。默认地，数据/元素无法被放置到其他元素中。为了实现拖放，我们必须阻止元素的这种默认的处理方式。</code></pre><p>   这个任务由 ondragover 事件的 event.preventDefault() 方法完成：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">event.preventDefault()</span><br></pre></td></tr></table></figure><pre><code>进行放置 - ondrop当放开被拖数据时，会发生 drop 事件。</code></pre><p>在上面的例子中，ondrop 属性调用了一个函数，drop(event)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drop</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    ev.preventDefault();</span><br><span class="line">    <span class="keyword">var</span> data = ev.dataTransfer.getData(<span class="string">"text"</span>);</span><br><span class="line">    ev.target.appendChild(<span class="built_in">document</span>.getElementById(data));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码解释：</p><pre><code>调用 preventDefault() 来阻止数据的浏览器默认处理方式（drop 事件的默认行为是以链接形式打开）通过 dataTransfer.getData() 方法获得被拖的数据。该方法将返回在 setData() 方法中设置为相同类型的任何数据被拖数据是被拖元素的 id (&quot;drag1&quot;)把被拖元素追加到放置元素中</code></pre><h1 id="HTML-本地存储"><a href="#HTML-本地存储" class="headerlink" title="HTML 本地存储"></a>HTML 本地存储</h1><pre><code>HTML 本地存储：优于 cookies。</code></pre><h2 id="什么是-HTML-本地存储？"><a href="#什么是-HTML-本地存储？" class="headerlink" title="什么是 HTML 本地存储？"></a>什么是 HTML 本地存储？</h2><pre><code>通过本地存储（Local Storage），web 应用程序能够在用户浏览器中对数据进行本地的存储。在 HTML5 之前，应用程序数据只能存储在 cookie 中，包括每个服务器请求。本地存储则更安全，并且可在不影响网站性能的前提下将大量数据存储于本地。与 cookie 不同，存储限制要大得多（至少5MB），并且信息不会被传输到服务器。本地存储经由起源地（origin）（经由域和协议）。所有页面，从起源地，能够存储和访问相同的数据。</code></pre><h2 id="HTML-本地存储对象"><a href="#HTML-本地存储对象" class="headerlink" title="HTML 本地存储对象"></a>HTML 本地存储对象</h2><pre><code>HTML 本地存储提供了两个在客户端存储数据的对象：</code></pre><ul><li>window.localStorage - 存储没有截止日期的数据</li><li>window.sessionStorage - 针对一个 session 来存储数据（当关闭浏览器标签页时数据会丢失）</li></ul><p>在使用本地存储时，请检测 localStorage 和 sessionStorage 的浏览器支持：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span>(Storage) !== <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    <span class="comment">// 针对 localStorage/sessionStorage 的代码</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 抱歉！不支持 Web Storage ..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="localStorage-对象"><a href="#localStorage-对象" class="headerlink" title="localStorage 对象"></a>localStorage 对象</h2><pre><code>localStorage 对象存储的是没有截止日期的数据。当浏览器被关闭时数据不会被删除，在下一天、周或年中，都是可用的。</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存储</span></span><br><span class="line">localStorage.setItem(<span class="string">"lastname"</span>, <span class="string">"Gates"</span>);</span><br><span class="line"><span class="comment">// 取回</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"result"</span>).innerHTML = localStorage.getItem(<span class="string">"lastname"</span>);</span><br></pre></td></tr></table></figure><p>实例解释：</p><pre><code>创建 localStorage 名称/值对，其中：name=&quot;lastname&quot;，value=&quot;Gates&quot;取回 &quot;lastname&quot; 的值，并把它插到 id=&quot;result&quot; 的元素中</code></pre><p>上例也可这样写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存储</span></span><br><span class="line">localStorage.lastname = <span class="string">"Gates"</span>;</span><br><span class="line"><span class="comment">// 取回</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"result"</span>).innerHTML = localStorage.lastname;</span><br></pre></td></tr></table></figure><p>删除 "lastname" localStorage 项目的语法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localStorage.removeItem(<span class="string">"lastname"</span>);</span><br></pre></td></tr></table></figure><p>注释：名称/值对始终存储为字符串。如果需要请记得把它们转换为其他格式！</p><pre><code>下面的例子对用户点击按钮的次数进行计数。在代码中，值字符串被转换为数值，依次对计数进行递增：</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (localStorage.clickcount) &#123;</span><br><span class="line">    localStorage.clickcount = <span class="built_in">Number</span>(localStorage.clickcount) + <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    localStorage.clickcount = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"result"</span>).innerHTML = <span class="string">"您已经点击这个按钮 "</span> +</span><br><span class="line">localStorage.clickcount + <span class="string">" 次。"</span>;</span><br></pre></td></tr></table></figure><h2 id="sessionStorage-对象"><a href="#sessionStorage-对象" class="headerlink" title="sessionStorage 对象"></a>sessionStorage 对象</h2><pre><code>sessionStorage 对象等同 localStorage 对象，不同之处在于只对一个 session 存储数据。如果用户关闭具体的浏览器标签页，数据也会被删除。</code></pre><p>下例在当前 session 中对用户点击按钮进行计数：</p><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (sessionStorage.clickcount) &#123;</span><br><span class="line">    sessionStorage.clickcount = <span class="built_in">Number</span>(sessionStorage.clickcount) + <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    sessionStorage.clickcount = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"result"</span>).innerHTML = <span class="string">"在本 session 中，您已经点击这个按钮 "</span> +</span><br><span class="line">sessionStorage.clickcount + <span class="string">" 次。"</span>;</span><br></pre></td></tr></table></figure><h1 id="HTML5-应用程序缓存"><a href="#HTML5-应用程序缓存" class="headerlink" title="HTML5 应用程序缓存"></a>HTML5 应用程序缓存</h1><pre><code>使用应用程序缓存，通过创建 cache manifest 文件，可轻松创建 web 应用的离线版本。</code></pre><h2 id="什么是应用程序缓存？"><a href="#什么是应用程序缓存？" class="headerlink" title="什么是应用程序缓存？"></a>什么是应用程序缓存？</h2><pre><code>HTML5 引入了应用程序缓存（Application Cache），这意味着可对 web 应用进行缓存，并可在没有因特网连接时进行访问。</code></pre><p>应用程序缓存为应用带来三个优势：</p><ul><li>离线浏览 - 用户可在应用离线时使用它们</li><li>速度 - 已缓存资源加载得更快</li><li>减少服务器负载 - 浏览器将只从服务器下载更新过或更改过的资源</li></ul><h2 id="HTML-Cache-Manifest-实例"><a href="#HTML-Cache-Manifest-实例" class="headerlink" title="HTML Cache Manifest 实例"></a>HTML Cache Manifest 实例</h2><p>下例展示了带有 cache manifest 的 HTML 文档（供离线浏览）：</p><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html manifest=<span class="string">"demo.appcache"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">文档内容 ......</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><h2 id="Cache-Manifest-基础"><a href="#Cache-Manifest-基础" class="headerlink" title="Cache Manifest 基础"></a>Cache Manifest 基础</h2><p>如需启用应用程序缓存，请在文档的 <html> 标签中包含 manifest 属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html manifest=<span class="string">"demo.appcache"</span>&gt;</span><br><span class="line">...</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><pre><code>每个指定了 manifest 的页面在用户对其访问时都会被缓存。如果未指定 manifest 属性，则页面不会被缓存（除非在 manifest 文件中直接指定了该页面）。manifest 文件的建议文件扩展名是：&quot;.appcache&quot;。</code></pre><p>注意：manifest 文件需要设置正确的 MIME-type，即 "text/cache-manifest"。必须在 web 服务器上进行配置。</p><h1 id="Manifest-文件"><a href="#Manifest-文件" class="headerlink" title="Manifest 文件"></a>Manifest 文件</h1><pre><code>manifest 文件是简单的文本文件，它告知浏览器被缓存的内容（以及不缓存的内容）。</code></pre><h2 id="manifest-文件有三个部分："><a href="#manifest-文件有三个部分：" class="headerlink" title="manifest 文件有三个部分："></a>manifest 文件有三个部分：</h2><ul><li>CACHE MANIFEST - 在此标题下列出的文件将在首次下载后进行缓存</li><li>NETWORK - 在此标题下列出的文件需要与服务器的连接，且不会被缓存</li><li>FALLBACK - 在此标题下列出的文件规定当页面无法访问时的回退页面（比如 404 页面）</li></ul><h3 id="CACHE-MANIFEST"><a href="#CACHE-MANIFEST" class="headerlink" title="CACHE MANIFEST"></a>CACHE MANIFEST</h3><p>第一行，CACHE MANIFEST，是必需的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CACHE MANIFEST</span><br><span class="line">/theme.css</span><br><span class="line">/logo.gif</span><br><span class="line">/main.js</span><br></pre></td></tr></table></figure><p>上面的 manifest 文件列出了三个资源：</p><pre><code>一个 CSS 文件，一个 GIF 图像，以及一个 JavaScript 文件。当 manifest 文件被加载后，浏览器会从网站的根目录下载这三个文件。然后，无论用户何时与因特网断开连接，这些资源依然可用。</code></pre><h3 id="NETWORK"><a href="#NETWORK" class="headerlink" title="NETWORK"></a>NETWORK</h3><pre><code>下面的 NETWORK 部分规定文件 &quot;login.php&quot; 永远不会被缓存，且离线时是不可用的：</code></pre><h3 id="NETWORK-1"><a href="#NETWORK-1" class="headerlink" title="NETWORK:"></a>NETWORK:</h3><p>login.asp<br>可以使用星号来指示所有其他其他资源/文件都需要因特网连接：</p><h3 id="NETWORK-2"><a href="#NETWORK-2" class="headerlink" title="NETWORK:"></a>NETWORK:</h3><p>FALLBACK<br>下面的 FALLBACK 部分规定如果无法建立因特网连接，则用 "offline.html" 替代 /html/ 目录中的所有文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FALLBACK:</span><br><span class="line">/html/ <span class="regexp">/offline.html</span></span><br></pre></td></tr></table></figure><p>注释：第一个 URI 是资源，第二个是替补。</p><h2 id="更新缓存"><a href="#更新缓存" class="headerlink" title="更新缓存"></a>更新缓存</h2><p>   一旦应用被缓存，它就会保持缓存直到发生下列情况：</p><ul><li>用户清空浏览器缓存</li><li>manifest 文件被修改（参阅下面的提示）</li><li>由程序来更新应用缓存<br>实例 - 完整的 Cache Manifest 文件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CACHE MANIFEST</span><br><span class="line"></span><br><span class="line">/theme.css</span><br><span class="line">/logo.gif</span><br><span class="line">/main.js</span><br><span class="line"></span><br><span class="line">NETWORK:</span><br><span class="line">login.asp</span><br><span class="line"></span><br><span class="line">FALLBACK:</span><br><span class="line">/html/ <span class="regexp">/offline.html</span></span><br></pre></td></tr></table></figure><p>提示：以 "#" 开头的是注释行，但也可满足其他用途。应用的缓存只会在其 manifest 文件改变时被更新。如果您编辑了一幅图像，或者修改了一个 JavaScript 函数，这些改变都不会被重新缓存。更新注释行中的日期和版本号是一种使浏览器重新缓存文件的办法。</p><pre><code>关于应用程序缓存的注意事项请留心缓存的内容。一旦文件被缓存，则浏览器会继续展示已缓存的版本，即使您修改了服务器上的文件。为了确保浏览器更新缓存，您需要更新 manifest 文件。</code></pre><p>注释：浏览器对缓存数据的容量限制可能不太一样（某些浏览器的限制是每个站点 5MB）。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200528235355793.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70&quot; alt=&quot;HTMLj基础_13&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;HTML5-地理定位&quot;&gt;&lt;a href=&quot;#HTML5-地理定位&quot; class=&quot;headerlink&quot; title=&quot;HTML5 地理定位&quot;&gt;&lt;/a&gt;HTML5 地理定位&lt;/h1&gt;&lt;p&gt;   定位用户的位置&lt;/p&gt;
&lt;h2 id=&quot;HTML5-Geolocation-API-用于获得用户的地理位置。&quot;&gt;&lt;a href=&quot;#HTML5-Geolocation-API-用于获得用户的地理位置。&quot; class=&quot;headerlink&quot; title=&quot;HTML5 Geolocation API 用于获得用户的地理位置。&quot;&gt;&lt;/a&gt;HTML5 Geolocation API 用于获得用户的地理位置。&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;鉴于该特性可能侵犯用户的隐私，除非用户同意，
否则用户位置信息是不可用的。&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="HTML" scheme="https://oldaz.github.io/categories/HTML/"/>
    
    
      <category term="HTML" scheme="https://oldaz.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>HTML基础_12</title>
    <link href="https://oldaz.github.io/2020/05/28/HTML%E5%9F%BA%E7%A1%80_12/"/>
    <id>https://oldaz.github.io/2020/05/28/HTML%E5%9F%BA%E7%A1%80_12/</id>
    <published>2020-05-27T16:04:05.000Z</published>
    <updated>2020-05-28T06:48:00.799Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200528000223912.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="HTML基础_12"></p><h1 id="HTML-多媒体"><a href="#HTML-多媒体" class="headerlink" title="HTML 多媒体"></a>HTML 多媒体</h1><pre><code>Web 上的多媒体指的是音效、音乐、视频和动画。现代网络浏览器已支持很多多媒体格式</code></pre><a id="more"></a><h2 id="什么是多媒体？"><a href="#什么是多媒体？" class="headerlink" title="什么是多媒体？"></a>什么是多媒体？</h2><pre><code>多媒体来自多种不同的格式。它可以是您听到或看到的任何内容，          文字、图片、音乐、音效、录音、电影、动画等等。</code></pre><p>在因特网上，您会经常发现嵌入网页中的多媒体元素，现代浏览器已支持多种多媒体格式。<br>在本篇文章中，您将了解到不同的多媒体格式，以及如何在您的网页中使用它们。</p><h2 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h2><pre><code>第一款因特网浏览器只支持文本，而且即使是对文本的支持也仅限于单一字体和单一颜色。随后诞生了支持颜色、字体和文本样式的浏览器，图片支持也被加入。不同的浏览器以不同的方式处理对音效、动画和视频的支持。某些元素能够以内联的方式处理，而某些则需要额外的插件。</code></pre><h2 id="多媒体格式"><a href="#多媒体格式" class="headerlink" title="多媒体格式"></a>多媒体格式</h2><pre><code>多媒体元素（比如视频和音频）存储于媒体文件中。确定媒体类型的最常用的方法是查看文件扩展名。当浏览器得到文件扩展名 .htm 或 .html 时，它会假定该文件是 HTML 页面。.xml 扩展名指示 XML 文件，而 .css 扩展名指示样式表。图片格式则通过 .gif 或 .jpg 来识别。多媒体元素元素也拥有带有不同扩展名的文件格式，比如 .swf、.wmv、.mp3 以及 .mp4。</code></pre><h2 id="视频格式"><a href="#视频格式" class="headerlink" title="视频格式"></a>视频格式</h2><pre><code>MP4 格式是一种新的即将普及的因特网视频格式。HTML5 、Flash 播放器以及优酷等视频网站均支持它。</code></pre><table><thead><tr><th>格式</th><th>文件</th><th>描述</th></tr></thead><tbody><tr><td>AVI</td><td>.avi</td><td>AVI (Audio Video Interleave) 格式是由微软开发的。所有运行 Windows 的计算机都支持 AVI 格式。它是因特网上很常见的格式，但非 Windows 计算机并不总是能够播放。</td></tr><tr><td>WMV</td><td>.wmv</td><td>Windows Media 格式是由微软开发的。Windows Media 在因特网上很常见，但是如果未安装额外的（免费）组件，就无法播放 Windows Media 电影。一些后期的 Windows Media 电影在所有非 Windows 计算机上都无法播放，因为没有合适的播放器。</td></tr><tr><td>MPEG</td><td>.mpg .mpeg</td><td>MPEG (Moving Pictures Expert Group) 格式是因特网上最流行的格式。它是跨平台的，得到了所有最流行的浏览器的支持。</td></tr><tr><td>QuickTime</td><td>.mov</td><td>QuickTime 格式是由苹果公司开发的。QuickTime 是因特网上常见的格式，但是 QuickTime 电影不能在没有安装额外的（免费）组件的 Windows 计算机上播放。</td></tr><tr><td>RealVideo</td><td>.rm .ram</td><td>RealVideo 格式是由 Real Media 针对因特网开发的。该格式允许低带宽条件下（在线视频、网络电视）的视频流。由于是低带宽优先的，质量常会降低。</td></tr><tr><td>Flash</td><td>.swf  .flv</td><td>Flash (Shockwave) 格式是由 Macromedia 开发的。Shockwave 格式需要额外的组件来播放。但是该组件会预装到 Firefox 或 IE 之类的浏览器上。</td></tr><tr><td>Mpeg-4</td><td>.mp4</td><td>Mpeg-4 (with H.264 video compression) 是一种针对因特网的新格式。事实上，YouTube 推荐使用 MP4。YouTube 接收多种格式，然后全部转换为 .flv 或 .mp4 以供分发。越来越多的视频发布者转到 MP4，将其作为 Flash 播放器和 HTML5 的因特网共享格式。</td></tr></tbody></table><h2 id="声音格式"><a href="#声音格式" class="headerlink" title="声音格式"></a>声音格式</h2><table><thead><tr><th>格式</th><th>文件</th><th>描述</th></tr></thead><tbody><tr><td>MIDI</td><td>.mid  .midi</td><td>MIDI (Musical Instrument Digital Interface) 是一种针对电子音乐设备（比如合成器和声卡）的格式。MIDI 文件不含有声音，但包含可被电子产品（比如声卡）播放的数字音乐指令。</td></tr><tr><td></td><td></td><td></td></tr><tr><td>RealAudio</td><td>.rm .ram</td><td>RealAudio 格式是由 Real Media 针对因特网开发的。该格式也支持视频。该格式允许低带宽条件下的音频流（在线音乐、网络音乐）。由于是低带宽优先的，质量常会降低。</td></tr><tr><td>Wave</td><td>.wav</td><td>Wave (waveform) 格式是由 IBM 和微软开发的。所有运行 Windows 的计算机和所有网络浏览器（除了 Google Chrome）都支持它。</td></tr><tr><td>WMA</td><td>.wma</td><td>WMA 格式 (Windows Media Audio)，质量优于 MP3，兼容大多数播放器，除了 iPod。WMA 文件可作为连续的数据流来传输，这使它对于网络电台或在线音乐很实用。</td></tr><tr><td>MP3</td><td>.mp3 .mpga</td><td>MP3 文件实际上是 MPEG 文件的声音部分。MPEG 格式最初是由运动图像专家组开发的。MP3 是其中最受欢迎的针对音乐的声音格式。期待未来的软件系统都支持它。</td></tr></tbody></table><h2 id="使用哪种格式？"><a href="#使用哪种格式？" class="headerlink" title="使用哪种格式？"></a>使用哪种格式？</h2><ol><li>WAVE 是因特网上最受欢迎的无压缩声音格式，所有流行的浏览器都支持它。如果您需要未经压缩的声音（音乐或演讲），那么您应该使用 WAVE 格式。</li></ol><ol start="2"><li>MP3 是最新的压缩录制音乐格式。MP3 这个术语已经成为数字音乐的代名词。如果您的网址从事录制音乐，那么 MP3 是一个选项。</li></ol><h1 id="HTML-Object-元素"><a href="#HTML-Object-元素" class="headerlink" title="HTML Object 元素"></a>HTML Object 元素</h1><pre><code>&lt;object&gt; 的作用是支持 HTML 助手（插件）。</code></pre><h2 id="HTML-助手（插件）"><a href="#HTML-助手（插件）" class="headerlink" title="HTML 助手（插件）"></a>HTML 助手（插件）</h2><ol><li>辅助应用程序（helper application）是可由浏览器启动的程序。</li><li>辅助应用程序也称为插件。</li><li>辅助程序可用于播放音频和视频（以及其他）。</li><li>辅助程序是使用 <object> 标签来加载的。</li></ol><p>使用辅助程序播放视频和音频的一个优势是，<br>您能够允许用户来控制部分或全部播放设置。<br>大多数辅助应用程序允许对音量设置和播放功能（比如后退、暂停、停止和播放）的手工（或程序的）控制。</p><h2 id="HTML-音频"><a href="#HTML-音频" class="headerlink" title="HTML 音频"></a>HTML 音频</h2><p> 在 HTML 中播放声音的方法有很多种。</p><pre><code>问题，问题，以及解决方法在 HTML 中播放音频并不容易！您需要谙熟大量技巧，以确保您的音频文件在所有浏览器中（Internet Explorer, Chrome, Firefox, Safari, Opera）和所有硬件上（PC, Mac , iPad, iPhone）都能够播放。</code></pre><h2 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h2><pre><code>浏览器插件是一种扩展浏览器标准功能的小型计算机程序。插件有很多用途：播放音乐、显示地图、验证银行账号，控制输入等等。可使用 &lt;object&gt; 或 &lt;embed&gt; 标签来将插件添加到 HTML 页面。</code></pre><p>这些标签定义资源（通常非 HTML 资源）的容器，根据类型，它们即会由浏览器显示，也会由外部插件显示。</p><h2 id="使用-60-embed-gt-元素"><a href="#使用-60-embed-gt-元素" class="headerlink" title="使用 &#60;embed&gt; 元素"></a>使用 &#60;embed&gt; 元素</h2><pre><code>&lt;embed&gt; 标签定义外部（非 HTML）内容的容器。（这是一个 HTML5 标签，在 HTML4 中是非法的，但是所有浏览器中都有效）。</code></pre><p>下面的代码片段能够显示嵌入网页中的 MP3 文件：<br>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;embed height=<span class="string">"100"</span> width=<span class="string">"100"</span> src=<span class="string">"song.mp3"</span> /&gt;</span><br></pre></td></tr></table></figure><p>问题：</p><pre><code>&lt;embed&gt; 标签在 HTML 4 中是无效的。页面无法通过 HTML 4 验证。不同的浏览器对音频格式的支持也不同。如果浏览器不支持该文件格式，没有插件的话就无法播放该音频。如果用户的计算机未安装插件，无法播放音频。如果把该文件转换为其他格式，仍然无法在所有浏览器中播放。</code></pre><p>注释：使用 &#60;!DOCTYPE html&gt; (HTML5) 解决验证问题。</p><h2 id="使用-60-object-gt-元素"><a href="#使用-60-object-gt-元素" class="headerlink" title="使用 &#60;object&gt; 元素"></a>使用 &#60;object&gt; 元素</h2><pre><code>&lt;object tag&gt; 标签也可以定义外部（非 HTML）内容的容器。</code></pre><p>   下面的代码片段能够显示嵌入网页中的 MP3 文件：<br>    实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;object height=<span class="string">"100"</span> width=<span class="string">"100"</span> data=<span class="string">"song.mp3"</span>&gt;&lt;<span class="regexp">/object&gt;</span></span><br></pre></td></tr></table></figure><p>问题：</p><pre><code>不同的浏览器对音频格式的支持也不同。如果浏览器不支持该文件格式，没有插件的话就无法播放该音频。如果用户的计算机未安装插件，无法播放音频。如果把该文件转换为其他格式，仍然无法在所有浏览器中播放。</code></pre><h2 id="使用-HTML5-元素"><a href="#使用-HTML5-元素" class="headerlink" title="使用 HTML5  元素"></a>使用 HTML5 <audio> 元素</h2><pre><code>&lt;audio&gt; 元素是一个 HTML5 元素，在 HTML 4 中是非法的，但在所有浏览器中都有效。</code></pre><p> 实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;audio controls=<span class="string">"controls"</span>&gt;</span><br><span class="line">     &lt;source src=<span class="string">"song.mp3"</span> type=<span class="string">"audio/mp3"</span> /&gt;</span><br><span class="line">     &lt;source src=<span class="string">"song.ogg"</span> type=<span class="string">"audio/ogg"</span> /&gt;</span><br><span class="line">   Your browser does not support <span class="keyword">this</span> audio format.</span><br><span class="line">   &lt;<span class="regexp">/audio&gt;</span></span><br></pre></td></tr></table></figure><p>   问题：</p><pre><code> &lt;audio&gt; 标签在 HTML 4 中是无效的。您的页面无法通过 HTML 4 验证。您必须把音频文件转换为不同的格式。 &lt;audio&gt; 元素在老式浏览器中不起作用。</code></pre><p>   注释：使用 <!DOCTYPE html> (HTML5) 解决验证问题。</p><h2 id="向网站添加音频的最简单方法"><a href="#向网站添加音频的最简单方法" class="headerlink" title="向网站添加音频的最简单方法"></a>向网站添加音频的最简单方法</h2><p><strong>向网页添加音频的最简单的方法是什么？</strong></p><pre><code>雅虎的媒体播放器绝对算其中之一。</code></pre><p> 使用雅虎媒体播放器是一个不同的途径。您只需简单地让雅虎来完成歌曲播放的工作就好了。</p><p>它能播放 mp3 以及一系列其他格式。通过一行简单的代码，您就可以把它添加到网页中，轻松地将 HTML 页面转变为专业的播放列表。</p><p><strong>雅虎媒体播放器</strong><br>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">"song.mp3"</span>&gt;Play Sound&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">" src="</span>http:<span class="comment">//mediaplayer.yahoo.com/js"&gt;</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>使用雅虎播放器是免费的。如需使用它，您需要把这段 JavaScript 插入网页底部：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"http://mediaplayer.yahoo.com/js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>然后只需简单地把 MP3 文件链接到您的 HTML 中，JavaScript 会自动地为每首歌创建播放按钮：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">"song1.mp3"</span>&gt;Play Song <span class="number">1</span>&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">&lt;a href="song2.mp3"&gt;Play Song 2&lt;/</span>a&gt;</span><br></pre></td></tr></table></figure><p>雅虎媒体播放器为您的用户提供的是一个小型的播放按钮，而不是完整的播放器。不过，当您点击该按钮，会弹出完整的播放器。<br>请注意，这个播放器始终停靠在窗框底部。只需点击它，就可将其滑出。</p><h2 id="使用超链接"><a href="#使用超链接" class="headerlink" title="使用超链接"></a>使用超链接</h2><pre><code>如果网页包含指向媒体文件的超链接，大多数浏览器会使用“辅助应用程序”来播放文件。</code></pre><p>以下代码片段显示指向 mp3 文件的链接。如果用户点击该链接，浏览器会启动“辅助应用程序”来播放该文件：</p><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">"song.mp3"</span>&gt;Play the sound&lt;<span class="regexp">/a&gt;</span></span><br></pre></td></tr></table></figure><h2 id="内联的声音"><a href="#内联的声音" class="headerlink" title="内联的声音"></a>内联的声音</h2><p>当您在网页中包含声音，或者作为网页的组成部分时，它被称为内联声音。</p><pre><code>如果您打算在 web 应用程序中使用内联声音，您需要意识到很多人都觉得内联声音令人恼火。同时请注意，用户可能已经关闭了浏览器中的内联声音选项。我们最好的建议是只在用户希望听到内联声音的地方包含它们。一个正面的例子是，在用户需要听到录音并点击某个链接时，会打开页面然后播放录音。</code></pre><h2 id="HTML-4-01-多媒体标签"><a href="#HTML-4-01-多媒体标签" class="headerlink" title="HTML 4.01 多媒体标签"></a>HTML 4.01 多媒体标签</h2><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td>&#60;applet&gt;</td><td>不赞成。定义内嵌 applet。</td></tr><tr><td>&#60;embed&gt;</td><td>HTML4 中不赞成，HTML5 中允许。定义内嵌对象。</td></tr><tr><td>&#60;object&gt;</td><td>定义内嵌对象。</td></tr><tr><td>&#60;param&gt;</td><td>定义对象的参数。</td></tr></tbody></table><h2 id="HTML-5-多媒体标签"><a href="#HTML-5-多媒体标签" class="headerlink" title="HTML 5 多媒体标签"></a>HTML 5 多媒体标签</h2><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td>&#60;audio&gt;</td><td>标签定义声音，比如音乐或其他音频流。</td></tr><tr><td>&#60;embed&gt;</td><td>标签定义嵌入的内容，比如插件。</td></tr></tbody></table><h1 id="HTML-视频"><a href="#HTML-视频" class="headerlink" title="HTML 视频"></a>HTML 视频</h1><pre><code>在 HTML 中播放视频的方法有很多种。</code></pre><h2 id="使用-60-embed-gt-标签"><a href="#使用-60-embed-gt-标签" class="headerlink" title="使用 &#60;embed&gt; 标签"></a>使用 &#60;embed&gt; 标签</h2><pre><code>&lt;embed&gt; 标签的作用是在 HTML 页面中嵌入多媒体元素。下面的 HTML 代码显示嵌入网页的 Flash 视频：</code></pre><p>   实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;embed src=<span class="string">"movie.swf"</span> height=<span class="string">"200"</span> width=<span class="string">"200"</span>/&gt;</span><br></pre></td></tr></table></figure><p>问题</p><pre><code>HTML4 无法识别 &lt;embed&gt; 标签。您的页面无法通过验证。如果浏览器不支持 Flash，那么视频将无法播放iPad 和 iPhone 不能显示 Flash 视频。如果您将视频转换为其他格式，那么它仍然不能在所有浏览器中播放。</code></pre><h2 id="使用-60-video-gt-标签"><a href="#使用-60-video-gt-标签" class="headerlink" title="使用 &#60;video&gt; 标签"></a>使用 &#60;video&gt; 标签</h2><pre><code>&lt;video&gt; 是 HTML 5 中的新标签。</code></pre><p>   &#60;video&gt; 标签的作用是在 HTML 页面中嵌入视频元素。<br>    以下 HTML 片段会显示一段嵌入网页的 ogg、mp4 或 webm 格式的视频：</p><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;video width=<span class="string">"320"</span> height=<span class="string">"240"</span> controls=<span class="string">"controls"</span>&gt;</span><br><span class="line">  &lt;source src=<span class="string">"movie.mp4"</span> type=<span class="string">"video/mp4"</span> /&gt;</span><br><span class="line">  &lt;source src=<span class="string">"movie.ogg"</span> type=<span class="string">"video/ogg"</span> /&gt;</span><br><span class="line">  &lt;source src=<span class="string">"movie.webm"</span> type=<span class="string">"video/webm"</span> /&gt;</span><br><span class="line">Your browser does not support the video tag.</span><br><span class="line">&lt;<span class="regexp">/video&gt;</span></span><br></pre></td></tr></table></figure><p>   您必须把视频转换为很多不同的格式。</p><pre><code>&lt;video&gt; 元素在老式浏览器中无效。&lt;video&gt; 元素无法通过 HTML 4 和 XHTML 验证</code></pre><h1 id="最好的-HTML-解决方法"><a href="#最好的-HTML-解决方法" class="headerlink" title="最好的 HTML 解决方法"></a>最好的 HTML 解决方法</h1><pre><code>HTML 5 + &lt;object&gt; + &lt;embed&gt;</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;video width=<span class="string">"320"</span> height=<span class="string">"240"</span> controls=<span class="string">"controls"</span>&gt;</span><br><span class="line">     &lt;source src=<span class="string">"movie.mp4"</span> type=<span class="string">"video/mp4"</span> /&gt;</span><br><span class="line">     &lt;source src=<span class="string">"movie.ogg"</span> type=<span class="string">"video/ogg"</span> /&gt;</span><br><span class="line">     &lt;source src=<span class="string">"movie.webm"</span> type=<span class="string">"video/webm"</span> /&gt;</span><br><span class="line">     &lt;object data=<span class="string">"movie.mp4"</span> width=<span class="string">"320"</span> height=<span class="string">"240"</span>&gt;</span><br><span class="line">       &lt;embed src=<span class="string">"movie.swf"</span> width=<span class="string">"320"</span> height=<span class="string">"240"</span> /&gt;</span><br><span class="line">     &lt;<span class="regexp">/object&gt;</span></span><br><span class="line"><span class="regexp">   &lt;/</span>video&gt;</span><br></pre></td></tr></table></figure><pre><code>上例中使用了 4 中不同的视频格式。HTML 5 &lt;video&gt; 元素会尝试播放以 mp4、ogg 或 webm 格式中的一种来播放视频。如果均失败，则回退到 &lt;embed&gt; 元素。</code></pre><p>问题:</p><pre><code>您必须把视频转换为很多不同的格式&lt;video&gt; 元素无法通过 HTML 4 和 XHTML 验证。&lt;embed&gt; 元素无法通过 HTML 4 和 XHTML 验证。</code></pre><p>注释：使用 &#60;!DOCTYPE html&gt; (HTML5) 解决验证问题。</p><h2 id="优酷解决方案"><a href="#优酷解决方案" class="headerlink" title="优酷解决方案"></a>优酷解决方案</h2><pre><code>在 HTML 中显示视频的最简单的方法是使用优酷等视频网站。</code></pre><p> 如果您希望在网页中播放视频，那么您可以把视频上传到优酷等视频网站，然后在您的网页中插入 HTML 代码即可播放视频：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;embed src=<span class="string">"http://player.youku.com/player.php/sid/XMzI2NTc4NTMy/v.swf"</span> </span><br><span class="line">  width=<span class="string">"480"</span> height=<span class="string">"400"</span> </span><br><span class="line">  type=<span class="string">"application/x-shockwave-flash"</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/embed&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用超链接-1"><a href="#使用超链接-1" class="headerlink" title="使用超链接"></a>使用超链接</h2><pre><code>如果网页包含指向媒体文件的超链接，大多数浏览器会使用“辅助应用程序”来播放文件。以下代码片段显示指向 AVI 文件的链接。如果用户点击该链接，浏览器会启动“辅助应用程序”，比如 Windows Media Player 来播放这个 AVI 文件：</code></pre><p>   实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">"movie.swf"</span>&gt;Play a video file&lt;<span class="regexp">/a&gt;</span></span><br></pre></td></tr></table></figure><h2 id="关于内联视频的一段注释"><a href="#关于内联视频的一段注释" class="headerlink" title="关于内联视频的一段注释"></a>关于内联视频的一段注释</h2><pre><code>当视频被包含在网页中时，它被称为内联视频。 如果您打算在 web 应用程序中使用内联视频， 您需要意识到很多人都觉得内联视频令人恼火。</code></pre><p>   同时请注意，用户可能已经关闭了浏览器中的内联视频选项。<br>    我们最好的建议是只在用户希望看到内联视频的地方包含它们。<br>    一个正面的例子是，在用户需要看到视频并点击某个链接时，<br>    会打开页面然后播放视频。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200528000223912.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70&quot; alt=&quot;HTML基础_12&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;HTML-多媒体&quot;&gt;&lt;a href=&quot;#HTML-多媒体&quot; class=&quot;headerlink&quot; title=&quot;HTML 多媒体&quot;&gt;&lt;/a&gt;HTML 多媒体&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;Web 上的多媒体指的是音效、音乐、视频和动画。
现代网络浏览器已支持很多多媒体格式&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="HTML" scheme="https://oldaz.github.io/categories/HTML/"/>
    
    
      <category term="HTML" scheme="https://oldaz.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>HTML基础_11</title>
    <link href="https://oldaz.github.io/2020/05/27/HTML%E5%9F%BA%E7%A1%80_11/"/>
    <id>https://oldaz.github.io/2020/05/27/HTML%E5%9F%BA%E7%A1%80_11/</id>
    <published>2020-05-27T15:25:57.000Z</published>
    <updated>2020-05-27T15:26:39.039Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200527232415485.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="HTML基础_11"></p><h1 id="HTML5-Canvas"><a href="#HTML5-Canvas" class="headerlink" title="HTML5 Canvas"></a>HTML5 Canvas</h1><pre><code>canvas 元素用于在网页上绘制图形。</code></pre><h2 id="什么是-Canvas？"><a href="#什么是-Canvas？" class="headerlink" title="什么是 Canvas？"></a>什么是 Canvas？</h2><pre><code>HTML5 的 canvas 元素使用 JavaScript 在网页上绘制图像。画布是一个矩形区域，您可以控制其每一像素。canvas 拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。</code></pre><a id="more"></a><h2 id="创建-Canvas-元素"><a href="#创建-Canvas-元素" class="headerlink" title="创建 Canvas 元素"></a>创建 Canvas 元素</h2><pre><code>向 HTML5 页面添加 canvas 元素。规定元素的 id、宽度和高度：</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas id=<span class="string">"myCanvas"</span> width=<span class="string">"200"</span> height=<span class="string">"100"</span>&gt;&lt;<span class="regexp">/canvas&gt;</span></span><br></pre></td></tr></table></figure><h2 id="通过-JavaScript-来绘制"><a href="#通过-JavaScript-来绘制" class="headerlink" title="通过 JavaScript 来绘制"></a>通过 JavaScript 来绘制</h2><pre><code>canvas 元素本身是没有绘图能力的。所有的绘制工作必须在 JavaScript 内部完成：</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">var</span> c=<span class="built_in">document</span>.getElementById(<span class="string">"myCanvas"</span>);</span><br><span class="line"><span class="keyword">var</span> cxt=c.getContext(<span class="string">"2d"</span>);</span><br><span class="line">cxt.fillStyle=<span class="string">"#FF0000"</span>;</span><br><span class="line">cxt.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">150</span>,<span class="number">75</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JavaScript-使用-id-来寻找-canvas-元素："><a href="#JavaScript-使用-id-来寻找-canvas-元素：" class="headerlink" title="JavaScript 使用 id 来寻找 canvas 元素："></a>JavaScript 使用 id 来寻找 canvas 元素：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c=<span class="built_in">document</span>.getElementById(<span class="string">"myCanvas"</span>);</span><br></pre></td></tr></table></figure><p>然后，创建 context 对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cxt=c.getContext(<span class="string">"2d"</span>);</span><br></pre></td></tr></table></figure><pre><code>getContext(&quot;2d&quot;) 对象是内建的 HTML5 对象，拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。</code></pre><p>下面的两行代码绘制一个红色的矩形：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cxt.fillStyle=<span class="string">"#FF0000"</span>;</span><br><span class="line">cxt.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">150</span>,<span class="number">75</span>);</span><br></pre></td></tr></table></figure><p>   fillStyle 方法将其染成红色，fillRect 方法规定了形状、位置和尺寸。</p><h1 id="HTML5-内联-SVG"><a href="#HTML5-内联-SVG" class="headerlink" title="HTML5 内联 SVG"></a>HTML5 内联 SVG</h1><h2 id="什么是SVG？"><a href="#什么是SVG？" class="headerlink" title="什么是SVG？"></a>什么是SVG？</h2><pre><code>SVG 指可伸缩矢量图形 (Scalable Vector Graphics)SVG 用于定义用于网络的基于矢量的图形SVG 使用 XML 格式定义图形SVG 图像在放大或改变尺寸的情况下其图形质量不会有损失SVG 是万维网联盟的标准</code></pre><h2 id="SVG-的优势"><a href="#SVG-的优势" class="headerlink" title="SVG 的优势"></a>SVG 的优势</h2><p>与其他图像格式相比（比如 JPEG 和 GIF），使用 SVG 的优势在于：</p><pre><code>SVG 图像可通过文本编辑器来创建和修改SVG 图像可被搜索、索引、脚本化或压缩SVG 是可伸缩的SVG 图像可在任何的分辨率下被高质量地打印SVG 可在图像质量不下降的情况下被放大</code></pre><h2 id="把-SVG-直接嵌入-HTML-页面"><a href="#把-SVG-直接嵌入-HTML-页面" class="headerlink" title="把 SVG 直接嵌入 HTML 页面"></a>把 SVG 直接嵌入 HTML 页面</h2><p>在 HTML5 中，您能够将 SVG 元素直接嵌入 HTML 页面中：</p><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;svg xmlns=<span class="string">"http://XXXXXXX"</span> version=<span class="string">"1.1"</span> height=<span class="string">"190"</span>&gt;</span><br><span class="line">  &lt;polygon points=<span class="string">"100,10 40,180 190,60 10,60 160,180"</span></span><br><span class="line">  style=<span class="string">"fill:lime;stroke:purple;stroke-width:5;fill-rule:evenodd;"</span> /&gt;</span><br><span class="line">&lt;<span class="regexp">/svg&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><h1 id="HTML-5-Canvas-vs-SVG"><a href="#HTML-5-Canvas-vs-SVG" class="headerlink" title="HTML 5 Canvas vs SVG"></a>HTML 5 Canvas vs SVG</h1><p>Canvas 和 SVG 都允许您在浏览器中创建图形，但是它们在根本上是不同的。</p><h2 id="SVG"><a href="#SVG" class="headerlink" title="SVG"></a>SVG</h2><pre><code>SVG 是一种使用 XML 描述 2D 图形的语言。SVG 基于 XML，这意味着 SVG DOM 中的每个元素都是可用的。您可以为某个元素附加 JavaScript 事件处理器。在 SVG 中，每个被绘制的图形均被视为对象。如果 SVG 对象的属性发生变化，那么浏览器能够自动重现图形。</code></pre><h2 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h2><pre><code>Canvas 通过 JavaScript 来绘制 2D 图形。Canvas 是逐像素进行渲染的。</code></pre><p>在 canvas 中，一旦图形被绘制完成，它就不会继续得到浏览器的关注。如果其位置发生变化，那么整个场景也需要重新绘制，包括任何或许已被图形覆盖的对象。</p><h2 id="Canvas-与-SVG-的比较"><a href="#Canvas-与-SVG-的比较" class="headerlink" title="Canvas 与 SVG 的比较"></a>Canvas 与 SVG 的比较</h2><p>下表列出了 canvas 与 SVG 之间的一些不同之处。</p><pre><code>Canvas:依赖分辨率不支持事件处理器弱的文本渲染能力能够以 .png 或 .jpg 格式保存结果图像最适合图像密集型的游戏，其中的许多对象会被频繁重绘SVG不依赖分辨率支持事件处理器最适合带有大型渲染区域的应用程序（比如谷歌地图）复杂度高会减慢渲染速度（任何过度使用 DOM 的应用都不快）不适合游戏应用</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200527232415485.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70&quot; alt=&quot;HTML基础_11&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;HTML5-Canvas&quot;&gt;&lt;a href=&quot;#HTML5-Canvas&quot; class=&quot;headerlink&quot; title=&quot;HTML5 Canvas&quot;&gt;&lt;/a&gt;HTML5 Canvas&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;canvas 元素用于在网页上绘制图形。&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;什么是-Canvas？&quot;&gt;&lt;a href=&quot;#什么是-Canvas？&quot; class=&quot;headerlink&quot; title=&quot;什么是 Canvas？&quot;&gt;&lt;/a&gt;什么是 Canvas？&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;HTML5 的 canvas 元素使用 JavaScript 在网页上绘制图像。
画布是一个矩形区域，您可以控制其每一像素。
canvas 拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="HTML" scheme="https://oldaz.github.io/categories/HTML/"/>
    
    
      <category term="HTML" scheme="https://oldaz.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>HTML基础_10</title>
    <link href="https://oldaz.github.io/2020/05/27/HTML%E5%9F%BA%E7%A1%80_10/"/>
    <id>https://oldaz.github.io/2020/05/27/HTML%E5%9F%BA%E7%A1%80_10/</id>
    <published>2020-05-26T16:03:03.000Z</published>
    <updated>2020-05-26T16:05:56.438Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200527000221860.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="HTML基础_10"><br>本篇文章主要介绍了HTML书写规范及其小部分标签。</p><h1 id="HTML5-语义元素"><a href="#HTML5-语义元素" class="headerlink" title="HTML5 语义元素"></a>HTML5 语义元素</h1><h2 id="什么是语义元素？"><a href="#什么是语义元素？" class="headerlink" title="什么是语义元素？"></a>什么是语义元素？</h2><pre><code>语义元素清楚地向浏览器和开发者描述其意义。非语义元素的例子：&lt;div&gt; 和 &lt;span&gt; - 无法提供关于其内容的信息。语义元素的例子：&lt;form&gt;、&lt;table&gt; 以及 &lt;img&gt; - 清晰地定义其内容</code></pre><p>所有现代浏览器均支持 HTML5 语义元素。<br>此外，您可以“帮助”老式浏览器处理“未知元素”。</p><a id="more"></a><h2 id="HTML5-中新的语义元素"><a href="#HTML5-中新的语义元素" class="headerlink" title="HTML5 中新的语义元素"></a>HTML5 中新的语义元素</h2><pre><code>许多网站包含了指示导航、页眉以及页脚的 HTML 代码，例如这些：&lt;div id=&quot;nav&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;div id=&quot;footer&quot;&gt;。</code></pre><p>HTML5 提供了定义页面不同部分的新语义元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;article&gt;</span><br><span class="line">&lt;aside&gt;</span><br><span class="line">&lt;details&gt;</span><br><span class="line">&lt;figcaption&gt;</span><br><span class="line">&lt;figure&gt;</span><br><span class="line">&lt;footer&gt;</span><br><span class="line">&lt;header&gt;</span><br><span class="line">&lt;main&gt;</span><br><span class="line">&lt;mark&gt;</span><br><span class="line">&lt;nav&gt;</span><br><span class="line">&lt;section&gt;</span><br><span class="line">&lt;summary&gt;</span><br><span class="line">&lt;time&gt;</span><br></pre></td></tr></table></figure><h1 id="HTML5-语义元素-1"><a href="#HTML5-语义元素-1" class="headerlink" title="HTML5 语义元素"></a>HTML5 语义元素</h1><h2 id="HTML5-60-section-gt-元素"><a href="#HTML5-60-section-gt-元素" class="headerlink" title="HTML5 &#60;section&gt; 元素"></a>HTML5 &#60;section&gt; 元素</h2><pre><code>&lt;section&gt; 元素定义文档中的节。可以将网站首页划分为简介、内容、联系信息等节。</code></pre><h2 id="HTML5-60-article-gt-元素"><a href="#HTML5-60-article-gt-元素" class="headerlink" title="HTML5 &#60;article&gt; 元素"></a>HTML5 &#60;article&gt; 元素</h2><pre><code>&lt;article&gt; 元素规定独立的自包含内容。文档有其自身的意义，并且可以独立于网站其他内容进行阅读。&lt;article&gt; 元素的应用场景：1.论坛2.博客3.新闻</code></pre><h2 id="嵌套语义元素"><a href="#嵌套语义元素" class="headerlink" title="嵌套语义元素"></a>嵌套语义元素</h2><pre><code>在 HTML5 标准中，&lt;article&gt; 元素定义完整的相关元素自包含块。&lt;section&gt; 元素被定义为相关元素块。     我们能够使用该定义来决定如何嵌套元素吗？不，我们不能！ 在因特网上，您会发现 &lt;section&gt; 元素包含 &lt;article&gt; 元素的 HTML 页面，还有 &lt;article&gt; 元素包含 &lt;sections&gt; 元素的页面。您还会发现 &lt;section&gt; 元素包含 &lt;section&gt; 元素，同时 &lt;article&gt; 元素包含 &lt;article&gt; 元素</code></pre><h1 id="HTML5-60-footer-gt-元素"><a href="#HTML5-60-footer-gt-元素" class="headerlink" title="HTML5 &#60;footer&gt; 元素"></a>HTML5 &#60;footer&gt; 元素</h1><pre><code>&lt;footer&gt; 元素为文档或节规定页脚。&lt;footer&gt; 元素应该提供有关其包含元素的信息。页脚通常包含文档的作者、版权信息、使用条款链接、联系信息等等。您可以在一个文档中使用多个 &lt;footer&gt; 元素。</code></pre><h1 id="HTML5-60-nav-gt-元素"><a href="#HTML5-60-nav-gt-元素" class="headerlink" title="HTML5&#60;nav&gt; 元素"></a>HTML5&#60;nav&gt; 元素</h1><pre><code>&lt;nav&gt; 元素定义导航链接集合。    &lt;nav&gt; 元素旨在定义大型的导航链接块。不过，并非文档中所有链接都应该位于&lt;nav&gt; 元素中！</code></pre><h1 id="HTML5-60-aside-gt-元素"><a href="#HTML5-60-aside-gt-元素" class="headerlink" title="HTML5 &#60;aside&gt; 元素"></a>HTML5 &#60;aside&gt; 元素</h1><pre><code>&lt;aside&gt; 元素页面主内容之外的某些内容（比如侧栏）。aside 内容应该与周围内容相关。&lt;img&gt; 元素定义图像，&lt;figcaption&gt; 元素定义标题。</code></pre><h1 id="为何使用-HTML5-元素？"><a href="#为何使用-HTML5-元素？" class="headerlink" title="为何使用 HTML5 元素？"></a>为何使用 HTML5 元素？</h1><pre><code>如果使用 HTML4 的话，开发者会使用他们喜爱的属性名来设置页面元素的样式：header, top, bottom, footer, menu, navigation, main, container, content, article, sidebar, topnav, ...如此，浏览器便无法识别正确的网页内容。而通过 HTML5 元素，比如：&lt;header&gt; &lt;footer&gt; &lt;nav&gt; &lt;section&gt; &lt;article&gt;，此问题迎刃而解。根据 W3C，语义网：“允许跨应用程序、企业和团体对数据进行分享和重用。”</code></pre><h1 id="HTML5-中的语义元素"><a href="#HTML5-中的语义元素" class="headerlink" title="HTML5 中的语义元素"></a>HTML5 中的语义元素</h1><pre><code>下面列出了以字母顺序排列的 HTML5 新语义元素。</code></pre><p>这些链接指向完整的 HTML 参考手册。</p><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td>&#60;article&gt;</td><td>定义文章。</td></tr><tr><td>&#60;aside&gt;</td><td>定义页面内容以外的内容。</td></tr><tr><td>&#60;details&gt;</td><td>定义用户能够查看或隐藏的额外细节。</td></tr><tr><td>&#60;figcaption&gt;</td><td>定义 &#60;figure&gt; 元素的标题。</td></tr><tr><td>&#60;figure&gt;</td><td>规定自包含内容，比如图示、图表、照片、代码清单等。</td></tr><tr><td>&#60;footer&gt;</td><td>定义文档或节的页脚。</td></tr><tr><td>&#60;header&gt;</td><td>规定文档或节的页眉。</td></tr><tr><td>&#60;main&gt;</td><td>规定文档的主内容。</td></tr><tr><td>&#60;mark&gt;</td><td>定义重要的或强调的文本。</td></tr><tr><td>&#60;nav&gt;</td><td>定义导航链接。</td></tr><tr><td>&#60;section&gt;</td><td>定义文档中的节。</td></tr><tr><td>&#60;summary&gt;</td><td>定义 &#60;details&gt; 元素的可见标题。</td></tr><tr><td>&#60;time&gt;</td><td>定义日期/时间。</td></tr></tbody></table><h1 id="从-HTML4-迁移至-HTML5"><a href="#从-HTML4-迁移至-HTML5" class="headerlink" title="从 HTML4 迁移至 HTML5"></a>从 HTML4 迁移至 HTML5</h1><p>   讲解如何从一张典型的 HTML4 页面迁移至典型的 HTML5。<br>   本章演示如何把一张已有的 HTML4 页面转换为 HTML5 页面，在不破坏如何原始内容和结构的情况下。<br>    注释：您可以使用相同的技巧从 HTML4 以及 XHTML 迁移至 HTML5。</p><h1 id="典型的-HTML4-典型的-HTML5"><a href="#典型的-HTML4-典型的-HTML5" class="headerlink" title="典型的 HTML4    典型的 HTML5"></a>典型的 HTML4    典型的 HTML5</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"header"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span></span><br><span class="line"> &lt;div id="menu"&gt;&lt;nav&gt;</span><br><span class="line"> &lt;div id="content"&gt;&lt;section&gt;</span><br><span class="line"> &lt;div id="post"&gt;&lt;article&gt;</span><br><span class="line"> &lt;div id="footer"&gt;&lt;footer&gt;</span><br></pre></td></tr></table></figure><h2 id="60-article-gt-60-section-gt-与-60-div-gt-之间的差异"><a href="#60-article-gt-60-section-gt-与-60-div-gt-之间的差异" class="headerlink" title="&#60;article&gt; &#60;section&gt; 与 &#60;div&gt; 之间的差异"></a>&#60;article&gt; &#60;section&gt; 与 &#60;div&gt; 之间的差异</h2><pre><code>在 HTML5 标准中，&lt;article&gt; &lt;section&gt; 与 &lt;div&gt; 之间的差异很小，令人困惑。在 HTML5 标准中，&lt;section&gt; 元素被定位为相关元素的块。</code></pre><table><thead><tr><th>元素</th><th>属性</th></tr></thead><tbody><tr><td>&#60;article&gt;</td><td>元素被定义为相关元素的完整的自包含块。</td></tr><tr><td>&#60;div&gt;</td><td>元素被定义为子元素的块。</td></tr></tbody></table><pre><code>如何理解呢？       在上面的例子中，我们曾使用 &lt;section&gt; 作为相关 &lt;articles&gt; 的容器。  但是，我们也能够把 &lt;article&gt; 用作文章的容器。</code></pre><h1 id="HTML-5-样式指南和代码约定"><a href="#HTML-5-样式指南和代码约定" class="headerlink" title="HTML(5) 样式指南和代码约定"></a>HTML(5) 样式指南和代码约定</h1><pre><code>web 开发者常常不确定在 HTML 中使用的代码样式和语法。在 2000 年至 2010 年之间，许多 web 开发者从 HTML 转换为 XHTML。通过 XHTML，开发者不得不编写有效的“格式良好的”代码。</code></pre><p>   HTML5 在代码验证时会更宽松一点。</p><pre><code>  通过 HTML5，您必须创建属于自己的最佳实践、样式指南和代码约定。智能且有未来保证对样式的合乎逻辑的使用，可以令其他人更容易理解和使用您的 HTML。在未来，诸如 XML 阅读器之类的程序，也许需要阅读您的 HTML。使用格式良好的“近似 XHTML 的”语法，能够更智能。</code></pre><p>注释：请始终保持您的样式智能、整洁、纯净、格式良好</p><h2 id="请使用小写元素名"><a href="#请使用小写元素名" class="headerlink" title="请使用小写元素名"></a>请使用小写元素名</h2><pre><code>HTML5 允许在元素名中使用混合大小写字母。我们推荐使用小写元素名：混合大小写名称并不好开发者习惯使用小写名（比如在 XHTML 中）小写更起来更纯净小写更易书写</code></pre><h2 id="关闭所有-HTML-元素"><a href="#关闭所有-HTML-元素" class="headerlink" title="关闭所有 HTML 元素"></a>关闭所有 HTML 元素</h2><pre><code>在 HTML5 中，您不必关闭所有元素（例如 &lt;p&gt; 元素）。我们建议关闭所有 HTML 元素（可以不关闭，但是没必要！！！）</code></pre><h2 id="关闭空的-HTML-元素"><a href="#关闭空的-HTML-元素" class="headerlink" title="关闭空的 HTML 元素"></a>关闭空的 HTML 元素</h2><pre><code>在 HTML5 中，关闭空元素是可选的。斜杠（/）在 XHTML 和 XML 中是必需的。如果您期望 XML 软件来访问您的页面，保持这个习惯是个好主意。</code></pre><h2 id="使用小写属性名"><a href="#使用小写属性名" class="headerlink" title="使用小写属性名"></a>使用小写属性名</h2><pre><code>HTML5 允许大小写混合的属性名。</code></pre><p>我们建议使用小写属性名：</p><pre><code>混合属性名并不好开发者习惯于使用小写属性名（比如在 XHTML 中）小写属性名看情况更纯净小写属性名更易书写</code></pre><h2 id="属性值加引号"><a href="#属性值加引号" class="headerlink" title="属性值加引号"></a>属性值加引号</h2><pre><code>HTML5 允许不加引号的属性值。我们推荐属性值加引号：如果属性值包含值，则必须使用引号混合样式绝对不好加引号的值更易阅读</code></pre><h2 id="必需的属性"><a href="#必需的属性" class="headerlink" title="必需的属性"></a>必需的属性</h2><pre><code>请始终对图像使用 alt 属性。当图像无法显示时该属性很重要。请始终定义图像尺寸。这样做会减少闪烁，因为浏览器会在图像加载之前为图像预留空间。</code></pre><h2 id="空格和等号（不加为好）"><a href="#空格和等号（不加为好）" class="headerlink" title="空格和等号（不加为好）"></a>空格和等号（不加为好）</h2><pre><code>等号两边的空格是合法的：但是精简空格更易阅读</code></pre><h2 id="避免长代码行"><a href="#避免长代码行" class="headerlink" title="避免长代码行"></a>避免长代码行</h2><pre><code>当使用 HTML 编辑器时，通过左右滚动来阅读 HTML 代码很不方便。请尽量避免代码行超过 80 个字符。</code></pre><h2 id="空行和缩进"><a href="#空行和缩进" class="headerlink" title="空行和缩进"></a>空行和缩进</h2><pre><code>请勿毫无理由地增加空行。为了提高可读性，请增加空行来分隔大型或逻辑代码块。为了提高可读性，请增加两个空格的缩进。请勿使用 TAB。请勿使用没有必要的空行和缩进。没有必要在短的和相关项目之间使用空行，也没有必要缩进每个元素：</code></pre><h1 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h1><p>&#60;title&gt; 元素在 HTML5 中是必需的。请尽可能制作有意义的标题。</p><pre><code>为了确保恰当的解释，以及正确的搜索引擎索引，在文档中对语言和字符编码的定义越早越好：</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"> &lt;html lang=<span class="string">"en-US"</span>&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line">   &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">   &lt;title&gt;HTML5 Syntax and Coding Style&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp"> &lt;/</span>head&gt;</span><br></pre></td></tr></table></figure><h1 id="HTML-注释"><a href="#HTML-注释" class="headerlink" title="HTML 注释"></a>HTML 注释</h1><pre><code>短注释应该在单行中书写，并在 &lt;!-- 之后增加一个空格，在 &lt;!-- 之前增加一个空格：多行书写记得换行</code></pre><h1 id="样式表"><a href="#样式表" class="headerlink" title="样式表"></a>样式表</h1><pre><code>请使用简单的语法来链接样式表（type 属性不是必需的）短规则可以压缩为一行，长规则应该分为多行。开括号与选择器位于同一行在开括号之前用一个空格使用两个字符的缩进在每个属性与其值之间使用冒号加一个空格在每个逗号或分号之后使用空格在每个属性值对（包括最后一个）之后使用分号只在值包含空格时使用引号来包围值把闭括号放在新的一行，之前不用空格避免每行超过 80 个字符</code></pre><p>注释：在逗号或分号之后添加空格，是所有书写类型的通用规则</p><h1 id="在-HTML-中加载-JavaScript"><a href="#在-HTML-中加载-JavaScript" class="headerlink" title="在 HTML 中加载 JavaScript"></a>在 HTML 中加载 JavaScript</h1><p>请使用简单的语法来加载外部脚本（type 属性不是必需的）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"myscript.js"</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="通过-JavaScript-访问-HTML-元素"><a href="#通过-JavaScript-访问-HTML-元素" class="headerlink" title="通过 JavaScript 访问 HTML 元素"></a>通过 JavaScript 访问 HTML 元素</h2><p>使用“不整洁”的 HTML 样式的后果，是可能会导致 JavaScript 错误。<br>这两个 JavaScript 语句会产生不同的结果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;p id=<span class="string">"Demo"</span>&gt;This is paragraph <span class="number">1.</span>&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;p id="demo"&gt;This is paragraph 2.&lt;/</span>p&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// Only parapraph 2 will be overwritten</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = <span class="string">"HELLO."</span>;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p>如果可能，请在 HTML 中使用（与 JavaScript）相同的命名约定。</p><h2 id="使用小写文件名"><a href="#使用小写文件名" class="headerlink" title="使用小写文件名"></a>使用小写文件名</h2><pre><code>大多数 web 服务器（Apache、Unix）对文件名的大小写敏感：不能以 london.jpg 访问 London.jpg。其他 web 服务器（微软，IIS）对大小写不敏感：能够以 london.jpg 或 London.jpg 访问 London.jpg。如果使用混合大小写，那么您必须保持高度的一致性。如果您从对大小写不敏感的服务器转到一台对大小写敏感的服务器上，这些小错误将破坏您的网站。</code></pre><p>为了避免这些问题，请始终使用小写文件名（如果可以的话）。</p><h1 id="文件扩展名"><a href="#文件扩展名" class="headerlink" title="文件扩展名"></a>文件扩展名</h1><pre><code>HTML 文件名应该使用扩展名 .html（而不是 .htm）。CSS 文件应该使用扩展名 .css。JavaScript 文件应该使用扩展名 .js。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200527000221860.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70&quot; alt=&quot;HTML基础_10&quot;&gt;&lt;br&gt;本篇文章主要介绍了HTML书写规范及其小部分标签。&lt;/p&gt;
&lt;h1 id=&quot;HTML5-语义元素&quot;&gt;&lt;a href=&quot;#HTML5-语义元素&quot; class=&quot;headerlink&quot; title=&quot;HTML5 语义元素&quot;&gt;&lt;/a&gt;HTML5 语义元素&lt;/h1&gt;&lt;h2 id=&quot;什么是语义元素？&quot;&gt;&lt;a href=&quot;#什么是语义元素？&quot; class=&quot;headerlink&quot; title=&quot;什么是语义元素？&quot;&gt;&lt;/a&gt;什么是语义元素？&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;语义元素清楚地向浏览器和开发者描述其意义。
非语义元素的例子：&amp;lt;div&amp;gt; 和 &amp;lt;span&amp;gt; - 无法提供关于其内容的信息。
语义元素的例子：&amp;lt;form&amp;gt;、&amp;lt;table&amp;gt; 以及 &amp;lt;img&amp;gt; - 清晰地定义其内容&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;所有现代浏览器均支持 HTML5 语义元素。&lt;br&gt;此外，您可以“帮助”老式浏览器处理“未知元素”。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>HTML基础_9</title>
    <link href="https://oldaz.github.io/2020/05/26/HTML%E5%9F%BA%E7%A1%80_9/"/>
    <id>https://oldaz.github.io/2020/05/26/HTML%E5%9F%BA%E7%A1%80_9/</id>
    <published>2020-05-26T15:26:27.000Z</published>
    <updated>2020-05-26T15:36:26.708Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200526232306469.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="HTML基础_9"><br>本篇幅主要介绍HTML的部分元素，输入类型以及图像等等</p><a id="more"></a><h1 id="HTML5-简介"><a href="#HTML5-简介" class="headerlink" title="HTML5 简介"></a>HTML5 简介</h1><h2 id="什么是-HTML5？"><a href="#什么是-HTML5？" class="headerlink" title="什么是 HTML5？"></a>什么是 HTML5？</h2><pre><code>HTML5 是最新的 HTML 标准。HTML5 是专门为承载丰富的 web 内容而设计的，并且无需额外插件。HTML5 拥有新的语义、图形以及多媒体元素。HTML5 提供的新元素和新的 API 简化了 web 应用程序的搭建。HTML5 是跨平台的，被设计为在不同类型的硬件             （PC、平板、手机、电视机等等）之上运行。HTML5 中默认的字符编码是 UTF-8。</code></pre><h2 id="HTML5-新的属性语法"><a href="#HTML5-新的属性语法" class="headerlink" title="HTML5 - 新的属性语法"></a>HTML5 - 新的属性语法</h2><pre><code>HTML5 标准允许 4 中不同的属性语法。</code></pre><h3 id="HTML5-新特性"><a href="#HTML5-新特性" class="headerlink" title="HTML5 - 新特性"></a>HTML5 - 新特性</h3><p>HTML5 的一些最有趣的新特性：</p><pre><code>新的语义元素，比如 &lt;header&gt;, &lt;footer&gt;, &lt;article&gt;, and &lt;section&gt;。新的表单控件，比如数字、日期、时间、日历和滑块。强大的图像支持（借由 &lt;canvas&gt; 和 &lt;svg&gt;）强大的多媒体支持（借由 &lt;video&gt; 和 &lt;audio&gt;）强大的新 API，比如用本地存储取代 cookie。</code></pre><h3 id="HTML5-被删元素"><a href="#HTML5-被删元素" class="headerlink" title="HTML5 - 被删元素"></a>HTML5 - 被删元素</h3><p>以下 HTML 4.01 元素已从 HTML5 中删除：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;acronym&gt;</span><br><span class="line">&lt;applet&gt;</span><br><span class="line">&lt;basefont&gt;</span><br><span class="line">&lt;big&gt;</span><br><span class="line">&lt;center&gt;</span><br><span class="line">&lt;dir&gt;</span><br><span class="line">&lt;font&gt;</span><br><span class="line">&lt;frame&gt;</span><br><span class="line">&lt;frameset&gt;</span><br><span class="line">&lt;noframes&gt;</span><br><span class="line">&lt;strike&gt;</span><br><span class="line">&lt;tt&gt;</span><br></pre></td></tr></table></figure><pre><code>把 HTML5 元素定义为块级元素HTML5 定义了八个新的语义 HTML 元素。所有都是块级元素。您可以把 CSS display 属性设置为 block，以确保老式浏览器中正确的行为：</code></pre><p>   实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">header, section, footer, aside, nav, main, article, figure &#123;</span><br><span class="line">    display: block; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="向-HTML-添加新元素"><a href="#向-HTML-添加新元素" class="headerlink" title="向 HTML 添加新元素"></a>向 HTML 添加新元素</h2><p>您可以通过浏览器 trick 向 HTML 添加任何新元素：<br>本例向 HTML 添加了一个名为 <myHero> 的新元素，并为其定义 display 样式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">   &lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;title&gt;Styling the article element&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script&gt;document.createElement("myHero")&lt;/</span>script&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">      myHero &#123;</span><br><span class="line">        display:block;</span><br><span class="line">        background-color:#ddd;</span><br><span class="line">        padding: <span class="number">50</span>px;</span><br><span class="line">        font-size: <span class="number">30</span>px;</span><br><span class="line">      &#125;  </span><br><span class="line">  &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;My First Heading&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;p&gt;My first paragraph.&lt;/</span>p&gt;</span><br><span class="line"></span><br><span class="line">&lt;myHero&gt;My First Hero&lt;<span class="regexp">/myHero&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><pre><code>已添加的 JavaScript 语句 document.createElement(&quot;myHero&quot;)，仅适用于 IE。Internet Explorer 的问题</code></pre><p>   上述方案可用于所有新的 HTML5 元素，但是：<br>  注意：Internet Explorer 8 以及更早的版本，不允许对未知元素添加样式。<br>    幸运的是，Sjoerd Visscher 创造了 “HTML5 Enabling JavaScript”, “the shiv”：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--[<span class="keyword">if</span> lt IE <span class="number">9</span>]&gt;</span><br><span class="line">     &lt;script src=<span class="string">"http://html5shiv.googlecode.com/svn/trunk/html5.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">   &lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><p>   以上代码是一段注释，但是 IE9 的早期版本会读取它（并理解它）。<br>    完整的 Shiv 解决方案<br>    实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">   &lt;html&gt;</span><br><span class="line">   </span><br><span class="line">   &lt;head&gt;</span><br><span class="line">     &lt;title&gt;Styling HTML5&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">     &lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="regexp">     &lt;script src="http:/</span><span class="regexp">/html5shiv.googlecode.com/</span>svn/trunk/html5.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">     &lt;![endif]--&gt;</span></span><br><span class="line"><span class="string">   &lt;/head&gt;</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">   &lt;body&gt;</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">   &lt;h1&gt;My First Article&lt;/h1&gt;</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">   &lt;article&gt;</span></span><br><span class="line"><span class="string">   London is the capital city of England. </span></span><br><span class="line"><span class="string">   It is the most populous city in the United Kingdom, </span></span><br><span class="line"><span class="string">   with a metropolitan area of over 13 million inhabitants.</span></span><br><span class="line"><span class="string">   &lt;/article&gt;</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">   &lt;/body&gt;</span></span><br><span class="line"><span class="string">   &lt;/html&gt;</span></span><br></pre></td></tr></table></figure><p>   引用 shiv 代码的链接必须位于 <head> 元素中，因为 Internet Explorer 需要在读取之前认识所有新元素。</p><h1 id="HTML5-Skeleton"><a href="#HTML5-Skeleton" class="headerlink" title="HTML5 Skeleton"></a>HTML5 Skeleton</h1><pre><code>Skeleton是一个轻量级的CSS栅格系统。里面用了400行代码就把排版布局、按钮、表单和表格的装饰都定义好了。用Skeleton布局，在理解上其实和用&lt;table&gt;布局差不多。都是把网站的排版变得比较整齐。不过Skeleton很灵活。</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">   &lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">   &lt;head&gt;</span><br><span class="line">   &lt;title&gt;HTML5 Skeleton&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">   &lt;meta charset="utf-8"&gt;</span></span><br><span class="line"><span class="regexp">   </span></span><br><span class="line"><span class="regexp">   &lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="regexp">   &lt;script src="http:/</span><span class="regexp">/html5shiv.googlecode.com/</span>svn/trunk/html5.js<span class="string">"&gt;</span></span><br><span class="line"><span class="string">   &lt;/script&gt;</span></span><br><span class="line"><span class="string">   &lt;![endif]--&gt;</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">   &lt;style&gt;</span></span><br><span class="line"><span class="string">   body &#123;font-family: Verdana, sans-serif; font-size:0.8em;&#125;</span></span><br><span class="line"><span class="string">   header,nav, section,article,footer</span></span><br><span class="line"><span class="string">   &#123;border:1px solid grey; margin:5px; padding:8px;&#125;</span></span><br><span class="line"><span class="string">   nav ul &#123;margin:0; padding:0;&#125;</span></span><br><span class="line"><span class="string">   nav ul li &#123;display:inline; margin:5px;&#125;</span></span><br><span class="line"><span class="string">   &lt;/style&gt;</span></span><br><span class="line"><span class="string">   &lt;/head&gt;</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">   &lt;body&gt;</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">   &lt;header&gt;</span></span><br><span class="line"><span class="string">     &lt;h1&gt;HTML5 SKeleton&lt;/h1&gt;</span></span><br><span class="line"><span class="string">   &lt;/header&gt;</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">   &lt;nav&gt;</span></span><br><span class="line"><span class="string">   &lt;ul&gt;</span></span><br><span class="line"><span class="string">     &lt;li&gt;&lt;a href="</span>html5_semantic_elements.asp<span class="string">"&gt;HTML5 Semantic&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">     &lt;li&gt;&lt;a href="</span>html5_geolocation.asp<span class="string">"&gt;HTML5 Geolocation&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">     &lt;li&gt;&lt;a href="</span>html5_canvas.asp<span class="string">"&gt;HTML5 Graphics&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">   &lt;/ul&gt;</span></span><br><span class="line"><span class="string">   &lt;/nav&gt;</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">   &lt;section&gt;</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">   &lt;h1&gt;Famous Cities&lt;/h1&gt;</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">   &lt;article&gt;</span></span><br><span class="line"><span class="string">   &lt;h2&gt;London&lt;/h2&gt;</span></span><br><span class="line"><span class="string">   &lt;p&gt;London is the capital city of England. It is the most populous city in the United Kingdom,</span></span><br><span class="line"><span class="string">   with a metropolitan area of over 13 million inhabitants.&lt;/p&gt;</span></span><br><span class="line"><span class="string">   &lt;/article&gt;</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">   &lt;article&gt;</span></span><br><span class="line"><span class="string">   &lt;h2&gt;Paris&lt;/h2&gt;</span></span><br><span class="line"><span class="string">   &lt;p&gt;Paris is the capital and most populous city of France.&lt;/p&gt;</span></span><br><span class="line"><span class="string">   &lt;/article&gt;</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">   &lt;article&gt;</span></span><br><span class="line"><span class="string">   &lt;h2&gt;Tokyo&lt;/h2&gt;</span></span><br><span class="line"><span class="string">   &lt;p&gt;Tokyo is the capital of Japan, the center of the Greater Tokyo Area,</span></span><br><span class="line"><span class="string">   and the most populous metropolitan area in the world.&lt;/p&gt;</span></span><br><span class="line"><span class="string">   &lt;/article&gt;</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">   &lt;/section&gt;</span></span><br><span class="line"><span class="string">   &lt;/body&gt;</span></span><br><span class="line"><span class="string">   &lt;/html&gt;</span></span><br></pre></td></tr></table></figure><h1 id="HTML5-中的新元素"><a href="#HTML5-中的新元素" class="headerlink" title="HTML5 中的新元素"></a>HTML5 中的新元素</h1><pre><code>下面列出的 HTML5 的新元素，以及对它们的描述。</code></pre><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td>&#60;article&gt;</td><td>定义文档内的文章。</td></tr><tr><td>&#60;aside&gt;</td><td>定义页面内容之外的内容。</td></tr><tr><td>&#60;bdi&gt;</td><td>定义与其他文本不同的文本方向。</td></tr><tr><td>&#60;details&gt;</td><td>定义用户可查看或隐藏的额外细节。</td></tr><tr><td>&#60;dialog&gt;</td><td>定义对话框或窗口。</td></tr><tr><td>&#60;figcaption&gt;</td><td>定义 <figure> 元素的标题。</td></tr><tr><td>&#60;figure&gt;</td><td>定义自包含内容，比如图示、图表、照片、代码清单等等。</td></tr><tr><td>&#60;footer&gt;</td><td>定义文档或节的页脚。</td></tr><tr><td>&#60;header&gt;</td><td>定义文档或节的页眉。</td></tr><tr><td>&#60;main&gt;</td><td>定义文档的主内容。</td></tr><tr><td>&#60;mark&gt;</td><td>定义重要或强调的内容。</td></tr><tr><td>&#60;menuitem&gt;</td><td>定义用户能够从弹出菜单调用的命令/菜单项目。</td></tr><tr><td>&#60;meter&gt;</td><td>定义已知范围（尺度）内的标量测量。</td></tr><tr><td>&#60;nav&gt;</td><td>定义文档内的导航链接。</td></tr><tr><td>&#60;progress&gt;</td><td>定义任务进度。</td></tr><tr><td>&#60;rp&gt;</td><td>定义在不支持 ruby 注释的浏览器中显示什么。</td></tr><tr><td>&#60;rt&gt;</td><td>定义关于字符的解释/发音（用于东亚字体）。</td></tr><tr><td>&#60;ruby&gt;</td><td>定义 ruby 注释（用于东亚字体）。</td></tr><tr><td>&#60;section&gt;</td><td>定义文档中的节。</td></tr><tr><td>&#60;summary&gt;</td><td>定义 <details> 元素的可见标题。</td></tr><tr><td>&#60;time&gt;</td><td>定义日期/时间。</td></tr><tr><td>&#60;wbr&gt;</td><td>定义可能的折行（line-break）。</td></tr></tbody></table><pre><code>新的表单元素标签    描述&lt;datalist&gt;    定义输入控件的预定义选项。&lt;keygen&gt;    定义键对生成器字段（用于表单）。&lt;output&gt;    定义计算结果。</code></pre><h1 id="新的输入类型"><a href="#新的输入类型" class="headerlink" title="新的输入类型"></a>新的输入类型</h1><p>   新的输入类型    新的输入属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">color</span><br><span class="line"> date</span><br><span class="line"> datetime</span><br><span class="line"> datetime-local</span><br><span class="line"> email</span><br><span class="line"> month</span><br><span class="line"> number</span><br><span class="line"> range</span><br><span class="line"> search</span><br><span class="line"> tel</span><br><span class="line"> time</span><br><span class="line"> url</span><br><span class="line"> week</span><br><span class="line"> autocomplete</span><br><span class="line"> autofocus</span><br><span class="line"> form</span><br><span class="line"> formaction</span><br><span class="line"> formenctype</span><br><span class="line"> formmethod</span><br><span class="line"> formnovalidate</span><br><span class="line"> formtarget</span><br><span class="line"> height 和 width</span><br><span class="line"> list</span><br><span class="line"> min 和 max</span><br><span class="line"> multiple</span><br><span class="line"> pattern (regexp)</span><br><span class="line"> placeholder</span><br><span class="line"> required</span><br><span class="line"> step</span><br></pre></td></tr></table></figure><h1 id="HTML5-新的属性语法-1"><a href="#HTML5-新的属性语法-1" class="headerlink" title="HTML5 - 新的属性语法"></a>HTML5 - 新的属性语法</h1><pre><code>HTML5 允许四种不同的属性语法。</code></pre><p>该例演示 &#60;input&gt; 标签中使用的不同语法：</p><p>标签    描述</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Empty&lt;input type=<span class="string">"text"</span> value=<span class="string">"John Doe"</span> disabled&gt;</span><br><span class="line">Unquoted&lt;input type=<span class="string">"text"</span> value=John&gt;</span><br><span class="line">Double-quoted&lt;input type=<span class="string">"text"</span> value=<span class="string">"John Doe"</span>&gt;</span><br><span class="line">Single-quoted&lt;input type=<span class="string">"text"</span> value=<span class="string">'John Doe'</span>&gt;</span><br></pre></td></tr></table></figure><p>在 HTML5 中，根据属性所需，可能会使用所有这四种语法。</p><h1 id="HTML5-图像"><a href="#HTML5-图像" class="headerlink" title="HTML5 图像"></a>HTML5 图像</h1><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td>&#60;canvas&gt;</td><td>定义使用 JavaScript 的图像绘制。</td></tr><tr><td>&#60;svg&gt;</td><td>定义使用 SVG 的图像绘制。</td></tr></tbody></table><h1 id="新的媒介元素"><a href="#新的媒介元素" class="headerlink" title="新的媒介元素"></a>新的媒介元素</h1><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td>&#60;audio&gt;</td><td>定义声音或音乐内容。</td></tr><tr><td>&#60;embed&gt;</td><td>定义外部应用程序的容器（比如插件）。</td></tr><tr><td>&#60;source&gt;</td><td>定义 &#60;video&gt; 和 &#60;audio&gt; 的来源。</td></tr><tr><td>&#60;track&gt;</td><td>定义 &#60;video&gt; 和 &#60;audio&gt; 的轨道。</td></tr><tr><td>&#60;video&gt;</td><td>定义视频或影片内容。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200526232306469.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70&quot; alt=&quot;HTML基础_9&quot;&gt;&lt;br&gt;本篇幅主要介绍HTML的部分元素，输入类型以及图像等等&lt;/p&gt;
    
    </summary>
    
    
      <category term="HTML" scheme="https://oldaz.github.io/categories/HTML/"/>
    
    
      <category term="HTML" scheme="https://oldaz.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>HTML基础_8</title>
    <link href="https://oldaz.github.io/2020/05/26/HTML%E5%9F%BA%E7%A1%80_8/"/>
    <id>https://oldaz.github.io/2020/05/26/HTML%E5%9F%BA%E7%A1%80_8/</id>
    <published>2020-05-26T07:26:59.000Z</published>
    <updated>2020-05-26T07:27:57.777Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200526152519610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="HTML基础_8"><br>本篇幅主要介绍了几个Iuput和HTML的几个标签属性</p><a id="more"></a><h1 id="HTML-Input-属性"><a href="#HTML-Input-属性" class="headerlink" title="HTML Input 属性"></a>HTML Input 属性</h1></h1><h2 id="value-属性"><a href="#value-属性" class="headerlink" title="value 属性"></a>value 属性</h2></h2><pre><code>value 属性规定输入字段的初始值：</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">""</span>&gt;</span><br><span class="line"> First name:<span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line">&lt;input type="text" name="firstname" value="John"&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line"> Last name:&lt;br&gt;</span><br><span class="line">&lt;input type="text" name="lastname"&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h2 id="readonly-属性"><a href="#readonly-属性" class="headerlink" title="readonly 属性"></a>readonly 属性</h2><pre><code>readonly 属性规定输入字段为只读（不能修改）：</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">""</span>&gt;</span><br><span class="line"> First name:<span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line">&lt;input type="text" name="firstname" value="John" readonly&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line"> Last name:&lt;br&gt;</span><br><span class="line">&lt;input type="text" name="lastname"&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>readonly 属性不需要值。它等同于 readonly=”readonly”。</p><h2 id="disabled-属性"><a href="#disabled-属性" class="headerlink" title="disabled 属性"></a>disabled 属性</h2><pre><code>disabled 属性规定输入字段是禁用的。被禁用的元素是不可用和不可点击的。被禁用的元素不会被提交。</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">""</span>&gt;</span><br><span class="line"> First name:<span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line">&lt;input type="text" name="firstname" value="John" disabled&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line"> Last name:&lt;br&gt;</span><br><span class="line">&lt;input type="text" name="lastname"&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>disabled 属性不需要值。它等同于 disabled=”disabled”</p><h2 id="size-属性"><a href="#size-属性" class="headerlink" title="size 属性"></a>size 属性</h2><pre><code>size 属性规定输入字段的尺寸（以字符计）：</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">""</span>&gt;</span><br><span class="line"> First name:<span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line">&lt;input type="text" name="firstname" value="John" size="40"&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line"> Last name:&lt;br&gt;</span><br><span class="line">&lt;input type="text" name="lastname"&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h2 id="maxlength-属性"><a href="#maxlength-属性" class="headerlink" title="maxlength 属性"></a>maxlength 属性</h2><pre><code>maxlength 属性规定输入字段允许的最大长度：</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">""</span>&gt;</span><br><span class="line"> First name:<span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line">&lt;input type="text" name="firstname" maxlength="10"&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line"> Last name:&lt;br&gt;</span><br><span class="line">&lt;input type="text" name="lastname"&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><pre><code>如设置 maxlength 属性，则输入控件不会接受超过所允许数的字符。该属性不会提供任何反馈。如果需要提醒用户，则必须编写 JavaScript 代码。</code></pre><p>注释：输入限制并非万无一失。JavaScript 提供了很多方法来增加非法输入。如需安全地限制输入，则接受者（服务器）必须同时对限制进行检查。</p><h1 id="HTML5-属性"><a href="#HTML5-属性" class="headerlink" title="HTML5 属性"></a>HTML5 属性</h1><pre><code>HTML5 为 &lt;input&gt; 增加了如下属性：</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">autocomplete</span><br><span class="line">autofocus</span><br><span class="line">form</span><br><span class="line">formaction</span><br><span class="line">formenctype</span><br><span class="line">formmethod</span><br><span class="line">formnovalidate</span><br><span class="line">formtarget</span><br><span class="line">height 和 width</span><br><span class="line">list</span><br><span class="line">min 和 max</span><br><span class="line">multiple</span><br><span class="line">pattern (regexp)</span><br><span class="line">placeholder</span><br><span class="line">required</span><br><span class="line">step</span><br></pre></td></tr></table></figure><pre><code>并为 &lt;form&gt; 增加如需属性：</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">autocomplete</span><br><span class="line">novalidate</span><br></pre></td></tr></table></figure><h2 id="autocomplete-属性"><a href="#autocomplete-属性" class="headerlink" title="autocomplete 属性"></a>autocomplete 属性</h2><pre><code>autocomplete 属性规定表单或输入字段是否应该自动完成。当自动完成开启，浏览器会基于用户之前的输入值自动填写值。</code></pre><p>提示：您可以把表单的 autocomplete 设置为 on，同时把特定的输入字段设置为 off，反之亦然。</p><pre><code>autocomplete 属性适用于 &lt;form&gt; 以及如下 &lt;input&gt; 类型：text、search、url、tel、email、password、datepickers、range 以及 color。</code></pre><p>实例<br>自动完成开启的 HTML 表单（某个输入字段为 off）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"action_page.php"</span> autocomplete=<span class="string">"on"</span>&gt;</span><br><span class="line">   First name:&lt;input type="text" name="fname"&gt;&lt;br&gt;</span><br><span class="line">   Last name: &lt;input type="text" name="lname"&gt;&lt;br&gt;</span><br><span class="line">   E-mail: &lt;input type="email" name="email" autocomplete="off"&gt;&lt;br&gt;</span><br><span class="line">   &lt;input type="submit"&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h2 id="novalidate-属性"><a href="#novalidate-属性" class="headerlink" title="novalidate 属性"></a>novalidate 属性</h2><pre><code>novalidate 属性属于 &lt;form&gt; 属性。如果设置，则 novalidate 规定在提交表单时不对表单数据进行验证。</code></pre><p>实例<br>指示表单在被提交时<strong>不进行验证</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"action_page.php"</span> novalidate&gt;</span><br><span class="line">   E-mail: <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"user_email"</span>&gt;</span></span></span><br><span class="line">   &lt;input type="submit"&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="autofocus-属性"><a href="#autofocus-属性" class="headerlink" title="autofocus 属性"></a>autofocus 属性</h2><pre><code>autofocus 属性是布尔属性。如果设置，则规定当页面加载时 &lt;input&gt; 元素应该自动获得焦点。</code></pre><p>实例<br>使 “First name” 输入字段在页面加载时自动获得焦点：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">First name:<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"fname"</span> <span class="attr">autofocus</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="form-属性"><a href="#form-属性" class="headerlink" title="form 属性"></a>form 属性</h2><pre><code>form 属性规定 &lt;input&gt; 元素所属的一个或多个表单。提示：如需引用一个以上的表单，请使用空格分隔的表单 id 列表。</code></pre><p>实例<br>输入字段位于 HTML 表单之外（但仍属表单）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"action_page.php"</span> id=<span class="string">"form1"</span>&gt;</span><br><span class="line">   First name: &lt;input type="text" name="fname"&gt;&lt;br&gt;</span><br><span class="line">   &lt;input type="submit" value="Submit"&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"> Last name: &lt;input type="text" name="lname" form="form1"&gt;</span><br></pre></td></tr></table></figure><h2 id="formaction-属性"><a href="#formaction-属性" class="headerlink" title="formaction 属性"></a>formaction 属性</h2><pre><code>formaction 属性规定当提交表单时处理该输入控件的文件的 URL。formaction 属性覆盖 &lt;form&gt; 元素的 action 属性。formaction 属性适用于 type=&quot;submit&quot; 以及 type=&quot;image&quot;。</code></pre><p>实例<br>拥有两个两个提交按钮并对于不同动作的 HTML 表单：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"action_page.php"</span>&gt;</span><br><span class="line">   First name: &lt;input type="text" name="fname"&gt;&lt;br&gt;</span><br><span class="line">   Last name: &lt;input type="text" name="lname"&gt;&lt;br&gt;</span><br><span class="line">   &lt;input type="submit" value="Submit"&gt;&lt;br&gt;</span><br><span class="line">   &lt;input type="submit" formaction="demo_admin.asp"</span><br><span class="line">   value="Submit as admin"&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h2 id="formenctype-属性"><a href="#formenctype-属性" class="headerlink" title="formenctype 属性"></a>formenctype 属性</h2><pre><code>formenctype 属性规定当把表单数据（form-data）提交至服务器时如何对其进行编码（仅针对 method=&quot;post&quot; 的表单）。formenctype 属性覆盖 &lt;form&gt; 元素的 enctype 属性。formenctype 属性适用于 type=&quot;submit&quot; 以及 type=&quot;image&quot;。</code></pre><p>实例<br>发送默认编码以及编码为 “multipart/form-data”（第二个提交按钮）的表单数据（form-data）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"demo_post_enctype.asp"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">   First name: &lt;input type="text" name="fname"&gt;&lt;br&gt;</span><br><span class="line">   &lt;input type="submit" value="Submit"&gt;</span><br><span class="line">   &lt;input type="submit" formenctype="multipart/form-data"</span><br><span class="line">   value="Submit as Multipart/form-data"&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h2 id="formmethod-属性"><a href="#formmethod-属性" class="headerlink" title="formmethod 属性"></a>formmethod 属性</h2><pre><code>formmethod 属性定义用以向 action URL 发送表单数据（form-data）的 HTTP 方法。formmethod 属性覆盖 &lt;form&gt; 元素的 method 属性。formmethod 属性适用于 type=&quot;submit&quot; 以及 type=&quot;image&quot;。</code></pre><p>实例<br>第二个提交按钮覆盖表单的 HTTP 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"action_page.php"</span> method=<span class="string">"get"</span>&gt;</span><br><span class="line">   First name: &lt;input type="text" name="fname"&gt;&lt;br&gt;</span><br><span class="line">   Last name: &lt;input type="text" name="lname"&gt;&lt;br&gt;</span><br><span class="line">   &lt;input type="submit" value="Submit"&gt;</span><br><span class="line">   &lt;input type="submit" formmethod="post" formaction="demo_post.asp"</span><br><span class="line">   value="Submit using POST"&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h2 id="formnovalidate-属性"><a href="#formnovalidate-属性" class="headerlink" title="formnovalidate 属性"></a>formnovalidate 属性</h2><pre><code>novalidate 属性是布尔属性。如果设置，则规定在提交表单时不对 &lt;input&gt; 元素进行验证。formnovalidate 属性覆盖 &lt;form&gt; 元素的 novalidate 属性。formnovalidate 属性可用于 type=&quot;submit&quot;。</code></pre><p>实例<br>拥有两个提交按钮的表单（验证和不验证）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"action_page.php"</span>&gt;</span><br><span class="line">   E-mail: &lt;input type="email" name="userid"&gt;&lt;br&gt;</span><br><span class="line">   &lt;input type="submit" value="Submit"&gt;&lt;br&gt;</span><br><span class="line">   &lt;input type="submit"   formnovalidate    value="Submit without validation"&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h2 id="formtarget-属性"><a href="#formtarget-属性" class="headerlink" title="formtarget 属性"></a>formtarget 属性</h2><pre><code>formtarget 属性规定的名称或关键词指示提交表单后在何处显示接收到的响应。formtarget 属性会覆盖 &lt;form&gt; 元素的 target 属性。formtarget 属性可与 type=&quot;submit&quot; 和 type=&quot;image&quot; 使用。</code></pre><p>实例<br>这个表单有两个提交按钮，对应不同的目标窗口：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"action_page.php"</span>&gt;</span><br><span class="line">   First name: &lt;input type="text" name="fname"&gt;&lt;br&gt;</span><br><span class="line">   Last name: &lt;input type="text" name="lname"&gt;&lt;br&gt;</span><br><span class="line">   &lt;input type="submit" value="Submit as normal"&gt;</span><br><span class="line">   &lt;input type="submit"    formtarget="_blank"</span><br><span class="line">   value="Submit to a new window"&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h2 id="height-和-width-属性"><a href="#height-和-width-属性" class="headerlink" title="height 和 width 属性"></a>height 和 width 属性</h2><pre><code>height 和 width 属性规定 &lt;input&gt; 元素的高度和宽度。height 和 width 属性仅用于 &lt;input type=&quot;image&quot;&gt;。</code></pre><p>注释：请始终规定图像的尺寸。如果浏览器不清楚图像尺寸，则页面会在图像加载时闪烁。</p><p>实例<br>把图像定义为提交按钮，并设置 height 和 width 属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"image"</span> src=<span class="string">"img_submit.gif"</span> alt=<span class="string">"Submit"</span> width=<span class="string">"48"</span> height=<span class="string">"48"</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="list-属性"><a href="#list-属性" class="headerlink" title="list 属性"></a>list 属性</h2><pre><code>list 属性引用的 &lt;datalist&gt; 元素中包含了 &lt;input&gt; 元素的预定义选项。</code></pre><p>实例<br>使用 <datalist> 设置预定义值的 <input> 元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;input list=<span class="string">"browsers"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;datalist id=<span class="string">"browsers"</span>&gt;</span><br><span class="line">   &lt;option value=<span class="string">"Internet Explorer"</span>&gt;</span><br><span class="line">   &lt;option value=<span class="string">"Firefox"</span>&gt;</span><br><span class="line">   &lt;option value=<span class="string">"Chrome"</span>&gt;</span><br><span class="line">   &lt;option value=<span class="string">"Opera"</span>&gt;</span><br><span class="line">   &lt;option value=<span class="string">"Safari"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/datalist&gt;</span></span><br></pre></td></tr></table></figure><h2 id="min-和-max-属性"><a href="#min-和-max-属性" class="headerlink" title="min 和 max 属性"></a>min 和 max 属性</h2><pre><code>min 和 max 属性规定 &lt;input&gt; 元素的最小值和最大值。min 和 max 属性适用于如需输入类型：number、range、date、      datetime、datetime-local、month、time 以及 week。</code></pre><p>实例<br>具有最小和最大值的 <input> 元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Enter a date before <span class="number">1980</span><span class="number">-01</span><span class="number">-01</span>:</span><br><span class="line">&lt;input type=<span class="string">"date"</span> name=<span class="string">"bday"</span> max=<span class="string">"1979-12-31"</span>&gt;</span><br><span class="line"></span><br><span class="line"> Enter a date after <span class="number">2000</span><span class="number">-01</span><span class="number">-01</span>:</span><br><span class="line">&lt;input type=<span class="string">"date"</span> name=<span class="string">"bday"</span> min=<span class="string">"2000-01-02"</span>&gt;</span><br><span class="line"></span><br><span class="line"> Quantity (between <span class="number">1</span> and <span class="number">5</span>):</span><br><span class="line">&lt;input type=<span class="string">"number"</span> name=<span class="string">"quantity"</span> min=<span class="string">"1"</span> max=<span class="string">"5"</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="multiple-属性-文件"><a href="#multiple-属性-文件" class="headerlink" title="multiple 属性:文件"></a>multiple 属性:文件</h2><pre><code>multiple 属性是布尔属性。如果设置，则规定允许用户在 &lt;input&gt; 元素中输入一个以上的值。multiple 属性适用于以下输入类型：email 和 file。</code></pre><p>实例<br>接受多个值的文件上传字段：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Select images: <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"img"</span> <span class="attr">multiple</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="pattern-属性"><a href="#pattern-属性" class="headerlink" title="pattern 属性"></a>pattern 属性</h2><pre><code>pattern 属性规定用于检查 &lt;input&gt; 元素值的正则表达式。pattern 属性适用于以下输入类型：text、search、url、tel、email、and password。</code></pre><p>提示：请使用全局的 title 属性对模式进行描述以帮助用户。<br>提示：请在我们的 JavaScript 教程中学习更多有关正则表达式的知识。</p><p>只能包含三个字母的输入字段（无数字或特殊字符）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Country code: </span><br><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">"country_code"</span> pattern=<span class="string">"[A-Za-z]&#123;3&#125;"</span> title=<span class="string">"Three letter country code"</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="placeholder-属性"><a href="#placeholder-属性" class="headerlink" title="placeholder 属性"></a>placeholder 属性</h2><pre><code>placeholder 属性规定用以描述输入字段预期值的提示（样本值或有关格式的简短描述）。该提示会在用户输入值之前显示在输入字段中。placeholder 属性适用于以下输入类型：text、search、url、tel、email 以及 password。</code></pre><p>实例<br>拥有占位符文本的输入字段：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">"fname"</span> placeholder=<span class="string">"First name"</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="required-属性"><a href="#required-属性" class="headerlink" title="required 属性"></a>required 属性</h2><pre><code>required 属性是布尔属性。如果设置，则规定在提交表单之前必须填写输入字段。required 属性适用于以下输入类型：text、search、url、tel、email、password、                     date pickers、number、checkbox、radio、and file.</code></pre><p>必填的输入字段：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Username: <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"usrname"</span> <span class="attr">required</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="step-属性"><a href="#step-属性" class="headerlink" title="step 属性"></a>step 属性</h2><pre><code>step 属性规定 &lt;input&gt; 元素的合法数字间隔。示例：如果 step=&quot;3&quot;，则合法数字应该是 -3、0、3、6、等等。</code></pre><p>提示：step 属性可与 max 以及 min 属性一同使用，来创建合法值的范围。</p><pre><code>step 属性适用于以下输入类型：number、range、date、datetime、datetime-local、month、time 以及 week。</code></pre><p>示例<br>拥有具体的合法数字间隔的输入字段：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"number"</span> name=<span class="string">"points"</span> step=<span class="string">"3"</span>&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200526152519610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70&quot; alt=&quot;HTML基础_8&quot;&gt;&lt;br&gt;本篇幅主要介绍了几个Iuput和HTML的几个标签属性&lt;/p&gt;
    
    </summary>
    
    
      <category term="HTML" scheme="https://oldaz.github.io/categories/HTML/"/>
    
    
      <category term="HTML" scheme="https://oldaz.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>HTML基础_7</title>
    <link href="https://oldaz.github.io/2020/05/25/HTML%E5%9F%BA%E7%A1%80_7/"/>
    <id>https://oldaz.github.io/2020/05/25/HTML%E5%9F%BA%E7%A1%80_7/</id>
    <published>2020-05-25T15:31:43.000Z</published>
    <updated>2020-05-25T15:41:43.979Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200525232958918.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="HTML基础_7"><br>本篇幅主要介绍表单的部分元素以及输入类型。<br>  <a id="more"></a></p><h1 id="HTML-表单元素"><a href="#HTML-表单元素" class="headerlink" title="HTML 表单元素"></a>HTML 表单元素</h1><h2 id="60-select-gt-元素（下拉列表）"><a href="#60-select-gt-元素（下拉列表）" class="headerlink" title="&#60;select&gt; 元素（下拉列表）"></a>&#60;select&gt; 元素（下拉列表）</h2><pre><code>&lt;select&gt; 元素定义下拉列表：</code></pre><p>  实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;select name=<span class="string">"cars"</span>&gt;</span><br><span class="line">  &lt;option value=<span class="string">"volvo"</span>&gt;Volvo&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">  &lt;option value="saab"&gt;Saab&lt;/</span>option&gt;</span><br><span class="line">  &lt;option value=<span class="string">"fiat"</span>&gt;Fiat&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">  &lt;option value="audi"&gt;Audi&lt;/</span>option&gt;</span><br><span class="line">  &lt;<span class="regexp">/select&gt;</span></span><br></pre></td></tr></table></figure><h2 id="60-option-gt-元素定义待选择的选项。"><a href="#60-option-gt-元素定义待选择的选项。" class="headerlink" title="&#60;option&gt; 元素定义待选择的选项。"></a>&#60;option&gt; 元素定义待选择的选项。</h2><pre><code>列表通常会把首个选项显示为被选选项。您能够通过添加 selected 属性来定义预定义选项。实例&lt;option value=&quot;fiat&quot; selected&gt;Fiat&lt;/option&gt;</code></pre><h2 id="60-textarea-gt-元素"><a href="#60-textarea-gt-元素" class="headerlink" title="&#60;textarea&gt; 元素"></a>&#60;textarea&gt; 元素</h2><pre><code>&lt;textarea&gt; 元素定义多行输入字段（文本域）：</code></pre><p>   实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea name=<span class="string">"message"</span> rows=<span class="string">"10"</span> cols=<span class="string">"30"</span>&gt;</span><br><span class="line">The cat was playing <span class="keyword">in</span> the garden.</span><br><span class="line">&lt;<span class="regexp">/textarea&gt;</span></span><br></pre></td></tr></table></figure><h2 id="60-button-gt-元素"><a href="#60-button-gt-元素" class="headerlink" title="&#60;button&gt; 元素"></a>&#60;button&gt; 元素</h2><pre><code>&lt;button&gt; 元素定义可点击的按钮：</code></pre><p> 实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button type=<span class="string">"button"</span> onclick=<span class="string">"alert('Hello World!')"</span>&gt;Click Me!&lt;<span class="regexp">/button&gt;</span></span><br></pre></td></tr></table></figure><h1 id="HTML5-表单元素"><a href="#HTML5-表单元素" class="headerlink" title="HTML5 表单元素"></a>HTML5 表单元素</h1><p>HTML5 增加了如下表单元素：</p><pre><code>&lt;datalist&gt;&lt;keygen&gt;&lt;output&gt;</code></pre><p>注释：默认地，浏览器不会显示未知元素。新元素不会破坏您的页面。</p><h2 id="HTML5-元素"><a href="#HTML5-元素" class="headerlink" title="HTML5  元素"></a>HTML5 <datalist> 元素</h2><pre><code>&lt;datalist&gt; 元素为 &lt;input&gt; 元素规定预定义选项列表。用户会在他们输入数据时看到预定义选项的下拉列表。&lt;input&gt; 元素的 list 属性必须引用 &lt;datalist&gt; 元素的 id 属性。</code></pre><p> 实例<br>        通过 <datalist> 设置预定义值的 <input> 元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"action_page.php"</span>&gt;</span><br><span class="line">  &lt;input list=<span class="string">"browsers"</span>&gt;</span><br><span class="line">  &lt;datalist id=<span class="string">"browsers"</span>&gt;</span><br><span class="line">     &lt;option value=<span class="string">"Internet Explorer"</span>&gt;</span><br><span class="line">     &lt;option value=<span class="string">"Firefox"</span>&gt;</span><br><span class="line">     &lt;option value=<span class="string">"Chrome"</span>&gt;</span><br><span class="line">     &lt;option value=<span class="string">"Opera"</span>&gt;</span><br><span class="line">     &lt;option value=<span class="string">"Safari"</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/datalist&gt; </span></span><br><span class="line"><span class="regexp">  &lt;/</span>form&gt;</span><br></pre></td></tr></table></figure><h1 id="HTML-输入类型"><a href="#HTML-输入类型" class="headerlink" title="HTML 输入类型"></a>HTML 输入类型</h1><h2 id="输入类型：text"><a href="#输入类型：text" class="headerlink" title="输入类型：text"></a>输入类型：text</h2><pre><code>&lt;input type=&quot;text&quot;&gt; 定义供文本输入的单行输入字段：</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line"> First name:<span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line">&lt;input type="text" name="firstname"&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line"> Last name:&lt;br&gt;</span><br><span class="line">&lt;input type="text" name="lastname"&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h2 id="输入类型：password"><a href="#输入类型：password" class="headerlink" title="输入类型：password"></a>输入类型：password</h2><pre><code>&lt;input type=&quot;password&quot;&gt; 定义密码字段：</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line"> User name:<span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line">&lt;input type="text" name="username"&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line"> User password:&lt;br&gt;</span><br><span class="line">&lt;input type="password" name="psw"&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>注释：password 字段中的字符会被做掩码处理（显示为星号或实心圆）。</p><h2 id="输入类型：submit"><a href="#输入类型：submit" class="headerlink" title="输入类型：submit"></a>输入类型：submit</h2><pre><code>&lt;input type=&quot;submit&quot;&gt; 定义提交表单数据至表单处理程序的按钮。表单处理程序（form-handler）通常是包含处理输入数据的脚本的服务器页面。在表单的 action 属性中规定表单处理程序（form-handler）：</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"action_page.php"</span>&gt;</span><br><span class="line">First name:<span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line">&lt;input type="text" name="firstname" value="Mickey"&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">Last name:&lt;br&gt;</span><br><span class="line">&lt;input type="text" name="lastname" value="Mouse"&gt;</span><br><span class="line">&lt;br&gt;&lt;br&gt;</span><br><span class="line">&lt;input type="submit" value="Submit"&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>如果您省略了提交按钮的 value 属性，那么该按钮将获得默认文本。</p><h2 id="单选框：-Input-Type-radio"><a href="#单选框：-Input-Type-radio" class="headerlink" title="单选框： Input Type: radio"></a>单选框： Input Type: radio</h2><pre><code>&lt;input type=&quot;radio&quot;&gt; 定义单选按钮。</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">&lt;input type=<span class="string">"radio"</span> name=<span class="string">"sex"</span> value=<span class="string">"male"</span> checked&gt;Male</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;input type=<span class="string">"radio"</span> name=<span class="string">"sex"</span> value=<span class="string">"female"</span>&gt;Female</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure><h2 id="复选框：-Input-Type-checkbox"><a href="#复选框：-Input-Type-checkbox" class="headerlink" title="复选框： Input Type: checkbox"></a>复选框： Input Type: checkbox</h2><pre><code>&lt;input type=&quot;checkbox&quot;&gt; 定义复选框。复选框允许用户在有限数量的选项中选择零个或多个选项。</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"vehicle"</span> value=<span class="string">"Bike"</span>&gt;I have a bike</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"vehicle"</span> value=<span class="string">"Car"</span>&gt;I have a car </span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure><h2 id="定义按钮：-lt-input-type-”button-gt-定义按钮。"><a href="#定义按钮：-lt-input-type-”button-gt-定义按钮。" class="headerlink" title="定义按钮：&lt;input type=”button&gt; 定义按钮。"></a>定义按钮：&lt;input type=”button&gt; 定义按钮。</h2><p> 实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"button"</span> onclick=<span class="string">"alert('Hello World!')"</span> value=<span class="string">"Click Me!"</span>&gt; &lt;<span class="regexp">/h2&gt;</span></span><br></pre></td></tr></table></figure><h1 id="HTML5-输入类型"><a href="#HTML5-输入类型" class="headerlink" title="HTML5 输入类型"></a>HTML5 输入类型</h1></h1><p> HTML5 增加了多个新的输入类型：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">color</span><br><span class="line">date</span><br><span class="line">datetime</span><br><span class="line">datetime-local</span><br><span class="line">email</span><br><span class="line">month</span><br><span class="line">number</span><br><span class="line">range</span><br><span class="line">search</span><br><span class="line">tel</span><br><span class="line">time</span><br><span class="line">url</span><br><span class="line">week</span><br></pre></td></tr></table></figure><pre><code>注释：老式 web 浏览器不支持的输入类型，会被视为输入类型 text。</code></pre><h2 id="输入类型：number"><a href="#输入类型：number" class="headerlink" title="输入类型：number"></a>输入类型：number</h2><pre><code>&lt;input type=&quot;number&quot;&gt; 用于应该包含数字值的输入字段。您能够对数字做出限制。根据浏览器支持，限制可应用到输入字段。</code></pre><p>   实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">    Quantity (between <span class="number">1</span> and <span class="number">5</span>):</span><br><span class="line">    &lt;input type=<span class="string">"number"</span> name=<span class="string">"quantity"</span> min=<span class="string">"1"</span> max=<span class="string">"5"</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure><h2 id="输入限制"><a href="#输入限制" class="headerlink" title="输入限制"></a>输入限制</h2><p>这里列出了一些常用的输入限制（其中一些是 HTML5 中新增的）：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>disabled</td><td>规定输入字段应该被禁用。</td></tr><tr><td>max</td><td>规定输入字段的最大值。</td></tr><tr><td>maxlength</td><td>规定输入字段的最大字符数。</td></tr><tr><td>min</td><td>规定输入字段的最小值。</td></tr><tr><td>pattern</td><td>规定通过其检查输入值的正则表达式。</td></tr><tr><td>readonly</td><td>规定输入字段为只读（无法修改）。</td></tr><tr><td>required</td><td>规定输入字段是必需的（必需填写）。</td></tr><tr><td>size</td><td>规定输入字段的宽度（以字符计）。</td></tr><tr><td>step</td><td>规定输入字段的合法数字间隔。</td></tr><tr><td>value</td><td>规定输入字段的默认值。</td></tr></tbody></table><p>例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">    Quantity:</span><br><span class="line">    &lt;input type=<span class="string">"number"</span> name=<span class="string">"points"</span> min=<span class="string">"0"</span> max=<span class="string">"100"</span> step=<span class="string">"10"</span> value=<span class="string">"30"</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure><h2 id="输入类型：date"><a href="#输入类型：date" class="headerlink" title="输入类型：date"></a>输入类型：date</h2><pre><code>&lt;input type=&quot;date&quot;&gt; 用于应该包含日期的输入字段。根据浏览器支持，日期选择器会出现输入字段中。</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">  Birthday:</span><br><span class="line">  &lt;input type=<span class="string">"date"</span> name=<span class="string">"bday"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/form</span></span><br></pre></td></tr></table></figure><h2 id="输入类型：color"><a href="#输入类型：color" class="headerlink" title="输入类型：color"></a>输入类型：color</h2><pre><code>&lt;input type=&quot;color&quot;&gt; 用于应该包含颜色的输入字段。根据浏览器支持，颜色选择器会出现输入字段中。</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">  Select your favorite color:</span><br><span class="line">  &lt;input type=<span class="string">"color"</span> name=<span class="string">"favcolor"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure><h2 id="输入类型：range-范围内的值滑块"><a href="#输入类型：range-范围内的值滑块" class="headerlink" title="输入类型：range 范围内的值滑块"></a>输入类型：range 范围内的值滑块</h2><pre><code>&lt;input type=&quot;range&quot;&gt; 用于应该包含一定范围内的值的输入字段。根据浏览器支持，输入字段能够显示为滑块控件。</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">  &lt;input type=<span class="string">"range"</span> name=<span class="string">"points"</span> min=<span class="string">"0"</span> max=<span class="string">"10"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure><h2 id="输入类型：month"><a href="#输入类型：month" class="headerlink" title="输入类型：month"></a>输入类型：month</h2><pre><code>&lt;input type=&quot;month&quot;&gt; 允许用户选择月份和年份。  根据浏览器支持，日期选择器会出现输入字段中。</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">  Birthday (month and year):</span><br><span class="line">  &lt;input type=<span class="string">"month"</span> name=<span class="string">"bdaymonth"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure><h2 id="输入类型：week"><a href="#输入类型：week" class="headerlink" title="输入类型：week"></a>输入类型：week</h2><pre><code>&lt;input type=&quot;week&quot;&gt; 允许用户选择周和年。根据浏览器支持，日期选择器会出现输入字段中。</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">  Select a week:</span><br><span class="line">  &lt;input type=<span class="string">"week"</span> name=<span class="string">"week_year"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/form</span></span><br></pre></td></tr></table></figure><blockquote></blockquote><h2 id="输入类型：time"><a href="#输入类型：time" class="headerlink" title="输入类型：time"></a>输入类型：time</h2><pre><code>&lt;input type=&quot;time&quot;&gt; 允许用户选择时间（无时区）。根据浏览器支持，时间选择器会出现输入字段中。</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">  Select a time:</span><br><span class="line">  &lt;input type=<span class="string">"time"</span> name=<span class="string">"usr_time"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure><h2 id="输入类型：datetime"><a href="#输入类型：datetime" class="headerlink" title="输入类型：datetime"></a>输入类型：datetime</h2><pre><code>&lt;input type=&quot;datetime&quot;&gt; 允许用户选择日期和时间（有时区）。根据浏览器支持，日期选择器会出现输入字段中。</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">  Birthday (date and time):</span><br><span class="line">  &lt;input type=<span class="string">"datetime"</span> name=<span class="string">"bdaytime"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure><h2 id="输入类型：datetime-local"><a href="#输入类型：datetime-local" class="headerlink" title="输入类型：datetime-local"></a>输入类型：datetime-local</h2><pre><code>&lt;input type=&quot;datetime-local&quot;&gt; 允许用户选择日期和时间（无时区）。根据浏览器支持，日期选择器会出现输入字段中。</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">  Birthday (date and time):</span><br><span class="line">  &lt;input type=<span class="string">"datetime-local"</span> name=<span class="string">"bdaytime"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure><h2 id="输入类型：email"><a href="#输入类型：email" class="headerlink" title="输入类型：email"></a>输入类型：email</h2><pre><code>&lt;input type=&quot;email&quot;&gt; 用于应该包含电子邮件地址的输入字段。根据浏览器支持，能够在被提交时自动对电子邮件地址进行验证。某些智能手机会识别 email 类型，并在键盘增加 &quot;.com&quot; 以匹配电子邮件输入。</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">  E-mail:</span><br><span class="line">  &lt;input type=<span class="string">"email"</span> name=<span class="string">"email"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure><h2 id="输入类型：search"><a href="#输入类型：search" class="headerlink" title="输入类型：search"></a>输入类型：search</h2><pre><code>&lt;input type=&quot;search&quot;&gt; 用于搜索字段（搜索字段的表现类似常规文本字段）。</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">  Search Google:</span><br><span class="line">  &lt;input type=<span class="string">"search"</span> name=<span class="string">"googlesearch"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure><h2 id="输入类型：tel"><a href="#输入类型：tel" class="headerlink" title="输入类型：tel"></a>输入类型：tel</h2><pre><code>&lt;input type=&quot;tel&quot;&gt; 用于应该包含电话号码的输入字段。目前只有 Safari 8 支持 tel 类型。</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">  Telephone:</span><br><span class="line">  &lt;input type=<span class="string">"tel"</span> name=<span class="string">"usrtel"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure><h2 id="输入类型：url"><a href="#输入类型：url" class="headerlink" title="输入类型：url"></a>输入类型：url</h2><pre><code>&lt;input type=&quot;url&quot;&gt; 用于应该包含 URL 地址的输入字段。根据浏览器支持，在提交时能够自动验证 url 字段。某些智能手机识别 url 类型，并向键盘添加 &quot;.com&quot; 以匹配 url 输入。</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">  Add your homepage:</span><br><span class="line">  &lt;input type=<span class="string">"url"</span> name=<span class="string">"homepage"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200525232958918.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70&quot; alt=&quot;HTML基础_7&quot;&gt;&lt;br&gt;本篇幅主要介绍表单的部分元素以及输入类型。&lt;br&gt;
    
    </summary>
    
    
      <category term="HTML" scheme="https://oldaz.github.io/categories/HTML/"/>
    
    
      <category term="HTML" scheme="https://oldaz.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>HTML基础_6</title>
    <link href="https://oldaz.github.io/2020/05/25/HTML%E5%9F%BA%E7%A1%80_6/"/>
    <id>https://oldaz.github.io/2020/05/25/HTML%E5%9F%BA%E7%A1%80_6/</id>
    <published>2020-05-25T15:09:14.000Z</published>
    <updated>2020-05-25T15:37:17.358Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200525230655299.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="HTML基础_6"><br>本篇幅主要介绍表单的的一些元素属性</p><a id="more"></a><h1 id="HTML-表单"><a href="#HTML-表单" class="headerlink" title="HTML 表单"></a>HTML 表单</h1><pre><code>HTML 表单用于搜集不同类型的用户输入</code></pre><h2 id="60-form-gt-元素"><a href="#60-form-gt-元素" class="headerlink" title="&#60;form&gt; 元素"></a>&#60;form&gt; 元素</h2><p>   HTML 表单用于收集用户输入。</p><ul><li><form> 元素定义 HTML 表单：<p>   实例</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">    </span><br><span class="line">   form elements</span><br><span class="line">    </span><br><span class="line">   &lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure><h2 id="HTML-表单包含表单元素"><a href="#HTML-表单包含表单元素" class="headerlink" title="HTML 表单包含表单元素"></a>HTML 表单包含表单元素</h2><p>表单元素指的是不同类型的 input 元素、复选框、单选按钮、提交按钮等等。</p><h2 id="60-input-gt-元素"><a href="#60-input-gt-元素" class="headerlink" title="&#60;input&gt; 元素"></a>&#60;input&gt; 元素</h2></h2><ul><li>&#60;input&gt; 元素是最重要的表单元素。</li><li>&#60;input&gt; 元素有很多形态，根据不同的 type 属性。</li></ul><h2 id="文本输入"><a href="#文本输入" class="headerlink" title="文本输入"></a>文本输入</h2><pre><code>&amp;#60;input type=&quot;text&quot;&gt; 定义用于文本输入的单行输入字段：</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line"> First name:<span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line">&lt;input type="text" name="firstname"&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line"> Last name:&lt;br&gt;</span><br><span class="line">&lt;input type="text" name="lastname"&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>注释：表单本身并不可见。还要注意文本字段的默认宽度是 20 个字符</p><h2 id="单选按钮输入"><a href="#单选按钮输入" class="headerlink" title="单选按钮输入"></a>单选按钮输入</h3></h2><p>&#60;input type=”radio”&gt; 定义单选按钮。</p><pre><code>单选按钮允许用户在有限数量的选项中选择其中之一：</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">&lt;input type=<span class="string">"radio"</span> name=<span class="string">"sex"</span> value=<span class="string">"male"</span> checked&gt;Male</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;input type=<span class="string">"radio"</span> name=<span class="string">"sex"</span> value=<span class="string">"female"</span>&gt;Female</span><br></pre></td></tr></table></figure><h2 id="提交按钮"><a href="#提交按钮" class="headerlink" title="提交按钮"></a>提交按钮</h3></h2><p>   &#60;input type=”submit”&gt; 定义用于向表单处理程序（form-handler）提交表单的按钮。</p><pre><code>表单处理程序通常是包含用来处理输入数据的脚本的服务器页面。</code></pre><p>表单处理程序在表单的 action 属性中指定：<br>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"action_page.php"</span>&gt;</span><br><span class="line">First name:<span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line">&lt;input type="text" name="firstname" value="Mickey"&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">Last name:&lt;br&gt;</span><br><span class="line">&lt;input type="text" name="lastname" value="Mouse"&gt;</span><br><span class="line">&lt;br&gt;&lt;br&gt;</span><br><span class="line">&lt;input type="submit" value="Submit"&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h1 id="Action-属性"><a href="#Action-属性" class="headerlink" title="Action 属性"></a>Action 属性</h1><pre><code>action 属性定义在提交表单时执行的动作。向服务器提交表单的通常做法是使用提交按钮。通常，表单会被提交到 web 服务器上的网页。指定了某个服务器脚本来处理被提交表单：</code></pre><p>&#60;form action=”action_page.php”&gt;</p><p><strong>如果省略 action 属性，则 action 会被设置为当前页面。</strong></p><h1 id="Method-属性"><a href="#Method-属性" class="headerlink" title="Method 属性"></a>Method 属性</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">method 属性规定在提交表单时所用的 HTTP 方法（GET 或 POST）：</span><br><span class="line">&lt;form action=<span class="string">"action_page.php"</span> method=<span class="string">"GET"</span>&gt;</span><br><span class="line">或：</span><br><span class="line">&lt;form action=<span class="string">"action_page.php"</span> method=<span class="string">"POST"</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="何时使用-GET？"><a href="#何时使用-GET？" class="headerlink" title="何时使用 GET？"></a>何时使用 GET？</h2><pre><code>您能够使用 GET（默认方法）：如果表单提交是被动的（比如搜索引擎查询），并且没有敏感信息。当您使用 GET 时，表单数据在页面地址栏中是可见的：action_page.php?firstname=Mickey&amp;lastname=Mouse注释：GET 最适合少量数据的提交。浏览器会设定容量限制。</code></pre><h2 id="何时使用-POST？"><a href="#何时使用-POST？" class="headerlink" title="何时使用 POST？"></a>何时使用 POST？</h2></h2><pre><code>您应该使用 POST：如果表单正在更新数据，或者包含敏感信息（例如密码）。POST 的安全性更加，因为在页面地址栏中被提交的数据是不可见的。</code></pre><h1 id="Name-属性"><a href="#Name-属性" class="headerlink" title="Name 属性"></a>Name 属性</h1><pre><code>如果要正确地被提交，每个输入字段必须设置一个 name 属性。</code></pre><p>   本例只会提交 “Last name” 输入字段：<br>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"action_page.php"</span>&gt;</span><br><span class="line">First name:<span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line">&lt;input type="text" value="Mickey"&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">Last name:&lt;br&gt;</span><br><span class="line">&lt;input type="text" name="lastname" value="Mouse"&gt;</span><br><span class="line">&lt;br&gt;&lt;br&gt;</span><br><span class="line">&lt;input type="submit" value="Submit"&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h1 id="用-60-fieldset-gt-组合表单数据"><a href="#用-60-fieldset-gt-组合表单数据" class="headerlink" title="用&#60;fieldset&gt; 组合表单数据"></a>用&#60;fieldset&gt; 组合表单数据</h2></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;fieldset&gt; 元素组合表单中的相关数据</span><br><span class="line">   &lt;legend&gt; 元素为 &lt;fieldset&gt; 元素定义标题。</span><br><span class="line">       &lt;form action=<span class="string">"action_page.php"</span>&gt;</span><br><span class="line">           &lt;fieldset&gt;</span><br><span class="line">           &lt;legend&gt;Personal information:&lt;<span class="regexp">/legend&gt;</span></span><br><span class="line"><span class="regexp">           First name:&lt;br&gt;</span></span><br><span class="line"><span class="regexp">           &lt;input type="text" name="firstname" value="Mickey"&gt;</span></span><br><span class="line"><span class="regexp">           &lt;br&gt;</span></span><br><span class="line"><span class="regexp">           Last name:&lt;br&gt;</span></span><br><span class="line"><span class="regexp">           &lt;input type="text" name="lastname" value="Mouse"&gt;</span></span><br><span class="line"><span class="regexp">           &lt;br&gt;&lt;br&gt;</span></span><br><span class="line"><span class="regexp">           &lt;input type="submit" value="Submit"&gt;&lt;/</span>fieldset&gt;</span><br><span class="line">           &lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>accept-charset</td><td>规定在被提交表单中使用的字符集（默认：页面字符集）。</td></tr><tr><td>action</td><td>规定向何处提交表单的地址（URL）（提交页面）。</td></tr><tr><td>autocomplete</td><td>规定浏览器应该自动完成表单（默认：开启）。</td></tr><tr><td>enctype</td><td>规定被提交数据的编码（默认：url-encoded）。</td></tr><tr><td>method</td><td>规定在提交表单时所用的 HTTP 方法（默认：GET）。</td></tr><tr><td>name</td><td>规定识别表单的名称（对于 DOM 使用：document.forms.name）。</td></tr><tr><td>novalidate</td><td>规定浏览器不验证表单。</td></tr><tr><td>target</td><td>规定 action 属性中地址的目标（默认：_self）。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200525230655299.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70&quot; alt=&quot;HTML基础_6&quot;&gt;&lt;br&gt;本篇幅主要介绍表单的的一些元素属性&lt;/p&gt;
    
    </summary>
    
    
      <category term="HTML" scheme="https://oldaz.github.io/categories/HTML/"/>
    
    
      <category term="HTML" scheme="https://oldaz.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>HTML基础_5</title>
    <link href="https://oldaz.github.io/2020/05/25/HTML%E5%9F%BA%E7%A1%80_5/"/>
    <id>https://oldaz.github.io/2020/05/25/HTML%E5%9F%BA%E7%A1%80_5/</id>
    <published>2020-05-25T13:55:24.000Z</published>
    <updated>2020-05-25T14:10:17.037Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200525215323197.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="XHTML"><br>本篇幅主要简介什么是XHTML</p><a id="more"></a><h1 id="XHTML-简介"><a href="#XHTML-简介" class="headerlink" title="XHTML 简介"></a>XHTML 简介</h1><p>XHTML 是以 XML 格式编写的 HTML。</p><h2 id="什么是-XHTML？"><a href="#什么是-XHTML？" class="headerlink" title="什么是 XHTML？"></a>什么是 XHTML？</h2><pre><code>XHTML 指的是可扩展超文本标记语言XHTML 与 HTML 4.01 几乎是相同的XHTML 是更严格更纯净的 HTML 版本XHTML 是以 XML 应用的方式定义的 HTMLXHTML 是 2001 年 1 月发布的 W3C 推荐标准</code></pre><h2 id="为什么使用-XHTML？"><a href="#为什么使用-XHTML？" class="headerlink" title="为什么使用 XHTML？"></a>为什么使用 XHTML？</h2><p>今日的科技界存在一些不同的浏览器技术。其中一些在计算机上运行，而另一些可能在移动电话或其他小型设备上运行。小型设备往往缺乏解释“糟糕”的标记语言的资源和能力。所以 - <em>通过结合 XML 和 HTML 的长处</em>，开发出了 XHTML。XHTML 是作为 XML 被重新设计的 HTML。<br><strong>与 HTML 相比最重要的区别：</strong></p><p> 文档结构</p><ul><li>XHTML DOCTYPE 是强制性的</li><li>html 中的 XML namespace 属性是强制性的</li><li>html、head、title 以及body 也是强制性的</li></ul><p> 元素语法</p><ul><li>XHTML 元素必须正确嵌套</li><li>XHTML 元素必须始终关闭</li><li>XHTML 元素必须小写</li><li>XHTML 文档必须有一个根元素</li></ul><p>属性语法</p><ul><li>XHTML 属性必须使用小写</li><li>XHTML 属性值必须用引号包围</li><li>XHTML 属性最小化也是禁止的</li></ul><h2 id="如何从-HTML-转换到-XHTML"><a href="#如何从-HTML-转换到-XHTML" class="headerlink" title="如何从 HTML 转换到 XHTML"></a>如何从 HTML 转换到 XHTML</h2><pre><code>向每张页面的第一行添加 XHTML &lt;!DOCTYPE&gt;向每张页面的 html 元素添加 xmlns 属性把所有元素名改为小写关闭所有空元素把所有属性名改为小写为所有属性值加引号</code></pre><h1 id="XHTML-元素"><a href="#XHTML-元素" class="headerlink" title="XHTML-元素"></a>XHTML-元素</h1><p>XHTML 元素是以 XML 格式编写的 HTML 元素</p><h2 id="XHTML-元素-语法规则"><a href="#XHTML-元素-语法规则" class="headerlink" title="XHTML 元素 - 语法规则"></a>XHTML 元素 - 语法规则</h2><pre><code>XHTML 元素必须正确嵌套XHTML 元素必须始终关闭XHTML 元素必须小写XHTML 文档必须有一个根元素XHTML 元素必须正确嵌套XHTML 元素必须始终关闭空元素也必须关闭&lt;br /&gt;&lt;hr /&gt;XHTML 元素必须小写</code></pre><h1 id="XHTML-属性"><a href="#XHTML-属性" class="headerlink" title="XHTML-属性"></a>XHTML-属性</h1></h1><p>XHTML 属性是以 XML 格式编写的 HTML 属性。</p><h2 id="XHTML-属性-语法规则"><a href="#XHTML-属性-语法规则" class="headerlink" title="XHTML 属性 - 语法规则"></a>XHTML 属性 - 语法规则</h2></h2><ul><li>XHTML 属性必须使用小写</li><li>XHTML 属性值必须用引号包围</li><li>XHTML 属性最小化也是禁止的</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200525215323197.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;XHTML&quot;&gt;&lt;br&gt;本篇幅主要简介什么是XHTML&lt;/p&gt;
    
    </summary>
    
    
      <category term="HTML" scheme="https://oldaz.github.io/categories/HTML/"/>
    
    
      <category term="HTML" scheme="https://oldaz.github.io/tags/HTML/"/>
    
  </entry>
  
</feed>
