<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr.AZ</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://oldaz.github.io/"/>
  <updated>2020-09-22T06:12:52.017Z</updated>
  <id>https://oldaz.github.io/</id>
  
  <author>
    <name>Mr.AZ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NOSQL非关系型数据库-Jedis客户端</title>
    <link href="https://oldaz.github.io/2020/09/22/NOSQL%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93-Jedis%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    <id>https://oldaz.github.io/2020/09/22/NOSQL%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93-Jedis%E5%AE%A2%E6%88%B7%E7%AB%AF/</id>
    <published>2020-09-22T06:12:16.000Z</published>
    <updated>2020-09-22T06:12:52.017Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200922141054481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>Jedis是一款Java操作的redis数据库的工具</p><a id="more"></a><h1 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h1><h2 id="1-下载Jedis的jar包"><a href="#1-下载Jedis的jar包" class="headerlink" title="1. 下载Jedis的jar包"></a>1. 下载Jedis的jar包</h2><p><img src="https://img-blog.csdnimg.cn/20200921155052826.png#pic_center" alt=""></p><h2 id="2-使用测试"><a href="#2-使用测试" class="headerlink" title="2. 使用测试"></a>2. 使用测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.Jedis.test;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> OldAZ-PC</span></span><br><span class="line"><span class="comment"> * jedis的测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 快速入门</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.获取连接</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"localhost"</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//2.操作</span></span><br><span class="line">        jedis.set(<span class="string">"username"</span>,<span class="string">"shangsan"</span>);</span><br><span class="line">        <span class="comment">//3.关闭连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-Java代码执行前："><a href="#3-Java代码执行前：" class="headerlink" title="3. Java代码执行前："></a>3. Java代码执行前：</h2><p><img src="https://img-blog.csdnimg.cn/20200921155310623.png#pic_center" alt=""></p><h2 id="4-Java代码执行后"><a href="#4-Java代码执行后" class="headerlink" title="4. Java代码执行后"></a>4. Java代码执行后</h2><p><img src="https://img-blog.csdnimg.cn/20200921155531964.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="Jedis操作各种redis中的数据结构"><a href="#Jedis操作各种redis中的数据结构" class="headerlink" title="Jedis操作各种redis中的数据结构"></a>Jedis操作各种redis中的数据结构</h1><h2 id="1-字符串类型-string"><a href="#1-字符串类型-string" class="headerlink" title="1. 字符串类型 string"></a>1. 字符串类型 string</h2><pre><code>setget</code></pre><h2 id="2-哈希类型-hash"><a href="#2-哈希类型-hash" class="headerlink" title="2. 哈希类型 hash"></a>2. 哈希类型 hash</h2><p>map 格式</p><pre><code>hsethget</code></pre><h2 id="3-列表类型-list"><a href="#3-列表类型-list" class="headerlink" title="3.  列表类型 list"></a>3.  列表类型 list</h2><p>linkedlist格式。支持重复元素</p><pre><code>lpush/rpushlpop/rpop</code></pre><h2 id="4-集合类型-set"><a href="#4-集合类型-set" class="headerlink" title="4.集合类型 set"></a>4.集合类型 set</h2><p>不允许重复元素</p><pre><code>saddsrem</code></pre><h2 id="5-有序集合类型-sortedset"><a href="#5-有序集合类型-sortedset" class="headerlink" title="5. 有序集合类型 sortedset"></a>5. 有序集合类型 sortedset</h2><p>不允许重复元素，且元素有序</p><pre><code>zaddzrem</code></pre><h1 id="数据结构操作代码"><a href="#数据结构操作代码" class="headerlink" title="数据结构操作代码"></a>数据结构操作代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.Jedis.test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> OldAZ-PC</span></span><br><span class="line"><span class="comment"> * jedis的测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 快速入门</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.获取连接</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"localhost"</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//2.操作</span></span><br><span class="line">        jedis.set(<span class="string">"username"</span>,<span class="string">"shangsan"</span>);</span><br><span class="line">        <span class="comment">//3.关闭连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * String数据</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.获取连接</span></span><br><span class="line">           <span class="comment">//如果使用空参构造，默认值 “localhost”，6379</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"localhost"</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//2.操作</span></span><br><span class="line">        jedis.set(<span class="string">"username"</span>,<span class="string">"shangsan"</span>);</span><br><span class="line">    System.out.println(jedis.get(<span class="string">"username"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可以使用setext（）方式储存过期时间的key value</span></span><br><span class="line">    <span class="comment">// 将actived：hehe 键值对存入redis，并且20秒以后自动删除键值对</span></span><br><span class="line">    jedis.setex(<span class="string">"actived"</span>,<span class="number">20</span>,<span class="string">"hehe"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.关闭连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Hash数据结构</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.获取连接</span></span><br><span class="line">           <span class="comment">//如果使用空参构造，默认值 “localhost”，6379</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"localhost"</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//2.操作</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//存储hash</span></span><br><span class="line">       jedis.hset(<span class="string">"user"</span>,<span class="string">"name"</span>,<span class="string">"lisi"</span>);</span><br><span class="line">       jedis.hset(<span class="string">"user"</span>,<span class="string">"age"</span>,<span class="string">"24"</span>);</span><br><span class="line">       jedis.hset(<span class="string">"user"</span>,<span class="string">"gender"</span>,<span class="string">"male"</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//获取 hash</span></span><br><span class="line">    System.out.println( jedis.hget(<span class="string">"user"</span>,<span class="string">"name"</span>));</span><br><span class="line"></span><br><span class="line">       <span class="comment">//获取hah的所有map中的元素</span></span><br><span class="line">    Map&lt;String, String&gt; user = jedis.hgetAll(<span class="string">"user"</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">    Set&lt;String&gt; keys = user.keySet();</span><br><span class="line">    <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">        <span class="comment">//获取value</span></span><br><span class="line">        String value = user.get(key);</span><br><span class="line">        System.out.println(key+<span class="string">":"</span>+value);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.关闭连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * list数据结构</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.获取连接</span></span><br><span class="line">           <span class="comment">//如果使用空参构造，默认值 “localhost”，6379</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis();</span><br><span class="line">        <span class="comment">//2.操作</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储数据</span></span><br><span class="line">        jedis.lpush(<span class="string">"mylist"</span>,<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>);<span class="comment">//从左边存</span></span><br><span class="line">        jedis.rpush(<span class="string">"mylist"</span>,<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>);<span class="comment">//从右边存</span></span><br><span class="line">    <span class="comment">//获取数据</span></span><br><span class="line">    List&lt;String&gt; mylist = jedis.lrange(<span class="string">"mylist"</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    System.out.println(mylist);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//list弹出</span></span><br><span class="line">    String lpop = jedis.lpop(<span class="string">"mylist"</span>);</span><br><span class="line">    System.out.println(lpop);</span><br><span class="line"></span><br><span class="line">    String rpop = jedis.rpop(<span class="string">"mylist"</span>);</span><br><span class="line">    System.out.println(rpop);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.关闭连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * set数据结构</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.获取连接</span></span><br><span class="line">           <span class="comment">//如果使用空参构造，默认值 “localhost”，6379</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis();</span><br><span class="line">        <span class="comment">//2.操作</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储数据</span></span><br><span class="line">       jedis.sadd(<span class="string">"myset"</span>,<span class="string">"java"</span>,<span class="string">"php"</span>,<span class="string">"c++"</span>);</span><br><span class="line">    <span class="comment">//获取数据</span></span><br><span class="line">    System.out.println(jedis.smembers(<span class="string">"myset"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.关闭连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * sortedset数据结构</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.获取连接</span></span><br><span class="line">           <span class="comment">//如果使用空参构造，默认值 “localhost”，6379</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis();</span><br><span class="line">        <span class="comment">//2.操作</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储数据</span></span><br><span class="line">       jedis.zadd(<span class="string">"mysortedset"</span>,<span class="number">1</span>,<span class="string">"老赵"</span>);</span><br><span class="line">       jedis.zadd(<span class="string">"mysortedset"</span>,<span class="number">2</span>,<span class="string">"老钱"</span>);</span><br><span class="line">       jedis.zadd(<span class="string">"mysortedset"</span>,<span class="number">3</span>,<span class="string">"老孙"</span>);</span><br><span class="line">       jedis.zadd(<span class="string">"mysortedset"</span>,<span class="number">4</span>,<span class="string">"老王"</span>);</span><br><span class="line">    <span class="comment">//获取数据</span></span><br><span class="line">    System.out.println(jedis.zrange(<span class="string">"mysortedset"</span>,<span class="number">0</span>,-<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.关闭连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Jedis连接池"><a href="#Jedis连接池" class="headerlink" title="Jedis连接池"></a>Jedis连接池</h1><p>JedisPool</p><h1 id="连接池的使用"><a href="#连接池的使用" class="headerlink" title="连接池的使用"></a>连接池的使用</h1><h2 id="1-创建JedisPool"><a href="#1-创建JedisPool" class="headerlink" title="1.  创建JedisPool"></a>1.  创建JedisPool</h2><h2 id="2-调用getResource-方法获取Jedis连接"><a href="#2-调用getResource-方法获取Jedis连接" class="headerlink" title="2. 调用getResource()方法获取Jedis连接"></a>2. 调用getResource()方法获取Jedis连接</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jedis连接池的使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//0.创建一个配置对象</span></span><br><span class="line">    JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">    config.setMaxTotal(<span class="number">50</span>);</span><br><span class="line">    config.setMaxIdle(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.创建Jedis连接池对象</span></span><br><span class="line">    JedisPool jedisPool = <span class="keyword">new</span> JedisPool(config, <span class="string">"localhost"</span>, <span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.获取连接</span></span><br><span class="line">    Jedis jedis = jedisPool.getResource();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.使用</span></span><br><span class="line">    jedis.set(<span class="string">"hehe"</span>, <span class="string">"haha"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭，归还到连接池中</span></span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-config的详细配置："><a href="#3-config的详细配置：" class="headerlink" title="3. config的详细配置："></a>3. config的详细配置：</h2><p><img src="https://img-blog.csdnimg.cn/20200922110041899.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="连接池工具类"><a href="#连接池工具类" class="headerlink" title="连接池工具类"></a>连接池工具类</h1><ul><li>JedisPool工具类</li><li>加载配置文件，配置连接池参数</li><li>提供获取连接的方法</li></ul><h1 id="JedisPoolUtils代码"><a href="#JedisPoolUtils代码" class="headerlink" title="JedisPoolUtils代码"></a>JedisPoolUtils代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.Jedis.util;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPoolConfig;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JedisPool工具类</span></span><br><span class="line"><span class="comment"> * 加载配置文件，配置连接池参数</span></span><br><span class="line"><span class="comment"> *提供获取连接的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisPoolUtils</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> JedisPool jedisPool;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> &#123;</span><br><span class="line">       <span class="comment">//读取配置文件</span></span><br><span class="line">       InputStream is = JedisPoolUtils.class.getClassLoader().getResourceAsStream("jedis.properties");</span><br><span class="line">       <span class="comment">//创建properties对象</span></span><br><span class="line">       Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//关联文件</span></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           pro.load(is);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//获取数据，设置到config中</span></span><br><span class="line">       JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">       config.setMaxTotal(Integer.parseInt(pro.getProperty(<span class="string">"maxTotal"</span>)));</span><br><span class="line">       config.setMaxIdle(Integer.parseInt(pro.getProperty(<span class="string">"maxIdle"</span>)));</span><br><span class="line"></span><br><span class="line">       <span class="comment">//初始化Jedispool</span></span><br><span class="line">       jedisPool  = <span class="keyword">new</span> JedisPool(config,pro.getProperty(<span class="string">"host"</span>),Integer.parseInt(pro.getProperty(<span class="string">"port"</span>)));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*获取连接的方法*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title">getJedis</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jedisPool.getResource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试工具类"><a href="#测试工具类" class="headerlink" title="测试工具类"></a>测试工具类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jedis连接池工具类的使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test8</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">//通过连接池工具类获取</span></span><br><span class="line">    Jedis jedis = JedisPoolUtils.getJedis();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用</span></span><br><span class="line">    jedis.set(<span class="string">"hello"</span>, <span class="string">"world"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭，归还连接池</span></span><br><span class="line"></span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200922141054481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;p&gt;Jedis是一款Java操作的redis数据库的工具&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="Redis" scheme="https://oldaz.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>NOSQL非关系型数据库-Redis持久化</title>
    <link href="https://oldaz.github.io/2020/09/21/NOSQL%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93-Redis%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    <id>https://oldaz.github.io/2020/09/21/NOSQL%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93-Redis%E6%8C%81%E4%B9%85%E5%8C%96/</id>
    <published>2020-09-21T07:00:14.000Z</published>
    <updated>2020-09-21T07:00:59.520Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200921145842265.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="持久化概念"><a href="#持久化概念" class="headerlink" title="持久化概念"></a>持久化概念</h1><p> redis是一个内存数据库，当redis服务器重启，或者电脑重启，数据就会丢失，我们可以将redis内存中的数据库持久化保存到硬盘文件中。</p><a id="more"></a><h1 id="持久化机制"><a href="#持久化机制" class="headerlink" title="持久化机制"></a>持久化机制</h1><h2 id="1-RDB"><a href="#1-RDB" class="headerlink" title="1. RDB"></a>1. RDB</h2><p>默认模式，不需要进行配置，默认就是使用这种机制（对性能影响比较小）</p><pre><code>在一定的时间间隔中，检测key的变化情况，然后进行持久化数据，</code></pre><h3 id="1-编辑按包目录下的redis-windows-conf文件"><a href="#1-编辑按包目录下的redis-windows-conf文件" class="headerlink" title="1. 编辑按包目录下的redis.windows.conf文件"></a>1. 编辑按包目录下的redis.windows.conf文件</h3><p><img src="https://img-blog.csdnimg.cn/20200920161144146.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""><br><img src="https://img-blog.csdnimg.cn/20200920161701545.png#pic_center" alt=""></p><h3 id="2-编辑内容"><a href="#2-编辑内容" class="headerlink" title="2. 编辑内容"></a>2. 编辑内容</h3><pre><code>- after 900 sec (15 min) if at least 1 key changed      save 900 1- after 300 sec (5 min) if at least 10 keys changed      save 300 10- after 60 sec if at least 10000 keys changed      save 60 10000</code></pre><h3 id="3-启动服务器"><a href="#3-启动服务器" class="headerlink" title="3. 启动服务器"></a>3. 启动服务器</h3><p>用命令行的方式启动 指定配置文件名称<br> <code>redis-sever.exe redis.windows.conf</code><br><img src="https://img-blog.csdnimg.cn/20200920163141807.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h2 id="2-AOF"><a href="#2-AOF" class="headerlink" title="2. AOF"></a>2. AOF</h2><p>日志记录方式，可以记录每一条命令操作。可以每一次命令操作后，持久化数据。（对性能影响比较大）</p><h3 id="1-编辑按包目录下的redis-windows-conf文件-1"><a href="#1-编辑按包目录下的redis-windows-conf文件-1" class="headerlink" title="1. 编辑按包目录下的redis.windows.conf文件"></a>1. 编辑按包目录下的redis.windows.conf文件</h3><p><img src="https://img-blog.csdnimg.cn/20200920161144146.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h3 id="2-开启AOF持久化"><a href="#2-开启AOF持久化" class="headerlink" title="2.  开启AOF持久化"></a>2.  开启AOF持久化</h3><pre><code>默认是：appendonly no （代表关闭AOF）改为 appendonly yes （开启AOF机制）</code></pre><p><img src="https://img-blog.csdnimg.cn/20200921143627181.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h3 id="3-配置持久化方式"><a href="#3-配置持久化方式" class="headerlink" title="3. 配置持久化方式"></a>3. 配置持久化方式</h3><p>每一次操作都进行持久化</p><pre><code># appendfsync always</code></pre><p>每隔一秒进行一持久化（默认）</p><pre><code>appendfsync everysec</code></pre><p>不进行持久化</p><pre><code># appendfsync no</code></pre><p><img src="https://img-blog.csdnimg.cn/20200921144513592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h3 id="3-启动服务器-1"><a href="#3-启动服务器-1" class="headerlink" title="3. 启动服务器"></a>3. 启动服务器</h3><p>用命令行的方式启动 指定配置文件名称<br> <code>redis-sever.exe redis.windows.conf</code><br><img src="https://img-blog.csdnimg.cn/20200920163141807.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""><br>这样的数据库实习上也不是绝对的安全，要安全还是要一些关系型数据库。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200921145842265.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;持久化概念&quot;&gt;&lt;a href=&quot;#持久化概念&quot; class=&quot;headerlink&quot; title=&quot;持久化概念&quot;&gt;&lt;/a&gt;持久化概念&lt;/h1&gt;&lt;p&gt; redis是一个内存数据库，当redis服务器重启，或者电脑重启，数据就会丢失，我们可以将redis内存中的数据库持久化保存到硬盘文件中。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="Redis" scheme="https://oldaz.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>NOSQL非关系型数据库-Redis快速入门</title>
    <link href="https://oldaz.github.io/2020/09/20/NOSQL%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93-Redis%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <id>https://oldaz.github.io/2020/09/20/NOSQL%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93-Redis%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</id>
    <published>2020-09-20T07:42:55.000Z</published>
    <updated>2020-09-20T07:44:33.998Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200920154029859.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>redis是一款高性能的NOSQL系列的非关系型数据库</p><a id="more"></a><pre><code>NOSQL： not only非关系型数据库MYSQL：关系型数据库1.1.什么是NOSQL    NoSQL(NoSQL = Not Only SQL)，意即“不仅仅是SQL”，是一项全新的数据库理念，泛指非关系型的数据库。    随着互联网web2.0网站的兴起，传统的关系数据库在应付web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题。    1.1.1.    NOSQL和关系型数据库比较        优点：            1）成本：nosql数据库简单易部署，基本都是开源软件，不需要像使用oracle那样花费大量成本购买使用，相比关系型数据库价格便宜。            2）查询速度：nosql数据库将数据存储于缓存之中，关系型数据库将数据存储在硬盘中，自然查询速度远不及nosql数据库。            3）存储数据的格式：nosql的存储格式是key,value形式、文档形式、图片形式等等，所以可以存储基础类型以及对象或者是集合等各种格式，而数据库则只支持基础类型。            4）扩展性：关系型数据库有类似join这样的多表查询机制的限制导致扩展很艰难。        缺点：            1）维护的工具和资料有限，因为nosql是属于新的技术，不能和关系型数据库10几年的技术同日而语。            2）不提供对sql的支持，如果不支持sql这样的工业标准，将产生一定用户的学习和使用成本。            3）不提供关系型数据库对事务的处理。    1.1.2.    非关系型数据库的优势：        1）性能NOSQL是基于键值对的，可以想象成表中的主键和值的对应关系，而且不需要经过SQL层的解析，所以性能非常高。        2）可扩展性同样也是因为基于键值对，数据之间没有耦合性，所以非常容易水平扩展。    1.1.3.    关系型数据库的优势：        1）复杂查询可以用SQL语句方便的在一个表以及多个表之间做非常复杂的数据查询。        2）事务支持使得对于安全性能很高的数据访问要求得以实现。对于这两类数据库，对方的优势就是自己的弱势，反之亦然。    1.1.4.    总结        关系型数据库与NoSQL数据库并非对立而是互补的关系，即通常情况下使用关系型数据库，在适合使用NoSQL的时候使用NoSQL数据库，        让NoSQL数据库对关系型数据库的不足进行弥补。        一般会将数据存储在关系型数据库中，在nosql数据库中备份存储关系型数据库的数据1.2.主流的NOSQL产品    •    键值(Key-Value)存储数据库            相关产品： Tokyo Cabinet/Tyrant、Redis、Voldemort、Berkeley DB            典型应用： 内容缓存，主要用于处理大量数据的高访问负载。             数据模型： 一系列键值对            优势： 快速查询            劣势： 存储的数据缺少结构化    •    列存储数据库            相关产品：Cassandra, HBase, Riak            典型应用：分布式的文件系统            数据模型：以列簇式存储，将同一列数据存在一起            优势：查找速度快，可扩展性强，更容易进行分布式扩展            劣势：功能相对局限    •    文档型数据库            相关产品：CouchDB、MongoDB            典型应用：Web应用（与Key-Value类似，Value是结构化的）            数据模型： 一系列键值对            优势：数据结构要求不严格            劣势： 查询性能不高，而且缺乏统一的查询语法    •    图形(Graph)数据库            相关数据库：Neo4J、InfoGrid、Infinite Graph            典型应用：社交网络            数据模型：图结构            优势：利用图结构相关算法。            劣势：需要对整个图做计算才能得出结果，不容易做分布式的集群方案。1.3 什么是Redis    Redis是用C语言开发的一个开源的高性能键值对（key-value）数据库，官方提供测试数据，50个并发执行100000个请求,读的速度是110000次/s,写的速度是81000次/s ，且Redis通过提供多种键值数据类型来适应不同场景下的存储需求，目前为止Redis支持的键值数据类型如下：        1) 字符串类型 string        2) 哈希类型 hash        3) 列表类型 list        4) 集合类型 set        5) 有序集合类型 sortedset    1.3.1 redis的应用场景        •    缓存（数据查询、短连接、新闻内容、商品内容等等）        •    聊天室的在线好友列表        •    任务队列。（秒杀、抢购、12306等等）        •    应用排行榜        •    网站访问统计        •    数据过期处理（可以精确到毫秒        •    分布式集群架构中的session分离</code></pre><p><img src="https://img-blog.csdnimg.cn/20200915141116449.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h1><pre><code>1. 官网：https://redis.io/2. 中文网：https://www.redis.net.cn/3. 解压直接使用：     redis.windows.conf: 配置文件    redis-cli.exe:redis的客户端    redis-server.exe:Jedis的服务端</code></pre><h1 id="命令操作"><a href="#命令操作" class="headerlink" title="命令操作"></a>命令操作</h1><h2 id="1-redis的数据结构"><a href="#1-redis的数据结构" class="headerlink" title="1. redis的数据结构"></a>1. redis的数据结构</h2><pre><code>redis 存储的是：key，value格式的数据，其中key都是字符串，value有5种不同的数据结构。    * value的数据结构        1) 字符串类型 string        2) 哈希类型 hash ：map格式        3) 列表类型 list ： linkedlist格式        4) 集合类型 set        5) 有序集合类型 sortedset</code></pre><p><img src="https://img-blog.csdnimg.cn/20200915195437793.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h2 id="2-字符串类型-String"><a href="#2-字符串类型-String" class="headerlink" title="2. 字符串类型  String"></a>2. 字符串类型  String</h2><pre><code>1. 存储： set key value2. 获取： get key3. 删除： del key </code></pre><h2 id="3-哈希类型-hash"><a href="#3-哈希类型-hash" class="headerlink" title="3. 哈希类型  hash"></a>3. 哈希类型  hash</h2><pre><code>1. 储存： hset key field value2. 获取：    * hget key filed ：获取指定的filed对应的值   * hgetall key ：获取所有的filed和value3. 删除： hdel key filed</code></pre><h2 id="4-列表类型-list"><a href="#4-列表类型-list" class="headerlink" title="4.列表类型  list"></a>4.列表类型  list</h2><pre><code>可以添加一个元素到列表的头部（左边）或者尾部（右边）1. 添加：    1. lpush  key value ：将元素加入列表左边     2. rpush  key value ：将元素加入列表右边2. 查询：    lrange key start end : 范围获取3. 删除：    lpop key ：删除列表最左边删除元素，并将元素返回    rpop key ：删除列表最右边删除元素，并将元素返回</code></pre><p><img src="https://img-blog.csdnimg.cn/2020091520305778.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h2 id="5-集合类型-set-：不允许重复元素"><a href="#5-集合类型-set-：不允许重复元素" class="headerlink" title="5.集合类型 set ：不允许重复元素"></a>5.集合类型 set ：不允许重复元素</h2><pre><code>1. 存储： sadd key value2. 获取： smembers key ：获取set集合中所有的元素3. 删除： srem key value ：删除set集合中的某个元素</code></pre><h2 id="6-有序集合类型-sortedset"><a href="#6-有序集合类型-sortedset" class="headerlink" title="6.有序集合类型 sortedset"></a>6.有序集合类型 sortedset</h2><pre><code>1. 存储：zadd key score value2. 获取：zrange key start end ：获取范围3. 删除：zrem key value</code></pre><h2 id="7-通用命令"><a href="#7-通用命令" class="headerlink" title="7.通用命令"></a>7.通用命令</h2><pre><code>1. keys * :查询所有的键2. type key ：获取键值对应的value的类型3. del key ：删除指定的value</code></pre><h1 id="持久化操作"><a href="#持久化操作" class="headerlink" title="持久化操作"></a>持久化操作</h1><h1 id="使用Java客户端操作redis"><a href="#使用Java客户端操作redis" class="headerlink" title="使用Java客户端操作redis"></a>使用Java客户端操作redis</h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200920154029859.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;p&gt;redis是一款高性能的NOSQL系列的非关系型数据库&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="快速入门" scheme="https://oldaz.github.io/tags/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    
      <category term="Redis" scheme="https://oldaz.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>轻量级数据交换格式-JSON解析器</title>
    <link href="https://oldaz.github.io/2020/09/11/%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%95%B0%E6%8D%AE%E4%BA%A4%E6%8D%A2%E6%A0%BC%E5%BC%8F-JSON%E8%A7%A3%E6%9E%90%E5%99%A8/"/>
    <id>https://oldaz.github.io/2020/09/11/%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%95%B0%E6%8D%AE%E4%BA%A4%E6%8D%A2%E6%A0%BC%E5%BC%8F-JSON%E8%A7%A3%E6%9E%90%E5%99%A8/</id>
    <published>2020-09-11T02:16:24.000Z</published>
    <updated>2020-09-11T02:17:43.908Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200910212459413.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="JSON解析器"><a href="#JSON解析器" class="headerlink" title="JSON解析器"></a>JSON解析器</h1><pre><code>一些封装好的工具常见的解析器：Jsonlib，Gson，fastjson，jackson（今天学习的）</code></pre><a id="more"></a><h1 id="JSON转换为Java对象"><a href="#JSON转换为Java对象" class="headerlink" title="JSON转换为Java对象"></a>JSON转换为Java对象</h1><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><ol><li>导入Jackson的相关jar包</li><li>创建Jackson核心对象ObjectMapper</li><li>调用ObjectMapper的相关方法进行转换</li></ol><ul><li><p>转换方法：</p><pre><code>readValue (json字符串数据，class)</code></pre></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//演示： JSON字符串转换为Java对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.初始化JSON字符串</span></span><br><span class="line">    String json = <span class="string">"&#123;\"name\":\"张三\",\"age\":23,\"gender\":\"男\",\"birthday\":\"2020-09-11\"&#125;"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 创建ObjectMapper对象</span></span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 转换为Java对象 Pertson对象</span></span><br><span class="line">    Person person = mapper.readValue(json, Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(person);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Java对象转换为JSON"><a href="#Java对象转换为JSON" class="headerlink" title="Java对象转换为JSON"></a>Java对象转换为JSON</h1><h2 id="使用步骤-1"><a href="#使用步骤-1" class="headerlink" title="使用步骤"></a>使用步骤</h2><ol><li>导入Jackson的相关jar包</li><li>创建Jackson核心对象ObjectMapper</li><li>调用ObjectMapper的相关方法进行转换</li></ol><ul><li><p>转换方法：</p><pre><code>writeValue(参数1，obj)    参数1：     File：将obj对象转换为JSON字符串，并保存到指定的文件中   writer：将obj对象转换为JSON字符串，并将json数据填充到字符输出流中    OutputStream：将obj对象转换为JSON字符串，并将json数据填充到字节输出流中writeValueAsString(obj):        将对象转换为json字符串</code></pre></li><li><p>注解 </p><pre><code>1. @JsonIgnore：排除属性2. @JsonFormat ：属性值的格式化  (使用时都是加在私有属性上方)</code></pre></li></ul><p><img src="https://img-blog.csdnimg.cn/20200911085742104.png#pic_center" alt=""></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>不包含person实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.web.domain.Person;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JacksonTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Java 对象转为JSON字符串</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建person对象</span></span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        p.setName(<span class="string">"张三"</span>);</span><br><span class="line">        p.setAge(<span class="number">23</span>);</span><br><span class="line">        p.setGender(<span class="string">"男"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建Jackson的核心对象  ObjectMapper</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.转换</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *   转换方法：</span></span><br><span class="line"><span class="comment">        *        writeValue(参数1，obj)</span></span><br><span class="line"><span class="comment">        *          参数1：</span></span><br><span class="line"><span class="comment">        *               File：将obj对象转换为JSON字符串，并保存到指定的文件中</span></span><br><span class="line"><span class="comment">        *               writer：将obj对象转换为JSON字符串，并将json数据填充到字符输出流中</span></span><br><span class="line"><span class="comment">        *               OutputStream：将obj对象转换为JSON字符串，并将json数据填充到字节输出流中</span></span><br><span class="line"><span class="comment">        *       writeValueAsString(obj):将对象转换为json字符串</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">        String json = mapper.writeValueAsString(p);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//&#123;"name":"张三","age":23,"gender":"男"&#125;</span></span><br><span class="line">        System.out.println(json);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//writeValue.将数据写到中F:/JavaCode/JavaEE/7-JSON/src/a.txt文件中</span></span><br><span class="line">        mapper.writeValue(<span class="keyword">new</span> File(<span class="string">"F:/JavaCode/JavaEE/7-JSON/src/a.txt"</span>),p);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//writeValue.将数据关联到writer中</span></span><br><span class="line">        mapper.writeValue(<span class="keyword">new</span> FileWriter(<span class="string">"F:/JavaCode/JavaEE/7-JSON/src/b.txt"</span>),p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建person对象</span></span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        p.setName(<span class="string">"张三"</span>);</span><br><span class="line">        p.setAge(<span class="number">23</span>);</span><br><span class="line">        p.setGender(<span class="string">"男"</span>);</span><br><span class="line">        p.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.转换</span></span><br><span class="line"></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        String json = mapper.writeValueAsString(p);</span><br><span class="line">        System.out.println(json);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://img-blog.csdnimg.cn/20200910230110856.png#pic_center" alt=""><br>test1：<img src="https://img-blog.csdnimg.cn/20200910230126187.png#pic_center" alt=""><br>test2：<br><img src="https://img-blog.csdnimg.cn/20200911090257259.png#pic_center" alt=""></p><h2 id="复杂Java对象转换"><a href="#复杂Java对象转换" class="headerlink" title="复杂Java对象转换"></a>复杂Java对象转换</h2><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><ol><li>List集合：数组</li><li>Map集合 ：对象格式一致</li></ol><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//创建person对象</span></span><br><span class="line">    Person p = <span class="keyword">new</span> Person();</span><br><span class="line">    p.setName(<span class="string">"张三"</span>);</span><br><span class="line">    p.setAge(<span class="number">23</span>);</span><br><span class="line">    p.setGender(<span class="string">"男"</span>);</span><br><span class="line">    p.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">    Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">    p1.setName(<span class="string">"张三"</span>);</span><br><span class="line">    p1.setAge(<span class="number">23</span>);</span><br><span class="line">    p1.setGender(<span class="string">"男"</span>);</span><br><span class="line">    p1.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">    Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line">    p2.setName(<span class="string">"张三"</span>);</span><br><span class="line">    p2.setAge(<span class="number">23</span>);</span><br><span class="line">    p2.setGender(<span class="string">"男"</span>);</span><br><span class="line">    p2.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建List集合</span></span><br><span class="line">    List&lt;Person&gt; ps = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</span><br><span class="line">    ps.add(p);</span><br><span class="line">    ps.add(p1);</span><br><span class="line">    ps.add(p2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.转换</span></span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    String json = mapper.writeValueAsString(ps);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//[&#123;"name":"张三","age":23,"gender":"男","birthday":"2020-09-11"&#125;,&#123;"name":"张三","age":23,"gender":"男","birthday":"2020-09-11"&#125;,&#123;"name":"张三","age":23,"gender":"男","birthday":"2020-09-11"&#125;]</span></span><br><span class="line">    System.out.println(json);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//创建map对象</span></span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line">    map.put(<span class="string">"name"</span>,<span class="string">"李四"</span>);</span><br><span class="line">    map.put(<span class="string">"age"</span>,<span class="number">23</span>);</span><br><span class="line">    map.put(<span class="string">"gender"</span>,<span class="string">"男"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2.转换</span></span><br><span class="line"></span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    String json = mapper.writeValueAsString(map);</span><br><span class="line"></span><br><span class="line">    System.out.println(json);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>test3：</p><p><img src="https://img-blog.csdnimg.cn/20200911092227246.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""><br>test4：<br><img src="https://img-blog.csdnimg.cn/20200911092258914.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200910212459413.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;JSON解析器&quot;&gt;&lt;a href=&quot;#JSON解析器&quot; class=&quot;headerlink&quot; title=&quot;JSON解析器&quot;&gt;&lt;/a&gt;JSON解析器&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;一些封装好的工具

常见的解析器：Jsonlib，Gson，fastjson，jackson（今天学习的）&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="JavaEE" scheme="https://oldaz.github.io/tags/JavaEE/"/>
    
      <category term="JSON" scheme="https://oldaz.github.io/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>轻量级数据交换格式-JSON概念</title>
    <link href="https://oldaz.github.io/2020/09/10/%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%95%B0%E6%8D%AE%E4%BA%A4%E6%8D%A2%E6%A0%BC%E5%BC%8F-JSON%E6%A6%82%E5%BF%B5/"/>
    <id>https://oldaz.github.io/2020/09/10/%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%95%B0%E6%8D%AE%E4%BA%A4%E6%8D%A2%E6%A0%BC%E5%BC%8F-JSON%E6%A6%82%E5%BF%B5/</id>
    <published>2020-09-10T13:12:20.000Z</published>
    <updated>2020-09-10T13:15:29.603Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200910211111465.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>JavaScript Object Notation ：JavaScript对象表示法</p><pre><code>JSON现在对于存储和交换信息的语法进行数据的传输JSON 比 XML 更小、更快、更易解析</code></pre><a id="more"></a>    <p>作用（早期）<br>在Java中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> person();</span><br><span class="line">p.setName(<span class="string">"张三"</span>)；</span><br><span class="line">p.setAge(<span class="number">23</span>);</span><br><span class="line">p.setGender(<span class="string">"男"</span>)；</span><br></pre></td></tr></table></figure><p>在JavaScript中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p =&#123;<span class="string">"name"</span>:<span class="string">"张三"</span>,<span class="string">"age"</span>:<span class="string">"23"</span>,<span class="string">"gender"</span>:<span class="string">"男"</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h2 id="基本规则"><a href="#基本规则" class="headerlink" title="基本规则"></a>基本规则</h2><pre><code>1. 数据在名称/值对中：JSON数据是由键值对构成的        * 键用引号（单双都行）引起来，也可以不使用引号        * 值的取值类型：            1. 数字（整数和浮点数）            2. 字符串（在双引号中）            3. 逻辑值（true和false）            4. 数组（在方括号中）{&quot;person&quot;:[{1},{2}]}            5. 对象（在华括号中）{&quot;address&quot;:{&quot;provice&quot;:&quot;陕西...&quot;}}            6. null2. 数据由逗号分隔：多个键值对由逗号分隔3. 花括号保存对象：使用{}定义JSON格式4. 5. 方括号保存数组：[]</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 定义基本格式</span></span><br><span class="line">  <span class="keyword">var</span> person = &#123;<span class="string">"name"</span>:<span class="string">"张三"</span>,<span class="string">"age"</span>:<span class="string">"23"</span>,<span class="string">"gender"</span>:<span class="string">"true"</span>&#125;</span><br><span class="line">  <span class="comment">//alert(person);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//2.嵌套格式&#123;&#125;-&gt;[]</span></span><br><span class="line">  <span class="keyword">var</span> person = &#123;<span class="string">"person"</span>:[</span><br><span class="line">          &#123;<span class="string">"name"</span>:<span class="string">"张三"</span>,<span class="string">"age"</span>:<span class="string">"23"</span>,<span class="string">"gender"</span>:<span class="string">"true"</span>&#125;,</span><br><span class="line">          &#123;<span class="string">"name"</span>:<span class="string">"李四"</span>,<span class="string">"age"</span>:<span class="string">"24"</span>,<span class="string">"gender"</span>:<span class="string">"true"</span>&#125;,</span><br><span class="line">          &#123;<span class="string">"name"</span>:<span class="string">"王五"</span>,<span class="string">"age"</span>:<span class="string">"21"</span>,<span class="string">"gender"</span>:<span class="string">"false"</span>&#125;]&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//alert(persons);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//2.嵌套格式 [] --&gt; &#123;&#125;</span></span><br><span class="line">   <span class="keyword">var</span> ps = [</span><br><span class="line">       &#123;<span class="string">"name"</span>:<span class="string">"张三"</span>,<span class="string">"age"</span>:<span class="string">"23"</span>,<span class="string">"gender"</span>:<span class="string">"true"</span>&#125;,</span><br><span class="line">       &#123;<span class="string">"name"</span>:<span class="string">"李四"</span>,<span class="string">"age"</span>:<span class="string">"24"</span>,<span class="string">"gender"</span>:<span class="string">"true"</span>&#125;,</span><br><span class="line">       &#123;<span class="string">"name"</span>:<span class="string">"王五"</span>,<span class="string">"age"</span>:<span class="string">"21"</span>,<span class="string">"gender"</span>:<span class="string">"false"</span>&#125;]</span><br><span class="line">   <span class="comment">//alert(ps);</span></span><br></pre></td></tr></table></figure><h2 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h2><pre><code>1. JSON对象： 对象.键名2. JSON对象[&quot;键名&quot;]3. 数组对象[索引]</code></pre><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 定义基本格式</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;<span class="string">"name"</span>:<span class="string">"张三"</span>,<span class="string">"age"</span>:<span class="string">"23"</span>,<span class="string">"gender"</span>:<span class="string">"true"</span>&#125;</span><br><span class="line"><span class="comment">//alert(person);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取name值</span></span><br><span class="line"><span class="comment">// var name = person.name;</span></span><br><span class="line"><span class="keyword">var</span> name = person[<span class="string">"name"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.嵌套格式&#123;&#125;-&gt;[]</span></span><br><span class="line"><span class="keyword">var</span> persons = &#123;<span class="string">"person"</span>:[</span><br><span class="line">        &#123;<span class="string">"name"</span>:<span class="string">"张三"</span>,<span class="string">"age"</span>:<span class="string">"23"</span>,<span class="string">"gender"</span>:<span class="string">"true"</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"name"</span>:<span class="string">"李四"</span>,<span class="string">"age"</span>:<span class="string">"24"</span>,<span class="string">"gender"</span>:<span class="string">"true"</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"name"</span>:<span class="string">"王五"</span>,<span class="string">"age"</span>:<span class="string">"21"</span>,<span class="string">"gender"</span>:<span class="string">"false"</span>&#125;]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//alert(persons);</span></span><br><span class="line"> <span class="comment">//获取王五值</span></span><br><span class="line"><span class="keyword">var</span> name2 = persons.person[<span class="number">2</span>].name;</span><br><span class="line"><span class="built_in">console</span>.log(name2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//2.嵌套格式 [] --&gt; &#123;&#125;</span></span><br><span class="line"> <span class="keyword">var</span> ps = [</span><br><span class="line">     &#123;<span class="string">"name"</span>:<span class="string">"张三"</span>,<span class="string">"age"</span>:<span class="string">"23"</span>,<span class="string">"gender"</span>:<span class="string">"true"</span>&#125;,</span><br><span class="line">     &#123;<span class="string">"name"</span>:<span class="string">"李四"</span>,<span class="string">"age"</span>:<span class="string">"24"</span>,<span class="string">"gender"</span>:<span class="string">"true"</span>&#125;,</span><br><span class="line">     &#123;<span class="string">"name"</span>:<span class="string">"王五"</span>,<span class="string">"age"</span>:<span class="string">"21"</span>,<span class="string">"gender"</span>:<span class="string">"false"</span>&#125;]</span><br><span class="line"> <span class="comment">//alert(ps);</span></span><br><span class="line"><span class="comment">//获取李四值</span></span><br><span class="line"> <span class="built_in">console</span>.log(ps[<span class="number">1</span>].name)</span><br><span class="line"></span><br><span class="line"> <span class="comment">//获取ps[1]对象中所有的键和值</span></span><br><span class="line"> <span class="comment">//for in 循环</span></span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> ps[<span class="number">1</span>])&#123;</span><br><span class="line"></span><br><span class="line">     <span class="built_in">console</span>.log(key+<span class="string">":"</span>+ps[<span class="number">1</span>][key]);</span><br><span class="line">     <span class="comment">//这样的方式不行，相当于person."name"</span></span><br><span class="line">     <span class="built_in">console</span>.log(key+<span class="string">":"</span>+ps[<span class="number">1</span>].key);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//获取ps的数组i</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= ps.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> p = ps[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> p)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(key+<span class="string">"="</span>+p[key]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="取数据结果"><a href="#取数据结果" class="headerlink" title="取数据结果"></a>取数据结果</h3><p><img src="https://img-blog.csdnimg.cn/20200910210403228.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200910211111465.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;p&gt;JavaScript Object Notation ：JavaScript对象表示法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;JSON现在对于存储和交换信息的语法
进行数据的传输
JSON 比 XML 更小、更快、更易解析&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="JavaEE" scheme="https://oldaz.github.io/tags/JavaEE/"/>
    
      <category term="JSON" scheme="https://oldaz.github.io/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE核心技术之Listener监听器</title>
    <link href="https://oldaz.github.io/2020/09/10/JavaEE%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B9%8BListener%E7%9B%91%E5%90%AC%E5%99%A8/"/>
    <id>https://oldaz.github.io/2020/09/10/JavaEE%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B9%8BListener%E7%9B%91%E5%90%AC%E5%99%A8/</id>
    <published>2020-09-10T08:44:02.000Z</published>
    <updated>2020-09-10T08:44:52.014Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200910164225960.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>   web的三大组件之一。</p><a id="more"></a><pre><code>事件监听机制：    * 事件：一件事情    * 事件源：事情发生的地方    * 监听器：一个对象    * 注册监听：将事件、事件源、监听器绑定在一起。         当事件源发生发生某个事件后，执行监视器代码。</code></pre><h1 id="ServletContextListener"><a href="#ServletContextListener" class="headerlink" title="ServletContextListener"></a>ServletContextListener</h1><p>监听ServletContext对象的创建和销毁</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><pre><code>void contextDestoryed(ServletContextEvent  sce)：                    ServletContext对象销毁之前会调用此方法。void contextInitialized(ServletContextEvent sce) ：                    ServletContext对象创建前会调用此方法。</code></pre><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li><p>定义一个类，实现ServletContextListener接口</p></li><li><p>复写方法</p></li><li><p>配置</p><pre><code>1. web.xml</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置监听器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.web.listener.ContextLoaderLitsener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--指定初始化参数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/classes/applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>注解设置<br>同Servlet和Filter一样在前面加入注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@webListener</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="监听器代码"><a href="#监听器代码" class="headerlink" title="监听器代码"></a>监听器代码</h2><p>加载配置文件进内存<br><img src="https://img-blog.csdnimg.cn/20200910163939842.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextListener;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextLoaderLitsener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line">    <span class="comment">//监听ServletContext对象创建的。ServletContext对服务器启动后自动创建。</span></span><br><span class="line">    <span class="comment">//在服务器自动启动后被调用</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//加载资源</span></span><br><span class="line">        <span class="comment">//1. 获取ServletContext对象</span></span><br><span class="line">        ServletContext servletContext = servletContextEvent.getServletContext();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 加载资源文件</span></span><br><span class="line">        String contextConfigLocation = servletContext.getInitParameter(<span class="string">"contextConfigLocation"</span>);</span><br><span class="line">        <span class="comment">//3.获取真实路径</span></span><br><span class="line">        String realPath = servletContext.getRealPath(contextConfigLocation);</span><br><span class="line">        <span class="comment">//4.加载进内存</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line">            System.out.println(fis);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"ServletContext被创建了。。。"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在服务器关闭后，ServletContext对象被销毁，当服务器正常关闭后该方法被调用</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ServletContext被销毁了。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200910164225960.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;p&gt;   web的三大组件之一。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="JavaEE" scheme="https://oldaz.github.io/tags/JavaEE/"/>
    
      <category term="Listener" scheme="https://oldaz.github.io/tags/Listener/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE核心技术之Filter案例</title>
    <link href="https://oldaz.github.io/2020/09/10/JavaEE%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B9%8BFilter%E6%A1%88%E4%BE%8B/"/>
    <id>https://oldaz.github.io/2020/09/10/JavaEE%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B9%8BFilter%E6%A1%88%E4%BE%8B/</id>
    <published>2020-09-10T01:34:21.000Z</published>
    <updated>2020-09-10T01:35:23.011Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200910093135782.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="案例一：登录验证"><a href="#案例一：登录验证" class="headerlink" title="案例一：登录验证"></a>案例一：登录验证</h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><pre><code>1. 访问项目案例的资源。验证其实是否登录、2. 如果登录直接放行3. 如果没有登录，则会跳转到登录页面，提示“您尚未登录，请先登录”。</code></pre><a id="more"></a><p><img src="https://img-blog.csdnimg.cn/20200907182007957.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h2 id="Filter代码"><a href="#Filter代码" class="headerlink" title="Filter代码"></a>Filter代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.web.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录验证的过滤器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebFilter</span>(urlPatterns = <span class="string">"/*"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 资源亲求路径</span></span><br><span class="line">        String uri = request.getRequestURI();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 判断是否包含相关的路径,要注意排除掉 css/js/图片/验证码资源</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (uri.contains(<span class="string">"/login.jsp"</span>) || uri.contains(<span class="string">"/loginServlet"</span>) || uri.contains(<span class="string">"/css/"</span>) || uri.contains(<span class="string">"/js/"</span>) || uri.contains(<span class="string">"/fonts/"</span>) || uri.contains(<span class="string">"/checkCodeServlet"</span>)) &#123;</span><br><span class="line">            <span class="comment">//包含登录页的信息，放行</span></span><br><span class="line">            chain.doFilter(req, resp);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//不包含登录页的信息，判断是否已经登录</span></span><br><span class="line">            <span class="comment">//获取session对象</span></span><br><span class="line">            Object user = request.getSession().getAttribute(<span class="string">"user"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (user != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//登陆了，放行</span></span><br><span class="line">                chain.doFilter(req, resp);</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                request.setAttribute(<span class="string">"login_msg"</span>,<span class="string">"您尚未登录，请登录！"</span>);</span><br><span class="line">                System.out.println(request.getAttribute(<span class="string">"login_msg"</span>));</span><br><span class="line">                request.getRequestDispatcher(<span class="string">"/login.jsp"</span>).forward(request,resp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="案例二：敏感词过滤"><a href="#案例二：敏感词过滤" class="headerlink" title="案例二：敏感词过滤"></a>案例二：敏感词过滤</h1><h2 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a>需求</h2><pre><code>1. 对案例录入的数据进行敏感词过滤2. 敏感词参考《敏感词.txt》3. 如果为敏感词，则替换为 ***</code></pre><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><pre><code>1. 对request对象进行增强。增强获取参数相关参数2. 放行。传递代理对象。</code></pre><p>增强对象的功能<br><img src="https://img-blog.csdnimg.cn/20200909175949861.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 敏感词汇过滤器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebFilter</span>(urlPatterns = <span class="string">"/*"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SensitiveWordsFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取代理对象，增强getParameter方法</span></span><br><span class="line"></span><br><span class="line">        ServletRequest proxy_req = (ServletRequest)Proxy.newProxyInstance(req.getClass().getClassLoader(), req.getClass().getInterfaces(), <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="comment">//增强getParamter方法</span></span><br><span class="line">                <span class="comment">//判断是否为getParamter方法</span></span><br><span class="line">                <span class="keyword">if</span> (method.getName().equals(<span class="string">"getParamter"</span>))&#123;</span><br><span class="line">                    <span class="comment">//增强返回值</span></span><br><span class="line">                    <span class="comment">//获取返回值</span></span><br><span class="line">                    String value = (String)method.invoke(req,args);</span><br><span class="line">                    <span class="keyword">if</span> (value!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                        <span class="keyword">for</span> (String str:list) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (value.contains(str)) &#123;</span><br><span class="line">                                value.replaceAll(str,<span class="string">"****"</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> value;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//判断方法名是否是 getParameterMap</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//判断方法名是否是 getParameterValue</span></span><br><span class="line">                <span class="keyword">return</span> method.invoke(req,args);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//2.放行</span></span><br><span class="line">        chain.doFilter(proxy_req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();<span class="comment">//敏感词汇集合</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.加载文件</span></span><br><span class="line">             ServletContext servletContext = config.getServletContext();</span><br><span class="line">             String realPath = servletContext.getRealPath(<span class="string">"/WEB-INF/classes/敏感词汇.txt"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.读取文件</span></span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(realPath));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.将文件的每一行数据设置或者添加到list中</span></span><br><span class="line">            String line = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span>((line =br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                list.add(line);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            br.close();</span><br><span class="line">            System.out.println(list);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><pre><code>一共23种，一些通用的解决问题的方式。</code></pre><h2 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h2><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><pre><code>1. 真实对象：被代理的对象 （下图背景北京的代理商）2. 代理对象：（下图西安卖电脑的）3. 代理模式：代理对象代理真实对象，达到增强真实功能的目的。</code></pre><p><img src="https://img-blog.csdnimg.cn/20200909180119853.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><pre><code>1. 静态代理：有一个类文件描述代理模式2. 动态代理：在内存中来形成代理类    *实现步骤        1.  代理对象和真实对象实现相同的接口        2. 代理对象 = proxy.newProxyInstance();        3. 使用代理对象来调用方法。        4. 增强方法    *增强方式：        1. 增强参数列表        2. 增强返回值类型        3. 增强方法体执行逻辑</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.proxy.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.proxy.SaleComputer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建真实的对象</span></span><br><span class="line">        Lenovo lenovo = <span class="keyword">new</span> Lenovo();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 动态代理增强lenovo方法</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 三个加载器：</span></span><br><span class="line"><span class="comment">        *       1.真实对象.getClass().getClassLoader()  --类加载器</span></span><br><span class="line"><span class="comment">        *       2.接口数组：真实对象.getClass().getInterfaces()   --保证代理对象和真实对象实现的接口</span></span><br><span class="line"><span class="comment">        *       3.处理器：new InvocationHandle()  --核心业务逻辑的处理</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        SaleComputer proxy_lenovo = (SaleComputer) Proxy.newProxyInstance(lenovo.getClass().getClassLoader(), lenovo.getClass().getInterfaces(), <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line"></span><br><span class="line">           <span class="comment">/*</span></span><br><span class="line"><span class="comment">           * 代理逻辑编写的方法：</span></span><br><span class="line"><span class="comment">           *        代理对象调用的多有方法都会出发该方法执行</span></span><br><span class="line"><span class="comment">           *       参数：</span></span><br><span class="line"><span class="comment">           *        1.proxy：代理对象</span></span><br><span class="line"><span class="comment">           *        2.method:代理对象调用方法</span></span><br><span class="line"><span class="comment">           *        3.args：代理对象调用的方法时,传递的实际参数</span></span><br><span class="line"><span class="comment">           *</span></span><br><span class="line"><span class="comment">           * */</span></span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="comment">/*                System.out.println("该方法执行了。。。");</span></span><br><span class="line"><span class="comment">                System.out.println(method.getName());</span></span><br><span class="line"><span class="comment">                System.out.println(args[0]);*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (method.getName().equals(<span class="string">"sale"</span>)) &#123;</span><br><span class="line">                    <span class="comment">//1. 增强参数</span></span><br><span class="line">                    <span class="keyword">double</span> money = (<span class="keyword">double</span>) args[<span class="number">0</span>];</span><br><span class="line">                    money = money*<span class="number">0.85</span>;</span><br><span class="line"></span><br><span class="line">                    System.out.println(<span class="string">"专车接你。。。"</span>);</span><br><span class="line">                    <span class="comment">//使用真实对象调用方法</span></span><br><span class="line">                    String obj = (String) method.invoke(lenovo, money);</span><br><span class="line">                    System.out.println(<span class="string">"免费送货。。。"</span>);</span><br><span class="line">                    <span class="comment">//增强返回值</span></span><br><span class="line">                    <span class="keyword">return</span> obj+<span class="string">"_鼠标垫"</span>;</span><br><span class="line"></span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//使用真实对象该方法</span></span><br><span class="line">                    Object obj = method.invoke(lenovo, args);</span><br><span class="line">                    <span class="keyword">return</span> obj;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        String computer = proxy_lenovo.sale(<span class="number">7000</span>);</span><br><span class="line">        System.out.println(computer);</span><br><span class="line">        proxy_lenovo.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200910093135782.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;案例一：登录验证&quot;&gt;&lt;a href=&quot;#案例一：登录验证&quot; class=&quot;headerlink&quot; title=&quot;案例一：登录验证&quot;&gt;&lt;/a&gt;案例一：登录验证&lt;/h1&gt;&lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;1. 访问项目案例的资源。验证其实是否登录、
2. 如果登录直接放行
3. 如果没有登录，则会跳转到登录页面，提示“您尚未登录，请先登录”。&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="JavaEE" scheme="https://oldaz.github.io/tags/JavaEE/"/>
    
      <category term="Filter" scheme="https://oldaz.github.io/tags/Filter/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE核心技术之Filter过滤器</title>
    <link href="https://oldaz.github.io/2020/09/07/JavaEE%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B9%8BFilter%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <id>https://oldaz.github.io/2020/09/07/JavaEE%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B9%8BFilter%E8%BF%87%E6%BB%A4%E5%99%A8/</id>
    <published>2020-09-07T07:48:30.000Z</published>
    <updated>2020-09-07T07:49:26.697Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200907154733350.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><pre><code>*生活中的过滤器：净水器，空气净化器...web中的过滤器：当访问服务器资源时，过滤器可以将请求拦下来，                完成一些特殊的功能</code></pre><a id="more"></a><pre><code>过滤器的作用：        一般用于完成通过的操作。如：登录验证，统一编码处理，敏感字符过滤...</code></pre><h1 id="快速入门："><a href="#快速入门：" class="headerlink" title="快速入门："></a>快速入门：</h1><h2 id="1-步骤："><a href="#1-步骤：" class="headerlink" title="1. 步骤："></a>1. 步骤：</h2><pre><code>1. 定义一个类，实现接口Filter2. 复写方法3. 配置拦截路径</code></pre><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter</span>(<span class="string">"/*"</span>) <span class="comment">//访问所有的资源之前，都会执行该过滤器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterDemo1</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"FilterDemo1被执行了。。。"</span>);</span><br><span class="line">        <span class="comment">//放行</span></span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-过滤器细节："><a href="#3-过滤器细节：" class="headerlink" title="3. 过滤器细节："></a>3. 过滤器细节：</h2><h3 id="1-web-xml配置"><a href="#1-web-xml配置" class="headerlink" title="1. web.xml配置"></a>1. web.xml配置</h3><p>和配置servlet基本一样的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.web.filter.FilterDemo1<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--拦截路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-执行流程"><a href="#2-执行流程" class="headerlink" title="2.  执行流程"></a>2.  执行流程</h3><pre><code>1. 执行过滤器2. 执行放行后的资源3. 回来执行放行代码下边的代码 </code></pre><p><img src="https://img-blog.csdnimg.cn/20200906211207560.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">       <span class="comment">//对request对象请求消息增强</span></span><br><span class="line">       System.out.println(<span class="string">"filterDemo2..."</span>);</span><br><span class="line">       <span class="comment">//放行</span></span><br><span class="line">       chain.doFilter(req, resp);</span><br><span class="line">       <span class="comment">//对response对象的响应消息增强</span></span><br><span class="line">       System.out.println(<span class="string">"filterDemo2回来了。。。。"</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="3-过滤器生命周期方法"><a href="#3-过滤器生命周期方法" class="headerlink" title="3. 过滤器生命周期方法"></a>3. 过滤器生命周期方法</h3><pre><code>1. init:在服务器启动后，会创建Filter对象，         然后调用init方法.只执行一次2. doFilter:           每一次请求被拦截时，会被执行，执行多次。3. destroy:        在服务器关闭后，filter对象被销毁，        如果是正常关闭，然后调用destroy方法，执行一次。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> OldAZ-PC</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebFilter</span>(urlPatterns = <span class="string">"/FilterDemo3"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterDemo3</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 在服务器启动后，会创建Filter对象，然后调用init方法.只执行一次。</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"init。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*每一次请求被拦截时，会被执行，执行多次。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"doFilter。。。"</span>);</span><br><span class="line">        chain.doFilter(req, resp);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 在服务器关闭后，filter对象被销毁，如果是正常关闭，然后调用destroy方法，执行一次。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"destroy..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-过滤器配置详解"><a href="#4-过滤器配置详解" class="headerlink" title="4. 过滤器配置详解"></a>4. 过滤器配置详解</h3><h4 id="拦截路径配置"><a href="#拦截路径配置" class="headerlink" title="拦截路径配置"></a>拦截路径配置</h4><pre><code>1. 具体路径资源：    /index.jsp    只有当访问index.jsp时，过滤器才会被执行。2. 拦截目录：    /user/*       访问/user下的所有资源时，过滤器会被执行3. 后缀名拦截    *.jsp         访问所有的jsp资源时，过滤器会被执行4. 拦截所有的资源     /*           访问所有资源时，过滤器都会被执行。</code></pre><h4 id="拦截方式的配置"><a href="#拦截方式的配置" class="headerlink" title="拦截方式的配置"></a>拦截方式的配置</h4><p>资源被访问的方式：</p><ol><li>注解配置</li></ol><ul><li><p>设置dispatcher属性</p><pre><code>- REQUEST：默认值，浏览器直接请求资源</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*浏览器直接请求index.jsp时，该过滤器会被执行*/</span></span><br><span class="line"><span class="meta">@WebFilter</span>(urlPatterns = <span class="string">"/index.jsp"</span>,dispatcherTypes = DispatcherType.REQUEST)</span><br></pre></td></tr></table></figure><ul><li><p>FOEWORD：转发访问资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*只有浏览器转发访问index.jsp时，该过滤器会被执行*/</span></span><br><span class="line"><span class="meta">@WebFilter</span>(urlPatterns = <span class="string">"/index.jsp"</span>,dispatcherTypes = DispatcherType.REQUEST)</span><br></pre></td></tr></table></figure><pre><code>- INCLUSE：包含访问资源- ERROR:错误跳转资源- ASYNC：一部访问资源</code></pre></li></ul></li></ul><p>同时设置多个执行条件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*浏览器直接访问或者转发访问index.jsp时，该过滤器会被执行*/</span></span><br><span class="line"><span class="meta">@WebFilter</span>(urlPatterns = <span class="string">"/index.jsp"</span>,dispatcherTypes = &#123;DispatcherType.REQUEST,DispatcherType.FORWARD&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li>web.xml </li></ol><pre><code>设置&lt;dispatcherTypes&gt;&lt;/dispatcherTypes&gt;</code></pre><h3 id="5-过滤器链（配置多个过滤器）"><a href="#5-过滤器链（配置多个过滤器）" class="headerlink" title="5. 过滤器链（配置多个过滤器）"></a>5. 过滤器链（配置多个过滤器）</h3><pre><code>配置多个过滤器，可以同时生效</code></pre><h4 id="执行顺序和先后"><a href="#执行顺序和先后" class="headerlink" title="执行顺序和先后"></a>执行顺序和先后</h4><p>如果有两个过滤器，过滤器1和过滤器2</p><ul><li><p>执行顺序：</p><pre><code>1. 过滤器12. 过滤器23. 资源执行4. 过滤器25. 过滤器1 </code></pre></li><li><p>过滤器先后顺序问题</p></li></ul><ol><li><p>注解配置</p><pre><code>按照类名字符串的字符串进行逐个比较，值小的先被执行。例：AFilter和BFliter两个过滤器，AFilter先执行。</code></pre></li><li><p>web.xml</p><pre><code>谁的&lt;filter-mapping&gt;&lt;/filter-mapping&gt;定义在上面，谁先执行</code></pre></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200907154733350.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;*生活中的过滤器：净水器，空气净化器...
web中的过滤器：当访问服务器资源时，过滤器可以将请求拦下来，
                完成一些特殊的功能&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="JavaEE" scheme="https://oldaz.github.io/tags/JavaEE/"/>
    
      <category term="Filter" scheme="https://oldaz.github.io/tags/Filter/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE页面技术之JSTL标签&amp;小案例</title>
    <link href="https://oldaz.github.io/2020/09/04/JavaEE%E9%A1%B5%E9%9D%A2%E6%8A%80%E6%9C%AF%E4%B9%8BJSTL%E6%A0%87%E7%AD%BE&amp;%E5%B0%8F%E6%A1%88%E4%BE%8B/"/>
    <id>https://oldaz.github.io/2020/09/04/JavaEE%E9%A1%B5%E9%9D%A2%E6%8A%80%E6%9C%AF%E4%B9%8BJSTL%E6%A0%87%E7%AD%BE&amp;%E5%B0%8F%E6%A1%88%E4%BE%8B/</id>
    <published>2020-09-04T13:32:43.000Z</published>
    <updated>2020-09-04T13:33:49.652Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200904213132605.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><pre><code>JavaServer Pages Tag Library   ：  JSP标准标签库* 是由Apache组织提供的开源的免费的JSP标签</code></pre><h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><pre><code>用户简化和替换JSP页面上的Java代码</code></pre><a id="more"></a><h1 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h1><pre><code>1. 导入JSTL相关的jar包2. 引入标签库： taglib指令 &lt;%@ taglib =&quot;&quot; prefix=&quot;&quot;%&gt;3. 使用标签</code></pre><h1 id="常用的JSTL标签"><a href="#常用的JSTL标签" class="headerlink" title="常用的JSTL标签"></a>常用的JSTL标签</h1><ol><li><p>if  </p><pre><code>相当于Java代码的if语句</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%--</span></span></span><br><span class="line"><span class="tag">        <span class="attr">1.test</span> 必须属性，接受<span class="attr">boolean</span>表达式</span></span><br><span class="line"><span class="tag">          如果表达式为<span class="attr">true</span>，则显示<span class="attr">if</span>标签体内容，如果为<span class="attr">false</span>，则不显示标签体内容。</span></span><br><span class="line"><span class="tag">          一般情况下，<span class="attr">test</span>属性值会结合<span class="attr">el</span>表达式一起使用</span></span><br><span class="line"><span class="tag"></span></span><br><span class="line">        2.没有else，若是想用else，则只能再写一份&lt;c:if ...&gt;</span><br><span class="line"></span><br><span class="line">    --%&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">c:if</span> <span class="attr">test</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        我是真...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">c:if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">        //判断<span class="attr">request</span>域中一个<span class="attr">list</span>集合为空，如果不为空，则显示遍历集合</span></span><br><span class="line"><span class="tag">        <span class="attr">List</span> <span class="attr">list</span> = <span class="string">new</span> <span class="attr">ArrayList</span>();</span></span><br><span class="line"><span class="tag">        <span class="attr">list.add</span>("<span class="attr">aaa</span>");</span></span><br><span class="line"><span class="tag">        <span class="attr">request.setAttribute</span>("<span class="attr">number</span>",<span class="attr">3</span>);</span></span><br><span class="line"><span class="tag">        <span class="attr">request.setAttribute</span>("<span class="attr">list</span>",<span class="attr">list</span>);</span></span><br><span class="line"><span class="tag">    %&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">c:if</span> <span class="attr">test</span>=<span class="string">"$&#123;not empty list&#125;"</span>&gt;</span></span><br><span class="line">        遍历集合</span><br><span class="line">    <span class="tag">&lt;/<span class="name">c:if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">c:if</span> <span class="attr">test</span>=<span class="string">"$&#123;number % 2 !=0&#125;"</span>&gt;</span></span><br><span class="line">        $&#123;number&#125;为奇数</span><br><span class="line">    <span class="tag">&lt;/<span class="name">c:if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">c:if</span> <span class="attr">test</span>=<span class="string">"$&#123;number % 2 ==0&#125;"</span>&gt;</span></span><br><span class="line">        $&#123;number&#125;为偶数</span><br><span class="line">    <span class="tag">&lt;/<span class="name">c:if</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>choose </p><p>   相当于 Java代码的switch</p></li></ol></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">        &lt;%--</span><br><span class="line">        完成对应数字编号对应星期几的案例</span><br><span class="line">            <span class="number">1</span>. 域中c储存一数字</span><br><span class="line">            <span class="number">2</span>. 使用choose标签取出数字，        相当于<span class="keyword">switch</span>声明</span><br><span class="line">            <span class="number">3</span>. 使用when标签做出判断，          相当于<span class="keyword">case</span></span><br><span class="line">            <span class="number">4</span>. otherwise标签做其他情况的声明 ，相当于<span class="keyword">default</span></span><br><span class="line">        --%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">request.setAttribute(<span class="string">"number"</span>,<span class="number">3</span>);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:choose&gt;</span><br><span class="line">    &lt;c:when test="number==1"&gt;星期一&lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test="number==2"&gt;星期二&lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test="number==3"&gt;星期三&lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test="number==4"&gt;星期四&lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test="number==5"&gt;星期五&lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test="number==6"&gt;星期六&lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test="number==7"&gt;星期天&lt;/c:when&gt;</span><br><span class="line">    &lt;c:otherwise&gt;输入有误&lt;/c:otherwise&gt;</span><br><span class="line"></span><br><span class="line">&lt;/c:choose&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>foreach  </p><pre><code>相当于Java代码的for语句</code></pre></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">    &lt;%--</span><br><span class="line">    foreach:相当Java的<span class="keyword">for</span>语句</span><br><span class="line">    <span class="number">1</span>. 完成重复的操作</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;\</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">     属性：</span><br><span class="line">        begin：开始值</span><br><span class="line">        end：结束值</span><br><span class="line">        <span class="keyword">var</span>：临时变量</span><br><span class="line">        step：步长</span><br><span class="line">        varStatus:循环对象</span><br><span class="line">            包含俩对象</span><br><span class="line">            index：容器中循环的索引，从<span class="number">0</span>开始</span><br><span class="line">            count：循环次数，从<span class="number">1</span>开始</span><br><span class="line"></span><br><span class="line">    <span class="number">2</span>，遍历容器</span><br><span class="line">    Lis&lt;User&gt; list;</span><br><span class="line">    <span class="keyword">for</span>(User user : list)&#123;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    --%&gt;</span><br><span class="line"></span><br><span class="line">    &lt;c:forEach begin=<span class="string">"1"</span> end=<span class="string">"10"</span> <span class="keyword">var</span>=<span class="string">"1"</span> step=<span class="string">"1"</span> varStatus=<span class="string">"s"</span>&gt;</span><br><span class="line">        $&#123;i&#125;&lt;br/&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr/&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    list.add(<span class="string">"aaa"</span>);</span><br><span class="line">    list.add(<span class="string">"bbb"</span>);</span><br><span class="line">    list.add(<span class="string">"ccc"</span>);</span><br><span class="line"></span><br><span class="line">    request.setAttribute(<span class="string">"list"</span>,list);</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">    &lt;c:forEach items=<span class="string">"$&#123;list&#125;"</span> <span class="keyword">var</span>=<span class="string">"str"</span> varStatus=<span class="string">"s"</span>&gt;</span><br><span class="line"></span><br><span class="line">        $&#123;s.index&#125; $&#123;s.count&#125; $&#123;str&#125;&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><h1 id="小案例"><a href="#小案例" class="headerlink" title="小案例"></a>小案例</h1><pre><code>需求：        在request域中有一个存有User对象的List集合。        需要使用jstl +el 将集合数据展示到JSP页面的表格table中</code></pre><p><img src="https://img-blog.csdnimg.cn/20200904212510245.png#pic_center" alt=""></p><p>JSP代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"com.web.domain.User"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.ArrayList"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.List"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.Date"</span> %&gt;&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: OldAZ-PC</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">9</span>/<span class="number">4</span></span><br><span class="line">  Time: <span class="number">21</span>:<span class="number">04</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;案例&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;%</span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="keyword">new</span> User(<span class="string">"张三"</span>,<span class="number">23</span>,<span class="keyword">new</span> Date()));</span><br><span class="line">        list.add(<span class="keyword">new</span> User(<span class="string">"李四"</span>,<span class="number">25</span>,<span class="keyword">new</span> Date()));</span><br><span class="line">        list.add(<span class="keyword">new</span> User(<span class="string">"王老五"</span>,<span class="number">26</span>,<span class="keyword">new</span> Date()));</span><br><span class="line">        request.setAttribute(<span class="string">"list"</span>,list);</span><br><span class="line"></span><br><span class="line">    %&gt;</span><br><span class="line"></span><br><span class="line">&lt;table border=<span class="string">"1px"</span> width=<span class="string">"500"</span> align=<span class="string">"center"</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;编号&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;姓名&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;年龄&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;日期&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">"$&#123;list&#125;"</span> <span class="keyword">var</span>=<span class="string">"user"</span> varStatus=<span class="string">"s"</span>&gt;</span><br><span class="line">        &lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;s.count%2==0&#125;"</span>&gt;</span><br><span class="line">        &lt;tr bgcolor=<span class="string">"#d2691e"</span>&gt;</span><br><span class="line">            &lt;td&gt;$&#123;s.count&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;user.name&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;user.age&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;user.birStr&#125;&lt;/td&gt;</span><br><span class="line">        &lt;/c:if&gt;</span><br><span class="line"></span><br><span class="line">        &lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;s.count%2!=0&#125;"</span>&gt;</span><br><span class="line">        &lt;tr bgcolor=<span class="string">"#00ffff"</span>&gt;</span><br><span class="line">            &lt;td&gt;$&#123;s.count&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;user.name&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;user.age&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;user.birStr&#125;&lt;/td&gt;</span><br><span class="line">        &lt;/c:if&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>User代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> OldAZ-PC</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//逻辑视图</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> age, Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBirStr</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (birthday != <span class="keyword">null</span>) &#123;</span><br><span class="line">            SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-mm-dd  HH:mm:ss"</span>);</span><br><span class="line">            <span class="keyword">return</span> sdf.format(birthday);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200904213132605.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;JavaServer Pages Tag Library   ：  JSP标准标签库
* 是由Apache组织提供的开源的免费的JSP标签&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;作用&quot;&gt;&lt;a href=&quot;#作用&quot; class=&quot;headerlink&quot; title=&quot;作用&quot;&gt;&lt;/a&gt;作用&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;用户简化和替换JSP页面上的Java代码&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="JavaEE" scheme="https://oldaz.github.io/tags/JavaEE/"/>
    
      <category term="JSTL" scheme="https://oldaz.github.io/tags/JSTL/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE页面显示技术之EL表达式</title>
    <link href="https://oldaz.github.io/2020/09/04/JavaEE%E9%A1%B5%E9%9D%A2%E6%98%BE%E7%A4%BA%E6%8A%80%E6%9C%AF%E4%B9%8BEL%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://oldaz.github.io/2020/09/04/JavaEE%E9%A1%B5%E9%9D%A2%E6%98%BE%E7%A4%BA%E6%8A%80%E6%9C%AF%E4%B9%8BEL%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2020-09-04T08:28:32.000Z</published>
    <updated>2020-09-04T08:29:09.997Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200904162743801.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>Expression Language 表达式语言</p><h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><p>替换和简化JSP页面中的Java代码的编写</p><a id="more"></a><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p>${表达式}</p><pre><code>注意：1. JSP页面中默认支持EL表达式2. 忽略EL表达式：设置jsp的Page指令中：isELIgnored=&quot;true&quot;3. 忽略单句EL表达式：加一个反斜线  \</code></pre><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol><li><p>运算</p><pre><code>1. 算数运算符： + - * /(div)  %(mod)2. 比较运算符： &gt;  &lt;   &gt;=  ==  !=3. 逻辑运算符： &amp;&amp;  ||   ！4. 空运算符：empty    功能：用于判断字符串，集合，数组对象是否 为null并且长度是否为0    ${empty list}：          判断是否为null或者长度为0    ${not empty list}:          判断是否不为null并且长度大于0</code></pre></li><li><p>获取值</p><pre><code>1. el表达式只能从域对象中获取值</code></pre><h1 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h1></li></ol><h2 id="1-域名称-键名"><a href="#1-域名称-键名" class="headerlink" title="1. $域名称.键名}"></a>1. $域名称.键名}</h2><pre><code>从指定的域中获取指键的值。    域名称：     1. PageScope      --&gt;   pageContext     2. requestScope   --&gt;  request     3. sessionScope   --&gt;  session     4. applicationScope --&gt; application(ServletContext)         举例：在request域中存储了name=张三        获取：$(request.name)</code></pre><p><img src="https://img-blog.csdnimg.cn/20200904095410773.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h2 id="2-键名"><a href="#2-键名" class="headerlink" title="2. ${键名}"></a>2. ${键名}</h2><p>表示依次从最小的域中查找是否有该键对应的值，直到找到为止。</p><p><img src="https://img-blog.csdnimg.cn/20200904100310100.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h2 id="3-获取对象"><a href="#3-获取对象" class="headerlink" title="3. 获取对象"></a>3. 获取对象</h2><p>获取LIst集合，Map集合的值</p><ol><li><p>对象：    </p><pre><code>${域对象.键名.属性名}    本质上是会去调用对象的getter方法 </code></pre></li><li><p>List集合：</p><pre><code>${域名.键名[索引]}    （EL中索引越界，不显示）</code></pre></li><li><p>Map集合：</p><pre><code>${域名称.键名.key名称}    ${域名称.键名[&quot;key名称&quot;]}    </code></pre></li></ol><h2 id="4-隐式对象"><a href="#4-隐式对象" class="headerlink" title="4. 隐式对象"></a>4. 隐式对象</h2><pre><code>pageContext:  获取jsp其他8个内置对象${pageContext.request.contextPath}:动态获取虚拟目录</code></pre><p>注：EL表达式一共有11个隐式对象</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200904162743801.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;p&gt;Expression Language 表达式语言&lt;/p&gt;
&lt;h1 id=&quot;作用&quot;&gt;&lt;a href=&quot;#作用&quot; class=&quot;headerlink&quot; title=&quot;作用&quot;&gt;&lt;/a&gt;作用&lt;/h1&gt;&lt;p&gt;替换和简化JSP页面中的Java代码的编写&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="JavaEE" scheme="https://oldaz.github.io/tags/JavaEE/"/>
    
      <category term="EL" scheme="https://oldaz.github.io/tags/EL/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE开发模式之MVC</title>
    <link href="https://oldaz.github.io/2020/09/04/JavaEE%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F%E4%B9%8BMVC/"/>
    <id>https://oldaz.github.io/2020/09/04/JavaEE%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F%E4%B9%8BMVC/</id>
    <published>2020-09-04T01:20:46.000Z</published>
    <updated>2020-09-04T01:21:26.784Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200904092017301.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="JSP演变史"><a href="#JSP演变史" class="headerlink" title="JSP演变史"></a>JSP演变史</h1><pre><code>1. 早期只有servlet，只能使用response输出标签数据，非常麻烦2. 后来有了JSP，简化的Servlet开发，如果过度使用JSP，在jsp中写了大量的Java代码，又写html表，造成维护困难，难于分工合作3. 再后来，Java的web开发，借鉴MVC开发模式，使得程序的设计更加合理性。</code></pre><a id="more"></a><h1 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h1><pre><code>1. M：model ，模型 （JavaBean）    *完成具体的业务2. V:view ,控制器  （JSP）    *展示数据3. C：Controller，控制器 （Servlet）    * 用户获取输入    * 调用模型    * 将数据交给视图进行展示</code></pre><p><img src="https://img-blog.csdnimg.cn/20200904090640849.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="MVC特点"><a href="#MVC特点" class="headerlink" title="MVC特点"></a>MVC特点</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>耦合性低，方便维护，利于分工合作。</li><li>重用性高<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2></li><li>使得项目架构变得复杂，对开发人员要求较高</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200904092017301.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;JSP演变史&quot;&gt;&lt;a href=&quot;#JSP演变史&quot; class=&quot;headerlink&quot; title=&quot;JSP演变史&quot;&gt;&lt;/a&gt;JSP演变史&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;1. 早期只有servlet，只能使用response输出标签数据，非常麻烦
2. 后来有了JSP，简化的Servlet开发，如果过度使用JSP，在jsp中写了大量的Java代码，又写html表，造成维护困难，难于分工合作
3. 再后来，Java的web开发，借鉴MVC开发模式，使得程序的设计更加合理性。&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="JavaEE" scheme="https://oldaz.github.io/tags/JavaEE/"/>
    
      <category term="MVC" scheme="https://oldaz.github.io/tags/MVC/"/>
    
  </entry>
  
  <entry>
    <title>Java EE页显示技术之JSP</title>
    <link href="https://oldaz.github.io/2020/09/04/Java-EE%E9%A1%B5%E6%98%BE%E7%A4%BA%E6%8A%80%E6%9C%AF%E4%B9%8BJSP/"/>
    <id>https://oldaz.github.io/2020/09/04/Java-EE%E9%A1%B5%E6%98%BE%E7%A4%BA%E6%8A%80%E6%9C%AF%E4%B9%8BJSP/</id>
    <published>2020-09-04T00:48:48.000Z</published>
    <updated>2020-09-04T01:21:13.076Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/2020090408471826.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h1><p>1.概念：</p><pre><code>* Java Server Pages:Java服务器页面    * 可以理解为一个特殊的页面，    * 其中既可以定义html标签，又可以定义java代码    用于简化书写</code></pre><a id="more"></a><p><img src="https://img-blog.csdnimg.cn/20200902091143184.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="概念"></p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p><img src="https://img-blog.csdnimg.cn/20200902091512601.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="原理"></p><ol><li>本质上一个Servlet</li></ol><h1 id="Jsp的脚本"><a href="#Jsp的脚本" class="headerlink" title="Jsp的脚本"></a>Jsp的脚本</h1><pre><code>Jsp定义Java代码的方式  1.  &lt;%| 代码%&gt; ：        定义的Java代码在Service方法中。        Servce方法中可以定义什么，该脚本中就可以定义什么 。  2.  &lt;%！ 代码%&gt;：         定义的java代码在JSP转换后的Java类的成员位置。        一般使用 安全问题  3.  &lt;%= 代码%&gt;：         定义Java代码，会输出在页面上。         输出语句可以定义什么，该脚本就可以定义什么。</code></pre><h1 id="Jsp的内置对象"><a href="#Jsp的内置对象" class="headerlink" title="Jsp的内置对象"></a>Jsp的内置对象</h1><pre><code>* 在JSP页面不需要获取和创建，可以直接使用的对象* JSP一共有九个内置对象。* 3个常用 ：        1. request        2. response         3. out :           字符的输出流，可以将数据输出到页面上。           和reponse.getWriter类似。           * 二者区别： 在Tomcat 服务器真正给客户端做出响应之前，                     会先找出response缓冲区数据，再找出out数据缓冲区数据。             response.getWriter()数据永远在out.write()之前。             尽量只用out输出。</code></pre><p><img src="https://img-blog.csdnimg.cn/20200902103835170.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="区别"></p><h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><pre><code>*作用：用于JSP页面，导入资源文件* 格式    &lt;% 指令名称 属性名称 属性名称1=属性值1 属性名称2=属性值2 .. %&gt;</code></pre><p>分类：<br>          1. page：配置JSP页面的</p><pre><code>*contentType：等同于response.setContentType()     1. 设置响应体的mime类型以及字符集     2. 设置当前JSP页面的编码（只能是高级的IDE才能生效，        如果使用低级工具，则需要设置pageEncoding属性设置当前页面的字符集）     *import：导包     * errorPage：当页面发生错误后跳转的页面。     * isErrorPage：标识当前页面是否为错误页面。       1. true：是，可以使用内置对象exception       2. false：否，默认值。不可以使用内置对象exception</code></pre><ol start="2"><li>include<pre><code>页面包含的。导入页面的资源文件</code></pre><img src="https://img-blog.csdnimg.cn/20200903232938742.png#pic_center" alt=""><br><img src="https://img-blog.csdnimg.cn/20200903233041508.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></li></ol><ol start="3"><li><p>taglib</p><pre><code>     导入资源（JSTL标签库）&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;  * rprefix:前缀，自定义的</code></pre></li></ol><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><ol><li><p>html注释： </p><pre><code>&lt;!--  --&gt;:只能注释html代码片段（会发送到页面，但是不解析）。</code></pre></li><li><p>JSP注释：推荐使用</p><pre><code>&lt;%--  --%&gt;:可以注释所有。（不会将注释内容发送到页面）</code></pre></li></ol><h1 id="所有内置对象"><a href="#所有内置对象" class="headerlink" title="所有内置对象"></a>所有内置对象</h1><p>在JSP页面中不需要创建，直接使用的对象</p><p>一共有九个：</p><table><thead><tr><th>变量名</th><th>真实类型</th><th>作用</th></tr></thead><tbody><tr><td>pageContext</td><td>pageContext</td><td>当前页面共享数据，获取其他8个内置对象</td></tr><tr><td>request</td><td>HttpServletRequest</td><td>一次请求访问多个资源（转发）</td></tr><tr><td>session</td><td>HttpSession</td><td>一次会话的多个请求</td></tr><tr><td>application</td><td>ServletContext</td><td>所有用户间共享数据</td></tr><tr><td>response</td><td>HttpServletResponse</td><td>响应对象</td></tr><tr><td>page</td><td>Object</td><td>当前页面的（Servlet）对象 this</td></tr><tr><td>out</td><td>JspWriter</td><td>输出对象，数据输出到页面上</td></tr><tr><td>config</td><td>SerletConfig</td><td>Servlet的配置对象</td></tr><tr><td>excepton</td><td>Throwable</td><td>异常对象</td></tr></tbody></table><p>后面五个为域对象</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/2020090408471826.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;JSP&quot;&gt;&lt;a href=&quot;#JSP&quot; class=&quot;headerlink&quot; title=&quot;JSP&quot;&gt;&lt;/a&gt;JSP&lt;/h1&gt;&lt;p&gt;1.概念：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* Java Server Pages:Java服务器页面
    * 可以理解为一个特殊的页面，
    * 其中既可以定义html标签，又可以定义java代码
    用于简化书写&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="JavaEE" scheme="https://oldaz.github.io/tags/JavaEE/"/>
    
      <category term="JSP" scheme="https://oldaz.github.io/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE会话技术之Session案例</title>
    <link href="https://oldaz.github.io/2020/09/03/JavaEE%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF%E4%B9%8BSession%E6%A1%88%E4%BE%8B/"/>
    <id>https://oldaz.github.io/2020/09/03/JavaEE%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF%E4%B9%8BSession%E6%A1%88%E4%BE%8B/</id>
    <published>2020-09-03T14:09:37.000Z</published>
    <updated>2020-09-03T14:18:04.619Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200903221657818.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="案例需求："><a href="#案例需求：" class="headerlink" title="案例需求："></a>案例需求：</h1><ol><li>访问带有验证码的登录页面login.jsp</li><li>用户输入用户户名和密码以及验证码。</li></ol><a id="more"></a><pre><code>* 如果用户名和密码输入有误，跳转登录页面，  提示用户名或者密码错误*如果验证码输入有误，跳转登录页面，  提示：验证码错误*如果输入全部正确，则转跳到主页success.jsp，  显示：用户名，欢迎您！</code></pre><h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><p><img src="https://img-blog.csdnimg.cn/20200903162342892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="分析"></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="验证码代码"><a href="#验证码代码" class="headerlink" title="验证码代码"></a>验证码代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/checkCodeServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckCodeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> width = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">int</span> height = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建一对象，在内存中图片(验证码图片对象)</span></span><br><span class="line">        BufferedImage image = <span class="keyword">new</span> BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.美化图片</span></span><br><span class="line">        <span class="comment">//2.1 填充背景色</span></span><br><span class="line">        Graphics g = image.getGraphics();<span class="comment">//画笔对象</span></span><br><span class="line">        g.setColor(Color.PINK);<span class="comment">//设置画笔颜色</span></span><br><span class="line">        g.fillRect(<span class="number">0</span>,<span class="number">0</span>,width,height);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.2画边框</span></span><br><span class="line">        g.setColor(Color.BLUE);</span><br><span class="line">        g.drawRect(<span class="number">0</span>,<span class="number">0</span>,width - <span class="number">1</span>,height - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        String str = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghigklmnopqrstuvwxyz0123456789"</span>;</span><br><span class="line">        <span class="comment">//生成随机角标</span></span><br><span class="line">        Random ran = <span class="keyword">new</span> Random();</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = ran.nextInt(str.length());</span><br><span class="line">            <span class="comment">//获取字符</span></span><br><span class="line">            <span class="keyword">char</span> ch = str.charAt(index);<span class="comment">//随机字符</span></span><br><span class="line">            sb.append(ch);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.3写验证码</span></span><br><span class="line">            g.drawString(ch+<span class="string">""</span>,width/<span class="number">5</span>*i,height/<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        String checkCode_session = sb.toString();</span><br><span class="line">        <span class="comment">//将验证码存入session</span></span><br><span class="line">        request.getSession().setAttribute(<span class="string">"checkCode_session"</span>,checkCode_session);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.4画干扰线</span></span><br><span class="line">        g.setColor(Color.GREEN);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//随机生成坐标点</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x1 = ran.nextInt(width);</span><br><span class="line">            <span class="keyword">int</span> x2 = ran.nextInt(width);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> y1 = ran.nextInt(height);</span><br><span class="line">            <span class="keyword">int</span> y2 = ran.nextInt(height);</span><br><span class="line">            g.drawLine(x1,y1,x2,y2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.将图片输出到页面展示</span></span><br><span class="line">        ImageIO.write(image,<span class="string">"jpg"</span>,response.getOutputStream());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="登陆代码"><a href="#登陆代码" class="headerlink" title="登陆代码"></a>登陆代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/loginServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">       <span class="comment">//1.设置request编码</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="comment">//2.获取Map参数</span></span><br><span class="line">        String username = request.getParameter(<span class="string">"username"</span>);</span><br><span class="line">        String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line">        String checkCode = request.getParameter(<span class="string">"checkCode"</span>);</span><br><span class="line">        <span class="comment">//先获取生成的验证码</span></span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        String checkCode_session = (String) session.getAttribute(<span class="string">"checkCode_session"</span>);</span><br><span class="line">        <span class="comment">//删除session中存储的验证码</span></span><br><span class="line">            session.removeAttribute(<span class="string">"checkCode_session"</span>);</span><br><span class="line">        <span class="comment">//3.判断验证码是否正确</span></span><br><span class="line">        <span class="keyword">if</span> (checkCode_session!= <span class="keyword">null</span>&amp;&amp;checkCode_session.equalsIgnoreCase(checkCode))&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//忽略大小写比较字符串</span></span><br><span class="line">            <span class="comment">//验证码正确</span></span><br><span class="line">            <span class="comment">//判断用户名和密码是否一致</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"zhansan"</span>.equals(username)&amp;&amp;<span class="string">"123"</span>.equals(password))&#123;</span><br><span class="line">                <span class="comment">//登陆成功</span></span><br><span class="line">                <span class="comment">//存储信息，用户信息</span></span><br><span class="line">                session.setAttribute(<span class="string">"user"</span>,username);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//重定向到success页面</span></span><br><span class="line"></span><br><span class="line">                response.sendRedirect(request.getContextPath()+<span class="string">"/success.jsp"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//登陆失败</span></span><br><span class="line">                <span class="comment">//储存提示信息到request</span></span><br><span class="line">                request.setAttribute(<span class="string">"login_error"</span>,<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">                <span class="comment">//转发到登录页面</span></span><br><span class="line">                request.getRequestDispatcher(<span class="string">"/login.jsp"</span>).forward(request,response);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//验证码不一致</span></span><br><span class="line">            <span class="comment">//储存提示信息到request</span></span><br><span class="line">            request.setAttribute(<span class="string">"cc_error"</span>,<span class="string">"验证码错误"</span>);</span><br><span class="line">            <span class="comment">//转发到登录页面</span></span><br><span class="line">            request.getRequestDispatcher(<span class="string">"/login.jsp"</span>).forward(request,response);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="登陆页面代码"><a href="#登陆页面代码" class="headerlink" title="登陆页面代码"></a>登陆页面代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%--</span></span></span><br><span class="line"><span class="tag">  <span class="attr">Created</span> <span class="attr">by</span> <span class="attr">IntelliJ</span> <span class="attr">IDEA.</span></span></span><br><span class="line"><span class="tag">  <span class="attr">User:</span> <span class="attr">OldAZ-PC</span></span></span><br><span class="line"><span class="tag">  <span class="attr">Date:</span> <span class="attr">2020</span>/<span class="attr">9</span>/<span class="attr">3</span></span></span><br><span class="line"><span class="tag">  <span class="attr">Time:</span> <span class="attr">16:30</span></span></span><br><span class="line"><span class="tag">  <span class="attr">To</span> <span class="attr">change</span> <span class="attr">this</span> <span class="attr">template</span> <span class="attr">use</span> <span class="attr">File</span> | <span class="attr">Settings</span> | <span class="attr">File</span> <span class="attr">Templates.</span></span></span><br><span class="line"><span class="tag"><span class="attr">--</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">"img"</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.src = <span class="string">"/4_Cookie_Session_war_exploded/checkCodeServlet?date="</span>+<span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div&#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"loginServlet"</span> <span class="attr">method</span>=<span class="string">"post"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">password</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>验证码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"checkCode"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span> &gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"/4_Cookie_Session_war_exploded/checkCodeServlet"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登录"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span> &gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">%=request.getAttribute("cc_error")==null?"":request.getAttribute("cc_error")%</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">%=request.getAttribute("login_error")==null?"":request.getAttribute("login_error")%</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="登录成功页面"><a href="#登录成功页面" class="headerlink" title="登录成功页面"></a>登录成功页面</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: OldAZ-PC</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">9</span>/<span class="number">3</span></span><br><span class="line">  Time: <span class="number">19</span>:<span class="number">05</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;&lt;%=request.getSession().getAttribute("user") %&gt;,欢迎您！！&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200903221657818.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;案例需求：&quot;&gt;&lt;a href=&quot;#案例需求：&quot; class=&quot;headerlink&quot; title=&quot;案例需求：&quot;&gt;&lt;/a&gt;案例需求：&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;访问带有验证码的登录页面login.jsp&lt;/li&gt;
&lt;li&gt;用户输入用户户名和密码以及验证码。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="Session" scheme="https://oldaz.github.io/tags/Session/"/>
    
      <category term="JavaEE" scheme="https://oldaz.github.io/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE会话技术之Session</title>
    <link href="https://oldaz.github.io/2020/09/03/JavaEE%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF%E4%B9%8BSession/"/>
    <id>https://oldaz.github.io/2020/09/03/JavaEE%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF%E4%B9%8BSession/</id>
    <published>2020-09-03T04:23:18.000Z</published>
    <updated>2020-09-03T14:15:14.045Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/202009031222016.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><pre><code>服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端的对象中。Httpsession</code></pre><a id="more"></a><h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><pre><code>1. 获取Httpsession对象：     HttpSession session = request.getSession();2. 使用Httpsession对象：    object  getAttribute(String name)    void  setAttribute(String name,Object value)    void  removeAttribute(String name)</code></pre><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><pre><code>Session的实现是依赖于Cookie的。</code></pre><p><img src="https://img-blog.csdnimg.cn/20200903101153442.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="原理"></p><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><ol><li><p>当客户端关闭后，服务器不关闭，两次获取的Session是否为同一个？</p><pre><code>默认情况下，不是。* 如果需要相同，则可以创建Cookie，键为JSESSIONID，设置最大存活时间，让Cookie持久化保存。</code></pre></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"JSESSIONID"</span>,session.getId());</span><br><span class="line">cookie.setMaxAge(<span class="number">60</span>*<span class="number">60</span>);</span><br><span class="line">response.addCookie(cookie);</span><br></pre></td></tr></table></figure><ol start="2"><li><p>客户端不关闭，两次获取的session是同一个吗？</p><pre><code>不是同一个，但是要确保数据不丢失。   1. session钝化         在服务器正常关闭之前，将seesion对象序列化到硬盘上。（在tomcat的项目里面的work目录下）   2. session活化       在服务器启动后，将session 文件转化为session对象即可。       （IDEA中实现不了活化，因为在启动服务器的过程中，会先删除work目录，       再创建，上一次的session数据会被删除。无法读取活化）</code></pre></li></ol><p><strong><em>不过本地的Tomcat已经实现了这个过程，以后部署项目时不用考虑这个问题。</em></strong></p><ol start="3"><li>Session的什么时候被销毁？<ol><li>服务器被关闭。</li><li>session对象调用invalidate()。</li><li>session默认失效时间为30分钟。</li></ol></li></ol><pre><code>在所有项目的配置文件web.xml 就可以修改默认的失效时间</code></pre><p><img src="https://img-blog.csdnimg.cn/20200903121013194.png#pic_center" alt="失效时间"></p><h1 id="Session特点"><a href="#Session特点" class="headerlink" title="Session特点"></a>Session特点</h1><ol><li><p>session 用于储存一次会话的多次请求的数据，存在服务器端。</p></li><li><p>session 可以存储任意类型，任意大小的数据。</p></li><li><p>session和cokie的区别：</p><pre><code>1. session存储在服务器端，Cookie在客户端。2. seesion没有数据大小的限制，cookie有3. session数据安全，Cookie相对不安全。</code></pre></li></ol><p>注：session的体量会大一些，Cookie小一些。可以从翻译理解，session翻译为主菜，cookie翻译为小饼干！！！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/202009031222016.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;服务器端会话技术，在一次会话的多次请求间共享数据，
将数据保存在服务器端的对象中。Httpsession&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="Session" scheme="https://oldaz.github.io/tags/Session/"/>
    
      <category term="JavaEE" scheme="https://oldaz.github.io/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE会话技术之cookie案例</title>
    <link href="https://oldaz.github.io/2020/08/28/JavaEE%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF%E4%B9%8Bcookie%E6%A1%88%E4%BE%8B/"/>
    <id>https://oldaz.github.io/2020/08/28/JavaEE%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF%E4%B9%8Bcookie%E6%A1%88%E4%BE%8B/</id>
    <published>2020-08-28T10:42:44.000Z</published>
    <updated>2020-09-03T04:24:41.803Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200828183545603.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><pre><code>1.  访问一个servlet，如果第一次访问，则提示：您好！欢迎首次访问2. 如果不是第一次访问，则提示：欢迎回来，您上次到访时间为：显示时间字符串</code></pre><a id="more"></a><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><pre><code>1.  可以采用cookie完成2. 在服务器中的servlet判断是否有一个名字为lastTime的cookie    1. 有：不是第一次访问        1. 响应数据：欢迎回来，您上次的访问时间为：时间        2.  写回cookie：lastTime=时间    2. 没有：是第一次访问        1. 响应数据：您好，欢迎首次访问        2. 写回cookie：lastTime=时间</code></pre><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p><img src="https://img-blog.csdnimg.cn/20200828182648435.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><p><img src="https://img-blog.csdnimg.cn/20200828183054423.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.cookie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLDecoder;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*1.  可以采用cookie完成</span></span><br><span class="line"><span class="comment">            2. 在服务器中的servlet判断是否有一个名字为lastTime的cookie</span></span><br><span class="line"><span class="comment">            1. 有：不是第一次访问</span></span><br><span class="line"><span class="comment">            1. 响应数据：欢迎回来，您上次的访问时间为：时间</span></span><br><span class="line"><span class="comment">            2.  写回cookie：lastTime=时间</span></span><br><span class="line"><span class="comment">            2. 没有：是第一次访问</span></span><br><span class="line"><span class="comment">            1. 响应数据：您好，欢迎首次访问</span></span><br><span class="line"><span class="comment">            2. 写回cookie：lastTime=时间</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> OldAZ-PC</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(urlPatterns = <span class="string">"/CookieTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieTest</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">  <span class="comment">//设置响应消息体的数据格式</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取所有的cookie</span></span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        Boolean flag = <span class="keyword">false</span>;    <span class="comment">//没有cookie为last time</span></span><br><span class="line">        <span class="comment">//2.遍历数组</span></span><br><span class="line">        <span class="keyword">if</span> (cookies != <span class="keyword">null</span>&amp;&amp; cookies.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">                <span class="comment">//3.获取cookie的名称</span></span><br><span class="line">                String name = cookie.getName();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"lastTime"</span>.equals(name))&#123;</span><br><span class="line">                    <span class="comment">//有该cookie，表示不是第一次访问</span></span><br><span class="line">                    flag = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="comment">//设置cookie的value</span></span><br><span class="line">                    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">                    SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日  HH:mm:ss"</span>);</span><br><span class="line">                    String str_date = sdf.format(date);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    System.out.println(<span class="string">"编码前："</span>+str_date);</span><br><span class="line">                    str_date = URLEncoder.encode(str_date, <span class="string">"utf-8"</span>);</span><br><span class="line">                    System.out.println(<span class="string">"编码后："</span>+str_date);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    cookie.setValue(str_date);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//设置cookie的存活时间</span></span><br><span class="line">                    cookie.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>);<span class="comment">//一个月</span></span><br><span class="line">                    response.addCookie(cookie);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//响应数据</span></span><br><span class="line">                    <span class="comment">//获取cookie的value，时间</span></span><br><span class="line">                    String value = cookie.getValue();</span><br><span class="line">                    System.out.println(<span class="string">"解码前："</span>+value);</span><br><span class="line">                    value = URLDecoder.decode(value,<span class="string">"utf-8"</span>);</span><br><span class="line">                    System.out.println(<span class="string">"解码后："</span>+value);</span><br><span class="line">                    response.getWriter().write(<span class="string">"&lt;h1&gt;欢迎回来，您上次的访问时间为："</span>+value+<span class="string">"&lt;/h1&gt;"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (cookies==<span class="keyword">null</span> || cookies.length==<span class="number">0</span>||flag==<span class="keyword">false</span>)&#123;</span><br><span class="line">            <span class="comment">//没有，第一次访问</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//设置cookie的value</span></span><br><span class="line">            Date date = <span class="keyword">new</span> Date();</span><br><span class="line">            SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日  HH:mm:ss"</span>);</span><br><span class="line">            String str_date = sdf.format(date);</span><br><span class="line">            str_date = URLEncoder.encode(str_date, <span class="string">"utf-8"</span>);</span><br><span class="line">            Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"lastTime"</span>,str_date);</span><br><span class="line">            <span class="comment">//设置cookie的存活时间</span></span><br><span class="line">            cookie.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>);  <span class="comment">//一个月</span></span><br><span class="line">            response.addCookie(cookie);</span><br><span class="line"></span><br><span class="line">            response.getWriter().write(<span class="string">"&lt;h1&gt;您好，欢迎首次访问&lt;/h1&gt;"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200828183545603.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;1.  访问一个servlet，如果第一次访问，则提示：您好！欢迎首次访问
2. 如果不是第一次访问，则提示：欢迎回来，您上次到访时间为：显示时间字符串&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="JavaEE" scheme="https://oldaz.github.io/tags/JavaEE/"/>
    
      <category term="Cookie" scheme="https://oldaz.github.io/tags/Cookie/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE会话技术之Cookie</title>
    <link href="https://oldaz.github.io/2020/08/28/JavaEE%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF%E4%B9%8BCookie/"/>
    <id>https://oldaz.github.io/2020/08/28/JavaEE%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF%E4%B9%8BCookie/</id>
    <published>2020-08-28T10:41:39.000Z</published>
    <updated>2020-09-03T04:23:59.226Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200828184012478.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><pre><code>一次会话包含多次请求和响应。一次会话：浏览器第一次给服务器资源发送请求，会话建立，直到有一方断开为止。</code></pre><a id="more"></a><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><pre><code>在一次会话范围内的多次请求间，共享数据</code></pre><h2 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h2><pre><code>1.客户端会话技术：        Cookie2.服务器端会话技术:        Session</code></pre><h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><pre><code>客户端会话技术，将 数据保存到客户端</code></pre><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><pre><code>1. 创建Cookie对象，绑定数据    * new Cookie(String name,String value)2. 发送Cookie对象    *response.addCookie(Cookie cookie)</code></pre><p><img src="https://img-blog.csdnimg.cn/20200828160938959.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><pre><code>3. 获取Cookie，拿到数据    *Cookie[]   request.getCookies()</code></pre><p><img src="https://img-blog.csdnimg.cn/20200828161043635.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><p>*在同一个浏览器先访问CookieDemo1，再访问CookieDemo2控制台打印数据。<br><img src="https://img-blog.csdnimg.cn/20200828161216201.png#pic_center" alt=""></p><ul><li>若是在一个浏览器访问CookieDemo1后，在另一个不同的浏览器访问CookieDemo2.控制台不会输出数据。</li></ul><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>基于响应头set-cookie和请求头cookie实现：<br><img src="https://img-blog.csdnimg.cn/20200828161716529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h2 id="Cookie的细节"><a href="#Cookie的细节" class="headerlink" title="Cookie的细节"></a>Cookie的细节</h2><ol><li><p>一次可不可以发送多个cookie？</p><pre><code>*可以可以创建多个Cookie对象，使用response调用多次addCookie方法发送cookie 即可。</code></pre></li><li><p>cookie可以在浏览器中保存多长时间？</p><pre><code>1. 默认情况下，当浏览器被关闭后，cookie数据被销毁。2. 持久化的存储：    * setMaxAge(int seconds)       1. 正数：将cookie数据写到硬盘文件中，持久化储存。secons表示存活时间。       2. 负数：默认值       3. 零：删除cookie信息</code></pre></li><li><p>cookie能不能存中文？</p><pre><code>*在tomcat 8之前，cookie中不能直接储存中文数据    需要将中文数据转码--一般采用URL编码（%）*在tomcat 8之后，cookie支持储存中文数据</code></pre></li><li><p>cookie获取的范围是多大？</p><pre><code>1. 假设在同一个tomcat服务器中，部署了多个web项目，  那么这些web项目中cookie能不能共享？-默认情况下cookie不能共享-由setPath(String path):设置cookie的获取范围，默认情况下为当前虚拟目录。-如果要共享则可以将path设置为&quot;/&quot;2.在不同的tomcat服务器间的cookie 共享问题？    setDomain(String path):如果设置一级域名相同，则多个服务器之间cookie可以共享    *setDomain(&quot;.baidu.coom&quot;),那么tieba.baidu.com和news.baidu.com的cookie可以共享</code></pre></li></ol><h2 id="Cookie的特点和作用"><a href="#Cookie的特点和作用" class="headerlink" title="Cookie的特点和作用"></a>Cookie的特点和作用</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><pre><code>1. cookie存储数据在客户端浏览器2. 浏览器对于单个cookie的大小有限制（4kb）    以及对同一个域名下的cookie数量也有限制 （20个）</code></pre><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><pre><code>1. cookie一般用于存储少了的不太敏感的数据2. 在不登录的情况下，完成服务器对客户端的身份识别</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200828184012478.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;h2 id=&quot;会话&quot;&gt;&lt;a href=&quot;#会话&quot; class=&quot;headerlink&quot; title=&quot;会话&quot;&gt;&lt;/a&gt;会话&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;一次会话包含多次请求和响应。

一次会话：浏览器第一次给服务器资源发送请求，会话建立，直到有一方断开为止。&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="JavaEE" scheme="https://oldaz.github.io/tags/JavaEE/"/>
    
      <category term="Cookie" scheme="https://oldaz.github.io/tags/Cookie/"/>
    
  </entry>
  
  <entry>
    <title>HTTP协议之文件下载案例</title>
    <link href="https://oldaz.github.io/2020/08/28/HTTP%E5%8D%8F%E8%AE%AE%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E6%A1%88%E4%BE%8B/"/>
    <id>https://oldaz.github.io/2020/08/28/HTTP%E5%8D%8F%E8%AE%AE%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E6%A1%88%E4%BE%8B/</id>
    <published>2020-08-28T03:04:05.000Z</published>
    <updated>2020-08-28T03:05:31.389Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200828110158673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="文件下载需求："><a href="#文件下载需求：" class="headerlink" title="文件下载需求："></a>文件下载需求：</h1><pre><code>1. 页面显示超链接2. 点击超链接后弹出下载提示框3. 完成图片文件下载</code></pre><a id="more"></a><p><img src="https://img-blog.csdnimg.cn/20200828105902762.png#pic_center" alt=""><br><img src="https://img-blog.csdnimg.cn/20200828105931876.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h1><pre><code>1. 超链接指向的资源如果能够被浏览器解析，则在浏览器中展示，如果不能解析，则弹出下载提示框。不满足需求。2. 任何资源都必须弹出下载提示框。3. 使用响应头设置资源的打开方式：    *content-disposition：attename；filename=xxx;</code></pre><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><pre><code>1.  定义页面，编辑超链接href属性，属性值指向Servlet，    传递资源名称filename2.  定义Servlet    1. 获取文件的名称    2. 使用字节输入流去加载文件进去内存（涉及真实路径）    3. 指定response响应头：        *content-disposition：attename；filename=xxx;    4. 将数据写出到response输出流即可</code></pre><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>中文文件名的问题</p><p>解决思路：</p><pre><code>1. 获取客户端浏览器使用的版本信息2. 根据不同的版本信息，我们设置filename的编码方式不同</code></pre><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p><img src="https://img-blog.csdnimg.cn/20200828105613647.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="DownloadServlet"><a href="#DownloadServlet" class="headerlink" title="DownloadServlet"></a>DownloadServlet</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.download;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.web.utils.DownLoadUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(urlPatterns = <span class="string">"/downLoad"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//1.获取请求参数，文件文名称</span></span><br><span class="line">        String filename = request.getParameter(<span class="string">"filename"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.使用字节输出流加载进去内存</span></span><br><span class="line">            <span class="comment">//2.1找到文件服务器路径</span></span><br><span class="line">        ServletContext servletContext = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        String realPath = servletContext.getRealPath(<span class="string">"/img/"</span>+filename);</span><br><span class="line">            <span class="comment">//2.2用字节流关联</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.设置response的响应头</span></span><br><span class="line">        <span class="comment">//3.1设置响应头类型content-type</span></span><br><span class="line">                <span class="comment">//获取文件的mime类型</span></span><br><span class="line">        String mimeType = servletContext.getMimeType(filename);</span><br><span class="line">        response.setHeader(<span class="string">"content-type"</span>,mimeType);</span><br><span class="line">        <span class="comment">//设置头响应打开方式:content-disposition</span></span><br><span class="line">        <span class="comment">//3.2解决中文文件问题</span></span><br><span class="line">            <span class="comment">//1.获取user-agent请求头</span></span><br><span class="line">        String agent = request.getHeader(<span class="string">"user-agent"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.使用工具类方法编码文件名即可</span></span><br><span class="line">        filename = DownLoadUtils.getFileName(agent, filename);</span><br><span class="line">        response.setHeader(<span class="string">"content-disposition"</span>,<span class="string">"attachment;filename="</span>+filename);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.将输入流的数据写出到输出流中</span></span><br><span class="line">        ServletOutputStream sos = response.getOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">8</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((len=fis.read(buff))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            sos.write(buff,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中文编码类"><a href="#中文编码类" class="headerlink" title="中文编码类"></a>中文编码类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.misc.BASE64Encoder;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownLoadUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getFileName</span><span class="params">(String agent, String filename)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (agent.contains(<span class="string">"MSIE"</span>)) &#123;</span><br><span class="line">            <span class="comment">// IE浏览器</span></span><br><span class="line">            filename = URLEncoder.encode(filename, <span class="string">"utf-8"</span>);</span><br><span class="line">            filename = filename.replace(<span class="string">"+"</span>, <span class="string">" "</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (agent.contains(<span class="string">"Firefox"</span>)) &#123;</span><br><span class="line">            <span class="comment">// 火狐浏览器</span></span><br><span class="line">            BASE64Encoder base64Encoder = <span class="keyword">new</span> BASE64Encoder();</span><br><span class="line">            filename = <span class="string">"=?utf-8?B?"</span> + base64Encoder.encode(filename.getBytes(<span class="string">"utf-8"</span>)) + <span class="string">"?="</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 其它浏览器</span></span><br><span class="line">            filename = URLEncoder.encode(filename, <span class="string">"utf-8"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> filename;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="下载HTML页面"><a href="#下载HTML页面" class="headerlink" title="下载HTML页面"></a>下载HTML页面</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/3_response_war_exploded/img/1.jpg"</span>&gt;</span>图片1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/3_response_war_exploded/img/2.jpg"</span>&gt;</span>图片2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/3_response_war_exploded/downLoad?filename=1.jpg"</span>&gt;</span>图片1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/3_response_war_exploded/downLoad?filename=九尾.jpg"</span>&gt;</span>图片1（中文）<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/3_response_war_exploded/downLoad?filename=2.jpg"</span>&gt;</span>图片2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200828110158673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;文件下载需求：&quot;&gt;&lt;a href=&quot;#文件下载需求：&quot; class=&quot;headerlink&quot; title=&quot;文件下载需求：&quot;&gt;&lt;/a&gt;文件下载需求：&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;1. 页面显示超链接
2. 点击超链接后弹出下载提示框
3. 完成图片文件下载&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="HTTP" scheme="https://oldaz.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>HTTP协议之ServletContent对象</title>
    <link href="https://oldaz.github.io/2020/08/26/HTTP%E5%8D%8F%E8%AE%AE%E4%B9%8BServletContent%E5%AF%B9%E8%B1%A1/"/>
    <id>https://oldaz.github.io/2020/08/26/HTTP%E5%8D%8F%E8%AE%AE%E4%B9%8BServletContent%E5%AF%B9%E8%B1%A1/</id>
    <published>2020-08-26T09:49:26.000Z</published>
    <updated>2020-08-26T09:50:12.282Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200826174813647.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><pre><code>代表整个web应用，可以和程序的容器（服务器）来通讯</code></pre><a id="more"></a><h1 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h1><p>1.通过request对象获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.getServletContext();</span><br></pre></td></tr></table></figure><p>2.通过HttpServlet来获取 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.getServletContext();</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200826170922826.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><h2 id="1-获取MIME类型（互联网中文件的类型）"><a href="#1-获取MIME类型（互联网中文件的类型）" class="headerlink" title="1.获取MIME类型（互联网中文件的类型）"></a>1.获取MIME类型（互联网中文件的类型）</h2><pre><code>*MIME类型：在互联网通讯过程中定义的一种文件数据类型    *格式： 大类型/小类型   text/html     image/jpg</code></pre><p><img src="https://img-blog.csdnimg.cn/2020082617103990.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="2-域对象：共享数据"><a href="#2-域对象：共享数据" class="headerlink" title="2.域对象：共享数据"></a>2.域对象：共享数据</h2><pre><code>方法：1.setAttribute(String name,Object value)2.getAttribute(String name)3.removeAttribute(String name)范围*ServletContext对象范围：        所有用户请求的数据声明周期长，慎用，否则导致内存压力。</code></pre><h2 id="3-获取文件的真实（服务器路径）路径"><a href="#3-获取文件的真实（服务器路径）路径" class="headerlink" title="3.获取文件的真实（服务器路径）路径"></a>3.获取文件的真实（服务器路径）路径</h2><pre><code>1. 方法： String getRealPath(&quot;&quot;);</code></pre><p><img src="https://img-blog.csdnimg.cn/20200826174234185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200826174813647.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;代表整个web应用，可以和程序的容器（服务器）来通讯&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="HTTP" scheme="https://oldaz.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>HTTP协议之response对象</title>
    <link href="https://oldaz.github.io/2020/08/25/HTTP%E5%8D%8F%E8%AE%AE%E4%B9%8Bresponse%E5%AF%B9%E8%B1%A1/"/>
    <id>https://oldaz.github.io/2020/08/25/HTTP%E5%8D%8F%E8%AE%AE%E4%B9%8Bresponse%E5%AF%B9%E8%B1%A1/</id>
    <published>2020-08-25T03:55:27.000Z</published>
    <updated>2020-08-26T09:52:59.160Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200825115228784.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><pre><code>设置响应消息1. 设置响应行        1. 格式：HTTP/1.1  200    ok        2. 设置状态码： setStatic(int sc)</code></pre>  <a id="more"></a><pre><code>2. 设置相应头    setHeader(String name,String value)3. 设置响应体   使用步骤：           1. 获取输出流                   * 字符输出流：PrintWriter getWriter()                   * 字节输出流: ServletOutputStream getOutStream()           2. 使用输出流，将数据输出到客户端浏览器</code></pre><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><h2 id="完成重定向"><a href="#完成重定向" class="headerlink" title="完成重定向"></a>完成重定向</h2><h3 id="资源跳转的方式。"><a href="#资源跳转的方式。" class="headerlink" title="资源跳转的方式。"></a>资源跳转的方式。</h3><p><img src="https://img-blog.csdnimg.cn/202008191254267.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="重定向"></p><h3 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h3><p>这是第一个访问的Servlet    (/rd1)<br><img src="https://img-blog.csdnimg.cn/20200819131405171.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这是第二个Servlet    (/rd2)  重定向来的<br><img src="https://img-blog.csdnimg.cn/20200819131610498.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""><br>这是运行结果：<br><img src="https://img-blog.csdnimg.cn/20200819131657732.png#pic_center" alt=""></p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><pre><code>转发特点：foward    1. 转发地址栏路径不变    2. 转发只能访问当前服务器下的资源    3. 转发是一次请求，可以使用request对象来共享数据重定向特点：redirect    1. 转发地址栏路径发生变化    2. 转发可以访问其他站点（服务器）的资源    3. 转发是两次请求，不能使用request来共享数据</code></pre><h2 id="路径的写法"><a href="#路径的写法" class="headerlink" title="路径的写法"></a>路径的写法</h2><ol><li><p>路径的分类</p><ol><li><p>相对路径</p><pre><code>不能确定唯一资源如：./index.html规则：找到当前资源和目标资源的相对位置关系    ./:当前目录   ../:后退一级目录</code></pre></li><li><p>绝对路径</p><pre><code>可以确定唯一的资源*如：http://localhost:8080/3_response_war_exploded/rd2*以/开头：/3_response_war_exploded/rd2规则：判断路径给谁用，判断请求从哪儿发出    *给客户端使用：需要加虚拟目录（项目的访问路径）       *建议虚拟目录动态获取：request.getContextPath()       *&lt;a&gt;,&lt;form&gt; 重定向...    *给服务器使用，不需要加虚拟目录      * 转发路径</code></pre></li></ol></li></ol><h2 id="服务器输出字符数据到浏览器"><a href="#服务器输出字符数据到浏览器" class="headerlink" title="服务器输出字符数据到浏览器"></a>服务器输出字符数据到浏览器</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>获取字符输出流</li><li>输出数据</li><li>注意：</li></ol><pre><code>    乱码问题：1. PrintWriter pw = response.getWriter();2. 设置该流的默认编码3. 告诉浏览器，响应体用的编码</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单的形式，设置编码，在获取响应流之前设置</span></span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br></pre></td></tr></table></figure><ol start="4"><li>代码：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(urlPatterns = <span class="string">"/rd3"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseDemo3</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">     <span class="comment">//获取流对象之前，设置流的默认编码：ISO -8859-1  设置为GBK</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//1.获取字符输出流</span></span><br><span class="line">        PrintWriter pw = response.getWriter();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.输出数据</span></span><br><span class="line">        pw.write(<span class="string">"&lt;h1&gt;hello response&lt;h1&gt;"</span>);</span><br><span class="line">        pw.write(<span class="string">"你好 response"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="服务器输出字节数据到浏览器"><a href="#服务器输出字节数据到浏览器" class="headerlink" title="服务器输出字节数据到浏览器"></a>服务器输出字节数据到浏览器</h2><p>步骤：</p><pre><code>1.  获取字节输出流2.  输出数据</code></pre><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> OldAZ-PC</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(urlPatterns = <span class="string">"/rd4"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseDemo4</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">     <span class="comment">//获取流对象之前，设置流的默认编码：ISO -8859-1  设置为GBK</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取字节输出流</span></span><br><span class="line">        ServletOutputStream sos = response.getOutputStream();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.输出数据</span></span><br><span class="line">        sos.write(<span class="string">"hello"</span>.getBytes());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h2><pre><code>1. 本质：图片2. 目的：防止恶意表单注册      注：以后写的话  ，几乎都是在网上找美观的代码。自己改！！！</code></pre><p>代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> OldAZ-PC</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(urlPatterns = <span class="string">"/rd5"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseDemo5</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">     <span class="comment">//获取流对象之前，设置流的默认编码：ISO -8859-1  设置为GBK</span></span><br><span class="line">       <span class="comment">// response.setContentType("text/html;charset=UTF-8");</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> width = <span class="number">100</span>;</span><br><span class="line">            <span class="keyword">int</span> height = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建一个对象，在内存中图片（验证码图片对象）</span></span><br><span class="line">        BufferedImage image = <span class="keyword">new</span> BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.美化图片</span></span><br><span class="line">        <span class="comment">//2.1 填充背景色</span></span><br><span class="line">        Graphics g = image.getGraphics();  <span class="comment">//画笔对象</span></span><br><span class="line"></span><br><span class="line">        g.setColor(Color.pink);  <span class="comment">//设置画笔颜色</span></span><br><span class="line">        g.fillRect(<span class="number">0</span>,<span class="number">0</span>,width,height);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.2 画边框</span></span><br><span class="line">        g.setColor(Color.blue);</span><br><span class="line">        g.drawRect(<span class="number">0</span>,<span class="number">0</span>,width-<span class="number">1</span>,height-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        String str = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"</span>;</span><br><span class="line">        <span class="comment">//生成随机角标</span></span><br><span class="line">        Random ran = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;<span class="number">5</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = ran.nextInt(str.length());</span><br><span class="line">            <span class="comment">//获取字符</span></span><br><span class="line">            <span class="keyword">char</span> ch = str.charAt(index);<span class="comment">//随机字符</span></span><br><span class="line">            <span class="comment">//2.3写验证码</span></span><br><span class="line">            g.drawString(ch+<span class="string">""</span>,width/<span class="number">5</span>*i,height/<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.4画干扰线</span></span><br><span class="line">        g.setColor(Color.green);</span><br><span class="line">        <span class="comment">//随机生成坐标点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">10</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x1 = ran.nextInt(width);</span><br><span class="line">            <span class="keyword">int</span> x2 = ran.nextInt(width);</span><br><span class="line">            <span class="keyword">int</span> y1 = ran.nextInt(height);</span><br><span class="line">            <span class="keyword">int</span> y2 = ran.nextInt(height);</span><br><span class="line"></span><br><span class="line">            g.drawLine(x1,y1,x2,y2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.将图片展示到页面</span></span><br><span class="line">        ImageIO.write(image,<span class="string">"jpg"</span>,response.getOutputStream());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HTML页面代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"checkCode"</span> <span class="attr">src</span>=<span class="string">"/3_response_war_exploded/rd5"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"change"</span> <span class="attr">herf</span>=<span class="string">""</span>&gt;</span>看不清，换一张？<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">/*</span><br><span class="line">    分析：</span><br><span class="line">      点击超链接或者图片，需要换一张</span><br><span class="line">    1. 给超链接或者图片绑定单击事件</span><br><span class="line">    2.重新设置图片的SRC属性值</span><br><span class="line">*/</span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//1.获取图片对象</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> img = <span class="built_in">document</span>.getElementById(<span class="string">"checkCode"</span>);</span></span><br><span class="line"><span class="actionscript">        img.onclick=<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//时间戳</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            img.src = <span class="string">"/3_response_war_exploded/rd5?"</span>+date;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> img2 = <span class="built_in">document</span>.getElementById(<span class="string">"change"</span>);</span></span><br><span class="line"><span class="actionscript">        img2.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//时间戳</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            img.src = <span class="string">"/3_response_war_exploded/rd5?"</span>+date;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200825115228784.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;功能&quot;&gt;&lt;a href=&quot;#功能&quot; class=&quot;headerlink&quot; title=&quot;功能&quot;&gt;&lt;/a&gt;功能&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;设置响应消息

1. 设置响应行
        1. 格式：HTTP/1.1  200    ok
        2. 设置状态码： setStatic(int sc)&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="HTTP" scheme="https://oldaz.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>速解HTTP协议之响应消息</title>
    <link href="https://oldaz.github.io/2020/08/19/HTTP%E5%8D%8F%E8%AE%AE%E4%B9%8B%E5%93%8D%E5%BA%94%E6%B6%88%E6%81%AF/"/>
    <id>https://oldaz.github.io/2020/08/19/HTTP%E5%8D%8F%E8%AE%AE%E4%B9%8B%E5%93%8D%E5%BA%94%E6%B6%88%E6%81%AF/</id>
    <published>2020-08-19T04:09:43.000Z</published>
    <updated>2020-08-19T04:11:58.647Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200819120809472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="相应消息"></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><ol><li><p>请求消息： 客户端发送给服务端的数据<br> *数据格式：</p><pre><code>1. 请求行2. 请求头3. 请求空行4. 请求体</code></pre><ol start="2"><li><p>响应消息：服务器端发送给客户端的数据<br>   *数据格式</p>   <a id="more"></a> <ol><li><p>响应行</p><pre><code>1. 组成：  协议/版本  响应状态码   状态码描述2. 响应的状态码:     服务器告诉客户端浏览器本次请求和响应的一个状态。    1. 状态码都是三位数字。    2. 分类：</code></pre><ol><li>1xx :<pre><code>服务器接收客户端消息， 但没有接收完成，等待一段时间后， 发送1xx多状态码</code></pre></li><li>2xx ：<pre><code>成功。代表200    </code></pre></li><li>3xx：<pre><code>重定向。代表:302（重定向），304（访问缓存）</code></pre></li><li>4xx：<pre><code>代表客户端错误。   代表：      1. 404（请求路径没有对应的资源）      2. 405 （请求方式没有对应的doxxx方法）</code></pre></li><li>5xx：<pre><code>代表服务器端错误。代表：500（服务器异常）</code></pre></li></ol></li><li><p>响应头</p><pre><code>1. 格式：  头名称   ：  值2. 常见的响应头：    1. Content-Type: 服务器告诉客户端本次响应的数据格式以及编码格式。    2. Content-disposition：服务器告诉客户端以什么格式打开响应体数据：        *值：             *in-line：默认值，在当前页面打开             *attachment；filename=xxx：以附件形式打开响应体。文件下载</code></pre></li><li><p>响应空行</p></li><li><p>响应体：传输的数据。</p></li></ol></li></ol></li></ol><pre><code>HTTP/1.1 200 OKContent-Type: text/html;charset=utf-8Cache-Control: privateCache-Lenght: 101Date:wed,19 Aug 2020  11:00 GMT&lt;html&gt;  &lt;head&gt;    &lt;title&gt;$Title$&lt;/title&gt;  &lt;/head&gt;    &lt;body&gt;        hello,response!      &lt;/body&gt;&lt;/html&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200819120809472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;相应消息&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;请求消息： 客户端发送给服务端的数据&lt;br&gt; *数据格式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 请求行
2. 请求头
3. 请求空行
4. 请求体&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;p&gt;响应消息：服务器端发送给客户端的数据&lt;br&gt;   *数据格式&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="HTTP" scheme="https://oldaz.github.io/tags/HTTP/"/>
    
      <category term="快速入门" scheme="https://oldaz.github.io/tags/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
</feed>
