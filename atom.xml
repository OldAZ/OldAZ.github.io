<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr.AZ</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://oldaz.github.io/"/>
  <updated>2020-09-04T08:29:09.997Z</updated>
  <id>https://oldaz.github.io/</id>
  
  <author>
    <name>Mr.AZ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaEE页面显示技术之EL表达式</title>
    <link href="https://oldaz.github.io/2020/09/04/JavaEE%E9%A1%B5%E9%9D%A2%E6%98%BE%E7%A4%BA%E6%8A%80%E6%9C%AF%E4%B9%8BEL%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://oldaz.github.io/2020/09/04/JavaEE%E9%A1%B5%E9%9D%A2%E6%98%BE%E7%A4%BA%E6%8A%80%E6%9C%AF%E4%B9%8BEL%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2020-09-04T08:28:32.000Z</published>
    <updated>2020-09-04T08:29:09.997Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200904162743801.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>Expression Language 表达式语言</p><h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><p>替换和简化JSP页面中的Java代码的编写</p><a id="more"></a><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p>${表达式}</p><pre><code>注意：1. JSP页面中默认支持EL表达式2. 忽略EL表达式：设置jsp的Page指令中：isELIgnored=&quot;true&quot;3. 忽略单句EL表达式：加一个反斜线  \</code></pre><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol><li><p>运算</p><pre><code>1. 算数运算符： + - * /(div)  %(mod)2. 比较运算符： &gt;  &lt;   &gt;=  ==  !=3. 逻辑运算符： &amp;&amp;  ||   ！4. 空运算符：empty    功能：用于判断字符串，集合，数组对象是否 为null并且长度是否为0    ${empty list}：          判断是否为null或者长度为0    ${not empty list}:          判断是否不为null并且长度大于0</code></pre></li><li><p>获取值</p><pre><code>1. el表达式只能从域对象中获取值</code></pre><h1 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h1></li></ol><h2 id="1-域名称-键名"><a href="#1-域名称-键名" class="headerlink" title="1. $域名称.键名}"></a>1. $域名称.键名}</h2><pre><code>从指定的域中获取指键的值。    域名称：     1. PageScope      --&gt;   pageContext     2. requestScope   --&gt;  request     3. sessionScope   --&gt;  session     4. applicationScope --&gt; application(ServletContext)         举例：在request域中存储了name=张三        获取：$(request.name)</code></pre><p><img src="https://img-blog.csdnimg.cn/20200904095410773.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h2 id="2-键名"><a href="#2-键名" class="headerlink" title="2. ${键名}"></a>2. ${键名}</h2><p>表示依次从最小的域中查找是否有该键对应的值，直到找到为止。</p><p><img src="https://img-blog.csdnimg.cn/20200904100310100.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h2 id="3-获取对象"><a href="#3-获取对象" class="headerlink" title="3. 获取对象"></a>3. 获取对象</h2><p>获取LIst集合，Map集合的值</p><ol><li><p>对象：    </p><pre><code>${域对象.键名.属性名}    本质上是会去调用对象的getter方法 </code></pre></li><li><p>List集合：</p><pre><code>${域名.键名[索引]}    （EL中索引越界，不显示）</code></pre></li><li><p>Map集合：</p><pre><code>${域名称.键名.key名称}    ${域名称.键名[&quot;key名称&quot;]}    </code></pre></li></ol><h2 id="4-隐式对象"><a href="#4-隐式对象" class="headerlink" title="4. 隐式对象"></a>4. 隐式对象</h2><pre><code>pageContext:  获取jsp其他8个内置对象${pageContext.request.contextPath}:动态获取虚拟目录</code></pre><p>注：EL表达式一共有11个隐式对象</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200904162743801.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;p&gt;Expression Language 表达式语言&lt;/p&gt;
&lt;h1 id=&quot;作用&quot;&gt;&lt;a href=&quot;#作用&quot; class=&quot;headerlink&quot; title=&quot;作用&quot;&gt;&lt;/a&gt;作用&lt;/h1&gt;&lt;p&gt;替换和简化JSP页面中的Java代码的编写&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="JavaEE" scheme="https://oldaz.github.io/tags/JavaEE/"/>
    
      <category term="EL" scheme="https://oldaz.github.io/tags/EL/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE开发模式之MVC</title>
    <link href="https://oldaz.github.io/2020/09/04/JavaEE%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F%E4%B9%8BMVC/"/>
    <id>https://oldaz.github.io/2020/09/04/JavaEE%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F%E4%B9%8BMVC/</id>
    <published>2020-09-04T01:20:46.000Z</published>
    <updated>2020-09-04T01:21:26.784Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200904092017301.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="JSP演变史"><a href="#JSP演变史" class="headerlink" title="JSP演变史"></a>JSP演变史</h1><pre><code>1. 早期只有servlet，只能使用response输出标签数据，非常麻烦2. 后来有了JSP，简化的Servlet开发，如果过度使用JSP，在jsp中写了大量的Java代码，又写html表，造成维护困难，难于分工合作3. 再后来，Java的web开发，借鉴MVC开发模式，使得程序的设计更加合理性。</code></pre><a id="more"></a><h1 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h1><pre><code>1. M：model ，模型 （JavaBean）    *完成具体的业务2. V:view ,控制器  （JSP）    *展示数据3. C：Controller，控制器 （Servlet）    * 用户获取输入    * 调用模型    * 将数据交给视图进行展示</code></pre><p><img src="https://img-blog.csdnimg.cn/20200904090640849.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="MVC特点"><a href="#MVC特点" class="headerlink" title="MVC特点"></a>MVC特点</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>耦合性低，方便维护，利于分工合作。</li><li>重用性高<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2></li><li>使得项目架构变得复杂，对开发人员要求较高</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200904092017301.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;JSP演变史&quot;&gt;&lt;a href=&quot;#JSP演变史&quot; class=&quot;headerlink&quot; title=&quot;JSP演变史&quot;&gt;&lt;/a&gt;JSP演变史&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;1. 早期只有servlet，只能使用response输出标签数据，非常麻烦
2. 后来有了JSP，简化的Servlet开发，如果过度使用JSP，在jsp中写了大量的Java代码，又写html表，造成维护困难，难于分工合作
3. 再后来，Java的web开发，借鉴MVC开发模式，使得程序的设计更加合理性。&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="JavaEE" scheme="https://oldaz.github.io/tags/JavaEE/"/>
    
      <category term="MVC" scheme="https://oldaz.github.io/tags/MVC/"/>
    
  </entry>
  
  <entry>
    <title>Java EE页显示技术之JSP</title>
    <link href="https://oldaz.github.io/2020/09/04/Java-EE%E9%A1%B5%E6%98%BE%E7%A4%BA%E6%8A%80%E6%9C%AF%E4%B9%8BJSP/"/>
    <id>https://oldaz.github.io/2020/09/04/Java-EE%E9%A1%B5%E6%98%BE%E7%A4%BA%E6%8A%80%E6%9C%AF%E4%B9%8BJSP/</id>
    <published>2020-09-04T00:48:48.000Z</published>
    <updated>2020-09-04T01:21:13.076Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/2020090408471826.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h1><p>1.概念：</p><pre><code>* Java Server Pages:Java服务器页面    * 可以理解为一个特殊的页面，    * 其中既可以定义html标签，又可以定义java代码    用于简化书写</code></pre><a id="more"></a><p><img src="https://img-blog.csdnimg.cn/20200902091143184.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="概念"></p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p><img src="https://img-blog.csdnimg.cn/20200902091512601.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="原理"></p><ol><li>本质上一个Servlet</li></ol><h1 id="Jsp的脚本"><a href="#Jsp的脚本" class="headerlink" title="Jsp的脚本"></a>Jsp的脚本</h1><pre><code>Jsp定义Java代码的方式  1.  &lt;%| 代码%&gt; ：        定义的Java代码在Service方法中。        Servce方法中可以定义什么，该脚本中就可以定义什么 。  2.  &lt;%！ 代码%&gt;：         定义的java代码在JSP转换后的Java类的成员位置。        一般使用 安全问题  3.  &lt;%= 代码%&gt;：         定义Java代码，会输出在页面上。         输出语句可以定义什么，该脚本就可以定义什么。</code></pre><h1 id="Jsp的内置对象"><a href="#Jsp的内置对象" class="headerlink" title="Jsp的内置对象"></a>Jsp的内置对象</h1><pre><code>* 在JSP页面不需要获取和创建，可以直接使用的对象* JSP一共有九个内置对象。* 3个常用 ：        1. request        2. response         3. out :           字符的输出流，可以将数据输出到页面上。           和reponse.getWriter类似。           * 二者区别： 在Tomcat 服务器真正给客户端做出响应之前，                     会先找出response缓冲区数据，再找出out数据缓冲区数据。             response.getWriter()数据永远在out.write()之前。             尽量只用out输出。</code></pre><p><img src="https://img-blog.csdnimg.cn/20200902103835170.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="区别"></p><h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><pre><code>*作用：用于JSP页面，导入资源文件* 格式    &lt;% 指令名称 属性名称 属性名称1=属性值1 属性名称2=属性值2 .. %&gt;</code></pre><p>分类：<br>          1. page：配置JSP页面的</p><pre><code>*contentType：等同于response.setContentType()     1. 设置响应体的mime类型以及字符集     2. 设置当前JSP页面的编码（只能是高级的IDE才能生效，        如果使用低级工具，则需要设置pageEncoding属性设置当前页面的字符集）     *import：导包     * errorPage：当页面发生错误后跳转的页面。     * isErrorPage：标识当前页面是否为错误页面。       1. true：是，可以使用内置对象exception       2. false：否，默认值。不可以使用内置对象exception</code></pre><ol start="2"><li>include<pre><code>页面包含的。导入页面的资源文件</code></pre><img src="https://img-blog.csdnimg.cn/20200903232938742.png#pic_center" alt=""><br><img src="https://img-blog.csdnimg.cn/20200903233041508.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></li></ol><ol start="3"><li><p>taglib</p><pre><code>     导入资源（JSTL标签库）&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;  * rprefix:前缀，自定义的</code></pre></li></ol><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><ol><li><p>html注释： </p><pre><code>&lt;!--  --&gt;:只能注释html代码片段（会发送到页面，但是不解析）。</code></pre></li><li><p>JSP注释：推荐使用</p><pre><code>&lt;%--  --%&gt;:可以注释所有。（不会将注释内容发送到页面）</code></pre></li></ol><h1 id="所有内置对象"><a href="#所有内置对象" class="headerlink" title="所有内置对象"></a>所有内置对象</h1><p>在JSP页面中不需要创建，直接使用的对象</p><p>一共有九个：</p><table><thead><tr><th>变量名</th><th>真实类型</th><th>作用</th></tr></thead><tbody><tr><td>pageContext</td><td>pageContext</td><td>当前页面共享数据，获取其他8个内置对象</td></tr><tr><td>request</td><td>HttpServletRequest</td><td>一次请求访问多个资源（转发）</td></tr><tr><td>session</td><td>HttpSession</td><td>一次会话的多个请求</td></tr><tr><td>application</td><td>ServletContext</td><td>所有用户间共享数据</td></tr><tr><td>response</td><td>HttpServletResponse</td><td>响应对象</td></tr><tr><td>page</td><td>Object</td><td>当前页面的（Servlet）对象 this</td></tr><tr><td>out</td><td>JspWriter</td><td>输出对象，数据输出到页面上</td></tr><tr><td>config</td><td>SerletConfig</td><td>Servlet的配置对象</td></tr><tr><td>excepton</td><td>Throwable</td><td>异常对象</td></tr></tbody></table><p>后面五个为域对象</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/2020090408471826.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;JSP&quot;&gt;&lt;a href=&quot;#JSP&quot; class=&quot;headerlink&quot; title=&quot;JSP&quot;&gt;&lt;/a&gt;JSP&lt;/h1&gt;&lt;p&gt;1.概念：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* Java Server Pages:Java服务器页面
    * 可以理解为一个特殊的页面，
    * 其中既可以定义html标签，又可以定义java代码
    用于简化书写&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="JavaEE" scheme="https://oldaz.github.io/tags/JavaEE/"/>
    
      <category term="JSP" scheme="https://oldaz.github.io/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE会话技术之Session案例</title>
    <link href="https://oldaz.github.io/2020/09/03/JavaEE%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF%E4%B9%8BSession%E6%A1%88%E4%BE%8B/"/>
    <id>https://oldaz.github.io/2020/09/03/JavaEE%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF%E4%B9%8BSession%E6%A1%88%E4%BE%8B/</id>
    <published>2020-09-03T14:09:37.000Z</published>
    <updated>2020-09-03T14:18:04.619Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200903221657818.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="案例需求："><a href="#案例需求：" class="headerlink" title="案例需求："></a>案例需求：</h1><ol><li>访问带有验证码的登录页面login.jsp</li><li>用户输入用户户名和密码以及验证码。</li></ol><a id="more"></a><pre><code>* 如果用户名和密码输入有误，跳转登录页面，  提示用户名或者密码错误*如果验证码输入有误，跳转登录页面，  提示：验证码错误*如果输入全部正确，则转跳到主页success.jsp，  显示：用户名，欢迎您！</code></pre><h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><p><img src="https://img-blog.csdnimg.cn/20200903162342892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="分析"></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="验证码代码"><a href="#验证码代码" class="headerlink" title="验证码代码"></a>验证码代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/checkCodeServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckCodeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> width = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">int</span> height = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建一对象，在内存中图片(验证码图片对象)</span></span><br><span class="line">        BufferedImage image = <span class="keyword">new</span> BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.美化图片</span></span><br><span class="line">        <span class="comment">//2.1 填充背景色</span></span><br><span class="line">        Graphics g = image.getGraphics();<span class="comment">//画笔对象</span></span><br><span class="line">        g.setColor(Color.PINK);<span class="comment">//设置画笔颜色</span></span><br><span class="line">        g.fillRect(<span class="number">0</span>,<span class="number">0</span>,width,height);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.2画边框</span></span><br><span class="line">        g.setColor(Color.BLUE);</span><br><span class="line">        g.drawRect(<span class="number">0</span>,<span class="number">0</span>,width - <span class="number">1</span>,height - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        String str = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghigklmnopqrstuvwxyz0123456789"</span>;</span><br><span class="line">        <span class="comment">//生成随机角标</span></span><br><span class="line">        Random ran = <span class="keyword">new</span> Random();</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = ran.nextInt(str.length());</span><br><span class="line">            <span class="comment">//获取字符</span></span><br><span class="line">            <span class="keyword">char</span> ch = str.charAt(index);<span class="comment">//随机字符</span></span><br><span class="line">            sb.append(ch);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.3写验证码</span></span><br><span class="line">            g.drawString(ch+<span class="string">""</span>,width/<span class="number">5</span>*i,height/<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        String checkCode_session = sb.toString();</span><br><span class="line">        <span class="comment">//将验证码存入session</span></span><br><span class="line">        request.getSession().setAttribute(<span class="string">"checkCode_session"</span>,checkCode_session);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.4画干扰线</span></span><br><span class="line">        g.setColor(Color.GREEN);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//随机生成坐标点</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x1 = ran.nextInt(width);</span><br><span class="line">            <span class="keyword">int</span> x2 = ran.nextInt(width);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> y1 = ran.nextInt(height);</span><br><span class="line">            <span class="keyword">int</span> y2 = ran.nextInt(height);</span><br><span class="line">            g.drawLine(x1,y1,x2,y2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.将图片输出到页面展示</span></span><br><span class="line">        ImageIO.write(image,<span class="string">"jpg"</span>,response.getOutputStream());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="登陆代码"><a href="#登陆代码" class="headerlink" title="登陆代码"></a>登陆代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/loginServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">       <span class="comment">//1.设置request编码</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="comment">//2.获取Map参数</span></span><br><span class="line">        String username = request.getParameter(<span class="string">"username"</span>);</span><br><span class="line">        String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line">        String checkCode = request.getParameter(<span class="string">"checkCode"</span>);</span><br><span class="line">        <span class="comment">//先获取生成的验证码</span></span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        String checkCode_session = (String) session.getAttribute(<span class="string">"checkCode_session"</span>);</span><br><span class="line">        <span class="comment">//删除session中存储的验证码</span></span><br><span class="line">            session.removeAttribute(<span class="string">"checkCode_session"</span>);</span><br><span class="line">        <span class="comment">//3.判断验证码是否正确</span></span><br><span class="line">        <span class="keyword">if</span> (checkCode_session!= <span class="keyword">null</span>&amp;&amp;checkCode_session.equalsIgnoreCase(checkCode))&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//忽略大小写比较字符串</span></span><br><span class="line">            <span class="comment">//验证码正确</span></span><br><span class="line">            <span class="comment">//判断用户名和密码是否一致</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"zhansan"</span>.equals(username)&amp;&amp;<span class="string">"123"</span>.equals(password))&#123;</span><br><span class="line">                <span class="comment">//登陆成功</span></span><br><span class="line">                <span class="comment">//存储信息，用户信息</span></span><br><span class="line">                session.setAttribute(<span class="string">"user"</span>,username);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//重定向到success页面</span></span><br><span class="line"></span><br><span class="line">                response.sendRedirect(request.getContextPath()+<span class="string">"/success.jsp"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//登陆失败</span></span><br><span class="line">                <span class="comment">//储存提示信息到request</span></span><br><span class="line">                request.setAttribute(<span class="string">"login_error"</span>,<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">                <span class="comment">//转发到登录页面</span></span><br><span class="line">                request.getRequestDispatcher(<span class="string">"/login.jsp"</span>).forward(request,response);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//验证码不一致</span></span><br><span class="line">            <span class="comment">//储存提示信息到request</span></span><br><span class="line">            request.setAttribute(<span class="string">"cc_error"</span>,<span class="string">"验证码错误"</span>);</span><br><span class="line">            <span class="comment">//转发到登录页面</span></span><br><span class="line">            request.getRequestDispatcher(<span class="string">"/login.jsp"</span>).forward(request,response);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="登陆页面代码"><a href="#登陆页面代码" class="headerlink" title="登陆页面代码"></a>登陆页面代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%--</span></span></span><br><span class="line"><span class="tag">  <span class="attr">Created</span> <span class="attr">by</span> <span class="attr">IntelliJ</span> <span class="attr">IDEA.</span></span></span><br><span class="line"><span class="tag">  <span class="attr">User:</span> <span class="attr">OldAZ-PC</span></span></span><br><span class="line"><span class="tag">  <span class="attr">Date:</span> <span class="attr">2020</span>/<span class="attr">9</span>/<span class="attr">3</span></span></span><br><span class="line"><span class="tag">  <span class="attr">Time:</span> <span class="attr">16:30</span></span></span><br><span class="line"><span class="tag">  <span class="attr">To</span> <span class="attr">change</span> <span class="attr">this</span> <span class="attr">template</span> <span class="attr">use</span> <span class="attr">File</span> | <span class="attr">Settings</span> | <span class="attr">File</span> <span class="attr">Templates.</span></span></span><br><span class="line"><span class="tag"><span class="attr">--</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">"img"</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.src = <span class="string">"/4_Cookie_Session_war_exploded/checkCodeServlet?date="</span>+<span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div&#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"loginServlet"</span> <span class="attr">method</span>=<span class="string">"post"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">password</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>验证码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"checkCode"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span> &gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"/4_Cookie_Session_war_exploded/checkCodeServlet"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登录"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span> &gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">%=request.getAttribute("cc_error")==null?"":request.getAttribute("cc_error")%</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">%=request.getAttribute("login_error")==null?"":request.getAttribute("login_error")%</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="登录成功页面"><a href="#登录成功页面" class="headerlink" title="登录成功页面"></a>登录成功页面</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: OldAZ-PC</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">9</span>/<span class="number">3</span></span><br><span class="line">  Time: <span class="number">19</span>:<span class="number">05</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;&lt;%=request.getSession().getAttribute("user") %&gt;,欢迎您！！&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200903221657818.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;案例需求：&quot;&gt;&lt;a href=&quot;#案例需求：&quot; class=&quot;headerlink&quot; title=&quot;案例需求：&quot;&gt;&lt;/a&gt;案例需求：&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;访问带有验证码的登录页面login.jsp&lt;/li&gt;
&lt;li&gt;用户输入用户户名和密码以及验证码。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="Session" scheme="https://oldaz.github.io/tags/Session/"/>
    
      <category term="JavaEE" scheme="https://oldaz.github.io/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE会话技术之Session</title>
    <link href="https://oldaz.github.io/2020/09/03/JavaEE%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF%E4%B9%8BSession/"/>
    <id>https://oldaz.github.io/2020/09/03/JavaEE%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF%E4%B9%8BSession/</id>
    <published>2020-09-03T04:23:18.000Z</published>
    <updated>2020-09-03T14:15:14.045Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/202009031222016.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><pre><code>服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端的对象中。Httpsession</code></pre><a id="more"></a><h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><pre><code>1. 获取Httpsession对象：     HttpSession session = request.getSession();2. 使用Httpsession对象：    object  getAttribute(String name)    void  setAttribute(String name,Object value)    void  removeAttribute(String name)</code></pre><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><pre><code>Session的实现是依赖于Cookie的。</code></pre><p><img src="https://img-blog.csdnimg.cn/20200903101153442.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="原理"></p><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><ol><li><p>当客户端关闭后，服务器不关闭，两次获取的Session是否为同一个？</p><pre><code>默认情况下，不是。* 如果需要相同，则可以创建Cookie，键为JSESSIONID，设置最大存活时间，让Cookie持久化保存。</code></pre></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"JSESSIONID"</span>,session.getId());</span><br><span class="line">cookie.setMaxAge(<span class="number">60</span>*<span class="number">60</span>);</span><br><span class="line">response.addCookie(cookie);</span><br></pre></td></tr></table></figure><ol start="2"><li><p>客户端不关闭，两次获取的session是同一个吗？</p><pre><code>不是同一个，但是要确保数据不丢失。   1. session钝化         在服务器正常关闭之前，将seesion对象序列化到硬盘上。（在tomcat的项目里面的work目录下）   2. session活化       在服务器启动后，将session 文件转化为session对象即可。       （IDEA中实现不了活化，因为在启动服务器的过程中，会先删除work目录，       再创建，上一次的session数据会被删除。无法读取活化）</code></pre></li></ol><p><strong><em>不过本地的Tomcat已经实现了这个过程，以后部署项目时不用考虑这个问题。</em></strong></p><ol start="3"><li>Session的什么时候被销毁？<ol><li>服务器被关闭。</li><li>session对象调用invalidate()。</li><li>session默认失效时间为30分钟。</li></ol></li></ol><pre><code>在所有项目的配置文件web.xml 就可以修改默认的失效时间</code></pre><p><img src="https://img-blog.csdnimg.cn/20200903121013194.png#pic_center" alt="失效时间"></p><h1 id="Session特点"><a href="#Session特点" class="headerlink" title="Session特点"></a>Session特点</h1><ol><li><p>session 用于储存一次会话的多次请求的数据，存在服务器端。</p></li><li><p>session 可以存储任意类型，任意大小的数据。</p></li><li><p>session和cokie的区别：</p><pre><code>1. session存储在服务器端，Cookie在客户端。2. seesion没有数据大小的限制，cookie有3. session数据安全，Cookie相对不安全。</code></pre></li></ol><p>注：session的体量会大一些，Cookie小一些。可以从翻译理解，session翻译为主菜，cookie翻译为小饼干！！！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/202009031222016.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;服务器端会话技术，在一次会话的多次请求间共享数据，
将数据保存在服务器端的对象中。Httpsession&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="Session" scheme="https://oldaz.github.io/tags/Session/"/>
    
      <category term="JavaEE" scheme="https://oldaz.github.io/tags/JavaEE/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE会话技术之cookie案例</title>
    <link href="https://oldaz.github.io/2020/08/28/JavaEE%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF%E4%B9%8Bcookie%E6%A1%88%E4%BE%8B/"/>
    <id>https://oldaz.github.io/2020/08/28/JavaEE%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF%E4%B9%8Bcookie%E6%A1%88%E4%BE%8B/</id>
    <published>2020-08-28T10:42:44.000Z</published>
    <updated>2020-09-03T04:24:41.803Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200828183545603.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><pre><code>1.  访问一个servlet，如果第一次访问，则提示：您好！欢迎首次访问2. 如果不是第一次访问，则提示：欢迎回来，您上次到访时间为：显示时间字符串</code></pre><a id="more"></a><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><pre><code>1.  可以采用cookie完成2. 在服务器中的servlet判断是否有一个名字为lastTime的cookie    1. 有：不是第一次访问        1. 响应数据：欢迎回来，您上次的访问时间为：时间        2.  写回cookie：lastTime=时间    2. 没有：是第一次访问        1. 响应数据：您好，欢迎首次访问        2. 写回cookie：lastTime=时间</code></pre><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p><img src="https://img-blog.csdnimg.cn/20200828182648435.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><p><img src="https://img-blog.csdnimg.cn/20200828183054423.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.cookie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLDecoder;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*1.  可以采用cookie完成</span></span><br><span class="line"><span class="comment">            2. 在服务器中的servlet判断是否有一个名字为lastTime的cookie</span></span><br><span class="line"><span class="comment">            1. 有：不是第一次访问</span></span><br><span class="line"><span class="comment">            1. 响应数据：欢迎回来，您上次的访问时间为：时间</span></span><br><span class="line"><span class="comment">            2.  写回cookie：lastTime=时间</span></span><br><span class="line"><span class="comment">            2. 没有：是第一次访问</span></span><br><span class="line"><span class="comment">            1. 响应数据：您好，欢迎首次访问</span></span><br><span class="line"><span class="comment">            2. 写回cookie：lastTime=时间</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> OldAZ-PC</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(urlPatterns = <span class="string">"/CookieTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieTest</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">  <span class="comment">//设置响应消息体的数据格式</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取所有的cookie</span></span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        Boolean flag = <span class="keyword">false</span>;    <span class="comment">//没有cookie为last time</span></span><br><span class="line">        <span class="comment">//2.遍历数组</span></span><br><span class="line">        <span class="keyword">if</span> (cookies != <span class="keyword">null</span>&amp;&amp; cookies.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">                <span class="comment">//3.获取cookie的名称</span></span><br><span class="line">                String name = cookie.getName();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"lastTime"</span>.equals(name))&#123;</span><br><span class="line">                    <span class="comment">//有该cookie，表示不是第一次访问</span></span><br><span class="line">                    flag = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="comment">//设置cookie的value</span></span><br><span class="line">                    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">                    SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日  HH:mm:ss"</span>);</span><br><span class="line">                    String str_date = sdf.format(date);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    System.out.println(<span class="string">"编码前："</span>+str_date);</span><br><span class="line">                    str_date = URLEncoder.encode(str_date, <span class="string">"utf-8"</span>);</span><br><span class="line">                    System.out.println(<span class="string">"编码后："</span>+str_date);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    cookie.setValue(str_date);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//设置cookie的存活时间</span></span><br><span class="line">                    cookie.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>);<span class="comment">//一个月</span></span><br><span class="line">                    response.addCookie(cookie);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//响应数据</span></span><br><span class="line">                    <span class="comment">//获取cookie的value，时间</span></span><br><span class="line">                    String value = cookie.getValue();</span><br><span class="line">                    System.out.println(<span class="string">"解码前："</span>+value);</span><br><span class="line">                    value = URLDecoder.decode(value,<span class="string">"utf-8"</span>);</span><br><span class="line">                    System.out.println(<span class="string">"解码后："</span>+value);</span><br><span class="line">                    response.getWriter().write(<span class="string">"&lt;h1&gt;欢迎回来，您上次的访问时间为："</span>+value+<span class="string">"&lt;/h1&gt;"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (cookies==<span class="keyword">null</span> || cookies.length==<span class="number">0</span>||flag==<span class="keyword">false</span>)&#123;</span><br><span class="line">            <span class="comment">//没有，第一次访问</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//设置cookie的value</span></span><br><span class="line">            Date date = <span class="keyword">new</span> Date();</span><br><span class="line">            SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日  HH:mm:ss"</span>);</span><br><span class="line">            String str_date = sdf.format(date);</span><br><span class="line">            str_date = URLEncoder.encode(str_date, <span class="string">"utf-8"</span>);</span><br><span class="line">            Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"lastTime"</span>,str_date);</span><br><span class="line">            <span class="comment">//设置cookie的存活时间</span></span><br><span class="line">            cookie.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>);  <span class="comment">//一个月</span></span><br><span class="line">            response.addCookie(cookie);</span><br><span class="line"></span><br><span class="line">            response.getWriter().write(<span class="string">"&lt;h1&gt;您好，欢迎首次访问&lt;/h1&gt;"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200828183545603.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;1.  访问一个servlet，如果第一次访问，则提示：您好！欢迎首次访问
2. 如果不是第一次访问，则提示：欢迎回来，您上次到访时间为：显示时间字符串&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="JavaEE" scheme="https://oldaz.github.io/tags/JavaEE/"/>
    
      <category term="Cookie" scheme="https://oldaz.github.io/tags/Cookie/"/>
    
  </entry>
  
  <entry>
    <title>JavaEE会话技术之Cookie</title>
    <link href="https://oldaz.github.io/2020/08/28/JavaEE%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF%E4%B9%8BCookie/"/>
    <id>https://oldaz.github.io/2020/08/28/JavaEE%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF%E4%B9%8BCookie/</id>
    <published>2020-08-28T10:41:39.000Z</published>
    <updated>2020-09-03T04:23:59.226Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200828184012478.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><pre><code>一次会话包含多次请求和响应。一次会话：浏览器第一次给服务器资源发送请求，会话建立，直到有一方断开为止。</code></pre><a id="more"></a><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><pre><code>在一次会话范围内的多次请求间，共享数据</code></pre><h2 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h2><pre><code>1.客户端会话技术：        Cookie2.服务器端会话技术:        Session</code></pre><h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><pre><code>客户端会话技术，将 数据保存到客户端</code></pre><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><pre><code>1. 创建Cookie对象，绑定数据    * new Cookie(String name,String value)2. 发送Cookie对象    *response.addCookie(Cookie cookie)</code></pre><p><img src="https://img-blog.csdnimg.cn/20200828160938959.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><pre><code>3. 获取Cookie，拿到数据    *Cookie[]   request.getCookies()</code></pre><p><img src="https://img-blog.csdnimg.cn/20200828161043635.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><p>*在同一个浏览器先访问CookieDemo1，再访问CookieDemo2控制台打印数据。<br><img src="https://img-blog.csdnimg.cn/20200828161216201.png#pic_center" alt=""></p><ul><li>若是在一个浏览器访问CookieDemo1后，在另一个不同的浏览器访问CookieDemo2.控制台不会输出数据。</li></ul><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>基于响应头set-cookie和请求头cookie实现：<br><img src="https://img-blog.csdnimg.cn/20200828161716529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h2 id="Cookie的细节"><a href="#Cookie的细节" class="headerlink" title="Cookie的细节"></a>Cookie的细节</h2><ol><li><p>一次可不可以发送多个cookie？</p><pre><code>*可以可以创建多个Cookie对象，使用response调用多次addCookie方法发送cookie 即可。</code></pre></li><li><p>cookie可以在浏览器中保存多长时间？</p><pre><code>1. 默认情况下，当浏览器被关闭后，cookie数据被销毁。2. 持久化的存储：    * setMaxAge(int seconds)       1. 正数：将cookie数据写到硬盘文件中，持久化储存。secons表示存活时间。       2. 负数：默认值       3. 零：删除cookie信息</code></pre></li><li><p>cookie能不能存中文？</p><pre><code>*在tomcat 8之前，cookie中不能直接储存中文数据    需要将中文数据转码--一般采用URL编码（%）*在tomcat 8之后，cookie支持储存中文数据</code></pre></li><li><p>cookie获取的范围是多大？</p><pre><code>1. 假设在同一个tomcat服务器中，部署了多个web项目，  那么这些web项目中cookie能不能共享？-默认情况下cookie不能共享-由setPath(String path):设置cookie的获取范围，默认情况下为当前虚拟目录。-如果要共享则可以将path设置为&quot;/&quot;2.在不同的tomcat服务器间的cookie 共享问题？    setDomain(String path):如果设置一级域名相同，则多个服务器之间cookie可以共享    *setDomain(&quot;.baidu.coom&quot;),那么tieba.baidu.com和news.baidu.com的cookie可以共享</code></pre></li></ol><h2 id="Cookie的特点和作用"><a href="#Cookie的特点和作用" class="headerlink" title="Cookie的特点和作用"></a>Cookie的特点和作用</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><pre><code>1. cookie存储数据在客户端浏览器2. 浏览器对于单个cookie的大小有限制（4kb）    以及对同一个域名下的cookie数量也有限制 （20个）</code></pre><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><pre><code>1. cookie一般用于存储少了的不太敏感的数据2. 在不登录的情况下，完成服务器对客户端的身份识别</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200828184012478.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;h2 id=&quot;会话&quot;&gt;&lt;a href=&quot;#会话&quot; class=&quot;headerlink&quot; title=&quot;会话&quot;&gt;&lt;/a&gt;会话&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;一次会话包含多次请求和响应。

一次会话：浏览器第一次给服务器资源发送请求，会话建立，直到有一方断开为止。&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="JavaEE" scheme="https://oldaz.github.io/tags/JavaEE/"/>
    
      <category term="Cookie" scheme="https://oldaz.github.io/tags/Cookie/"/>
    
  </entry>
  
  <entry>
    <title>HTTP协议之文件下载案例</title>
    <link href="https://oldaz.github.io/2020/08/28/HTTP%E5%8D%8F%E8%AE%AE%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E6%A1%88%E4%BE%8B/"/>
    <id>https://oldaz.github.io/2020/08/28/HTTP%E5%8D%8F%E8%AE%AE%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E6%A1%88%E4%BE%8B/</id>
    <published>2020-08-28T03:04:05.000Z</published>
    <updated>2020-08-28T03:05:31.389Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200828110158673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="文件下载需求："><a href="#文件下载需求：" class="headerlink" title="文件下载需求："></a>文件下载需求：</h1><pre><code>1. 页面显示超链接2. 点击超链接后弹出下载提示框3. 完成图片文件下载</code></pre><a id="more"></a><p><img src="https://img-blog.csdnimg.cn/20200828105902762.png#pic_center" alt=""><br><img src="https://img-blog.csdnimg.cn/20200828105931876.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h1><pre><code>1. 超链接指向的资源如果能够被浏览器解析，则在浏览器中展示，如果不能解析，则弹出下载提示框。不满足需求。2. 任何资源都必须弹出下载提示框。3. 使用响应头设置资源的打开方式：    *content-disposition：attename；filename=xxx;</code></pre><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><pre><code>1.  定义页面，编辑超链接href属性，属性值指向Servlet，    传递资源名称filename2.  定义Servlet    1. 获取文件的名称    2. 使用字节输入流去加载文件进去内存（涉及真实路径）    3. 指定response响应头：        *content-disposition：attename；filename=xxx;    4. 将数据写出到response输出流即可</code></pre><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>中文文件名的问题</p><p>解决思路：</p><pre><code>1. 获取客户端浏览器使用的版本信息2. 根据不同的版本信息，我们设置filename的编码方式不同</code></pre><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p><img src="https://img-blog.csdnimg.cn/20200828105613647.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="DownloadServlet"><a href="#DownloadServlet" class="headerlink" title="DownloadServlet"></a>DownloadServlet</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.download;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.web.utils.DownLoadUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(urlPatterns = <span class="string">"/downLoad"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//1.获取请求参数，文件文名称</span></span><br><span class="line">        String filename = request.getParameter(<span class="string">"filename"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.使用字节输出流加载进去内存</span></span><br><span class="line">            <span class="comment">//2.1找到文件服务器路径</span></span><br><span class="line">        ServletContext servletContext = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        String realPath = servletContext.getRealPath(<span class="string">"/img/"</span>+filename);</span><br><span class="line">            <span class="comment">//2.2用字节流关联</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.设置response的响应头</span></span><br><span class="line">        <span class="comment">//3.1设置响应头类型content-type</span></span><br><span class="line">                <span class="comment">//获取文件的mime类型</span></span><br><span class="line">        String mimeType = servletContext.getMimeType(filename);</span><br><span class="line">        response.setHeader(<span class="string">"content-type"</span>,mimeType);</span><br><span class="line">        <span class="comment">//设置头响应打开方式:content-disposition</span></span><br><span class="line">        <span class="comment">//3.2解决中文文件问题</span></span><br><span class="line">            <span class="comment">//1.获取user-agent请求头</span></span><br><span class="line">        String agent = request.getHeader(<span class="string">"user-agent"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.使用工具类方法编码文件名即可</span></span><br><span class="line">        filename = DownLoadUtils.getFileName(agent, filename);</span><br><span class="line">        response.setHeader(<span class="string">"content-disposition"</span>,<span class="string">"attachment;filename="</span>+filename);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.将输入流的数据写出到输出流中</span></span><br><span class="line">        ServletOutputStream sos = response.getOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">8</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((len=fis.read(buff))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            sos.write(buff,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中文编码类"><a href="#中文编码类" class="headerlink" title="中文编码类"></a>中文编码类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.misc.BASE64Encoder;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownLoadUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getFileName</span><span class="params">(String agent, String filename)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (agent.contains(<span class="string">"MSIE"</span>)) &#123;</span><br><span class="line">            <span class="comment">// IE浏览器</span></span><br><span class="line">            filename = URLEncoder.encode(filename, <span class="string">"utf-8"</span>);</span><br><span class="line">            filename = filename.replace(<span class="string">"+"</span>, <span class="string">" "</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (agent.contains(<span class="string">"Firefox"</span>)) &#123;</span><br><span class="line">            <span class="comment">// 火狐浏览器</span></span><br><span class="line">            BASE64Encoder base64Encoder = <span class="keyword">new</span> BASE64Encoder();</span><br><span class="line">            filename = <span class="string">"=?utf-8?B?"</span> + base64Encoder.encode(filename.getBytes(<span class="string">"utf-8"</span>)) + <span class="string">"?="</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 其它浏览器</span></span><br><span class="line">            filename = URLEncoder.encode(filename, <span class="string">"utf-8"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> filename;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="下载HTML页面"><a href="#下载HTML页面" class="headerlink" title="下载HTML页面"></a>下载HTML页面</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/3_response_war_exploded/img/1.jpg"</span>&gt;</span>图片1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/3_response_war_exploded/img/2.jpg"</span>&gt;</span>图片2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/3_response_war_exploded/downLoad?filename=1.jpg"</span>&gt;</span>图片1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/3_response_war_exploded/downLoad?filename=九尾.jpg"</span>&gt;</span>图片1（中文）<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/3_response_war_exploded/downLoad?filename=2.jpg"</span>&gt;</span>图片2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200828110158673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;文件下载需求：&quot;&gt;&lt;a href=&quot;#文件下载需求：&quot; class=&quot;headerlink&quot; title=&quot;文件下载需求：&quot;&gt;&lt;/a&gt;文件下载需求：&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;1. 页面显示超链接
2. 点击超链接后弹出下载提示框
3. 完成图片文件下载&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="HTTP" scheme="https://oldaz.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>HTTP协议之ServletContent对象</title>
    <link href="https://oldaz.github.io/2020/08/26/HTTP%E5%8D%8F%E8%AE%AE%E4%B9%8BServletContent%E5%AF%B9%E8%B1%A1/"/>
    <id>https://oldaz.github.io/2020/08/26/HTTP%E5%8D%8F%E8%AE%AE%E4%B9%8BServletContent%E5%AF%B9%E8%B1%A1/</id>
    <published>2020-08-26T09:49:26.000Z</published>
    <updated>2020-08-26T09:50:12.282Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200826174813647.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><pre><code>代表整个web应用，可以和程序的容器（服务器）来通讯</code></pre><a id="more"></a><h1 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h1><p>1.通过request对象获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.getServletContext();</span><br></pre></td></tr></table></figure><p>2.通过HttpServlet来获取 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.getServletContext();</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200826170922826.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><h2 id="1-获取MIME类型（互联网中文件的类型）"><a href="#1-获取MIME类型（互联网中文件的类型）" class="headerlink" title="1.获取MIME类型（互联网中文件的类型）"></a>1.获取MIME类型（互联网中文件的类型）</h2><pre><code>*MIME类型：在互联网通讯过程中定义的一种文件数据类型    *格式： 大类型/小类型   text/html     image/jpg</code></pre><p><img src="https://img-blog.csdnimg.cn/2020082617103990.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="2-域对象：共享数据"><a href="#2-域对象：共享数据" class="headerlink" title="2.域对象：共享数据"></a>2.域对象：共享数据</h2><pre><code>方法：1.setAttribute(String name,Object value)2.getAttribute(String name)3.removeAttribute(String name)范围*ServletContext对象范围：        所有用户请求的数据声明周期长，慎用，否则导致内存压力。</code></pre><h2 id="3-获取文件的真实（服务器路径）路径"><a href="#3-获取文件的真实（服务器路径）路径" class="headerlink" title="3.获取文件的真实（服务器路径）路径"></a>3.获取文件的真实（服务器路径）路径</h2><pre><code>1. 方法： String getRealPath(&quot;&quot;);</code></pre><p><img src="https://img-blog.csdnimg.cn/20200826174234185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200826174813647.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;代表整个web应用，可以和程序的容器（服务器）来通讯&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="HTTP" scheme="https://oldaz.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>HTTP协议之response对象</title>
    <link href="https://oldaz.github.io/2020/08/25/HTTP%E5%8D%8F%E8%AE%AE%E4%B9%8Bresponse%E5%AF%B9%E8%B1%A1/"/>
    <id>https://oldaz.github.io/2020/08/25/HTTP%E5%8D%8F%E8%AE%AE%E4%B9%8Bresponse%E5%AF%B9%E8%B1%A1/</id>
    <published>2020-08-25T03:55:27.000Z</published>
    <updated>2020-08-26T09:52:59.160Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200825115228784.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><pre><code>设置响应消息1. 设置响应行        1. 格式：HTTP/1.1  200    ok        2. 设置状态码： setStatic(int sc)</code></pre>  <a id="more"></a><pre><code>2. 设置相应头    setHeader(String name,String value)3. 设置响应体   使用步骤：           1. 获取输出流                   * 字符输出流：PrintWriter getWriter()                   * 字节输出流: ServletOutputStream getOutStream()           2. 使用输出流，将数据输出到客户端浏览器</code></pre><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><h2 id="完成重定向"><a href="#完成重定向" class="headerlink" title="完成重定向"></a>完成重定向</h2><h3 id="资源跳转的方式。"><a href="#资源跳转的方式。" class="headerlink" title="资源跳转的方式。"></a>资源跳转的方式。</h3><p><img src="https://img-blog.csdnimg.cn/202008191254267.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="重定向"></p><h3 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h3><p>这是第一个访问的Servlet    (/rd1)<br><img src="https://img-blog.csdnimg.cn/20200819131405171.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这是第二个Servlet    (/rd2)  重定向来的<br><img src="https://img-blog.csdnimg.cn/20200819131610498.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""><br>这是运行结果：<br><img src="https://img-blog.csdnimg.cn/20200819131657732.png#pic_center" alt=""></p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><pre><code>转发特点：foward    1. 转发地址栏路径不变    2. 转发只能访问当前服务器下的资源    3. 转发是一次请求，可以使用request对象来共享数据重定向特点：redirect    1. 转发地址栏路径发生变化    2. 转发可以访问其他站点（服务器）的资源    3. 转发是两次请求，不能使用request来共享数据</code></pre><h2 id="路径的写法"><a href="#路径的写法" class="headerlink" title="路径的写法"></a>路径的写法</h2><ol><li><p>路径的分类</p><ol><li><p>相对路径</p><pre><code>不能确定唯一资源如：./index.html规则：找到当前资源和目标资源的相对位置关系    ./:当前目录   ../:后退一级目录</code></pre></li><li><p>绝对路径</p><pre><code>可以确定唯一的资源*如：http://localhost:8080/3_response_war_exploded/rd2*以/开头：/3_response_war_exploded/rd2规则：判断路径给谁用，判断请求从哪儿发出    *给客户端使用：需要加虚拟目录（项目的访问路径）       *建议虚拟目录动态获取：request.getContextPath()       *&lt;a&gt;,&lt;form&gt; 重定向...    *给服务器使用，不需要加虚拟目录      * 转发路径</code></pre></li></ol></li></ol><h2 id="服务器输出字符数据到浏览器"><a href="#服务器输出字符数据到浏览器" class="headerlink" title="服务器输出字符数据到浏览器"></a>服务器输出字符数据到浏览器</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>获取字符输出流</li><li>输出数据</li><li>注意：</li></ol><pre><code>    乱码问题：1. PrintWriter pw = response.getWriter();2. 设置该流的默认编码3. 告诉浏览器，响应体用的编码</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单的形式，设置编码，在获取响应流之前设置</span></span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br></pre></td></tr></table></figure><ol start="4"><li>代码：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(urlPatterns = <span class="string">"/rd3"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseDemo3</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">     <span class="comment">//获取流对象之前，设置流的默认编码：ISO -8859-1  设置为GBK</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//1.获取字符输出流</span></span><br><span class="line">        PrintWriter pw = response.getWriter();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.输出数据</span></span><br><span class="line">        pw.write(<span class="string">"&lt;h1&gt;hello response&lt;h1&gt;"</span>);</span><br><span class="line">        pw.write(<span class="string">"你好 response"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="服务器输出字节数据到浏览器"><a href="#服务器输出字节数据到浏览器" class="headerlink" title="服务器输出字节数据到浏览器"></a>服务器输出字节数据到浏览器</h2><p>步骤：</p><pre><code>1.  获取字节输出流2.  输出数据</code></pre><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> OldAZ-PC</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(urlPatterns = <span class="string">"/rd4"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseDemo4</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">     <span class="comment">//获取流对象之前，设置流的默认编码：ISO -8859-1  设置为GBK</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取字节输出流</span></span><br><span class="line">        ServletOutputStream sos = response.getOutputStream();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.输出数据</span></span><br><span class="line">        sos.write(<span class="string">"hello"</span>.getBytes());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h2><pre><code>1. 本质：图片2. 目的：防止恶意表单注册      注：以后写的话  ，几乎都是在网上找美观的代码。自己改！！！</code></pre><p>代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> OldAZ-PC</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(urlPatterns = <span class="string">"/rd5"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseDemo5</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">     <span class="comment">//获取流对象之前，设置流的默认编码：ISO -8859-1  设置为GBK</span></span><br><span class="line">       <span class="comment">// response.setContentType("text/html;charset=UTF-8");</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> width = <span class="number">100</span>;</span><br><span class="line">            <span class="keyword">int</span> height = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建一个对象，在内存中图片（验证码图片对象）</span></span><br><span class="line">        BufferedImage image = <span class="keyword">new</span> BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.美化图片</span></span><br><span class="line">        <span class="comment">//2.1 填充背景色</span></span><br><span class="line">        Graphics g = image.getGraphics();  <span class="comment">//画笔对象</span></span><br><span class="line"></span><br><span class="line">        g.setColor(Color.pink);  <span class="comment">//设置画笔颜色</span></span><br><span class="line">        g.fillRect(<span class="number">0</span>,<span class="number">0</span>,width,height);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.2 画边框</span></span><br><span class="line">        g.setColor(Color.blue);</span><br><span class="line">        g.drawRect(<span class="number">0</span>,<span class="number">0</span>,width-<span class="number">1</span>,height-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        String str = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"</span>;</span><br><span class="line">        <span class="comment">//生成随机角标</span></span><br><span class="line">        Random ran = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;<span class="number">5</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = ran.nextInt(str.length());</span><br><span class="line">            <span class="comment">//获取字符</span></span><br><span class="line">            <span class="keyword">char</span> ch = str.charAt(index);<span class="comment">//随机字符</span></span><br><span class="line">            <span class="comment">//2.3写验证码</span></span><br><span class="line">            g.drawString(ch+<span class="string">""</span>,width/<span class="number">5</span>*i,height/<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.4画干扰线</span></span><br><span class="line">        g.setColor(Color.green);</span><br><span class="line">        <span class="comment">//随机生成坐标点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">10</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x1 = ran.nextInt(width);</span><br><span class="line">            <span class="keyword">int</span> x2 = ran.nextInt(width);</span><br><span class="line">            <span class="keyword">int</span> y1 = ran.nextInt(height);</span><br><span class="line">            <span class="keyword">int</span> y2 = ran.nextInt(height);</span><br><span class="line"></span><br><span class="line">            g.drawLine(x1,y1,x2,y2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.将图片展示到页面</span></span><br><span class="line">        ImageIO.write(image,<span class="string">"jpg"</span>,response.getOutputStream());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HTML页面代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"checkCode"</span> <span class="attr">src</span>=<span class="string">"/3_response_war_exploded/rd5"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"change"</span> <span class="attr">herf</span>=<span class="string">""</span>&gt;</span>看不清，换一张？<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">/*</span><br><span class="line">    分析：</span><br><span class="line">      点击超链接或者图片，需要换一张</span><br><span class="line">    1. 给超链接或者图片绑定单击事件</span><br><span class="line">    2.重新设置图片的SRC属性值</span><br><span class="line">*/</span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//1.获取图片对象</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> img = <span class="built_in">document</span>.getElementById(<span class="string">"checkCode"</span>);</span></span><br><span class="line"><span class="actionscript">        img.onclick=<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//时间戳</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            img.src = <span class="string">"/3_response_war_exploded/rd5?"</span>+date;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> img2 = <span class="built_in">document</span>.getElementById(<span class="string">"change"</span>);</span></span><br><span class="line"><span class="actionscript">        img2.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//时间戳</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            img.src = <span class="string">"/3_response_war_exploded/rd5?"</span>+date;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200825115228784.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;在这里插入图片描述&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;功能&quot;&gt;&lt;a href=&quot;#功能&quot; class=&quot;headerlink&quot; title=&quot;功能&quot;&gt;&lt;/a&gt;功能&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;设置响应消息

1. 设置响应行
        1. 格式：HTTP/1.1  200    ok
        2. 设置状态码： setStatic(int sc)&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="HTTP" scheme="https://oldaz.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>速解HTTP协议之响应消息</title>
    <link href="https://oldaz.github.io/2020/08/19/HTTP%E5%8D%8F%E8%AE%AE%E4%B9%8B%E5%93%8D%E5%BA%94%E6%B6%88%E6%81%AF/"/>
    <id>https://oldaz.github.io/2020/08/19/HTTP%E5%8D%8F%E8%AE%AE%E4%B9%8B%E5%93%8D%E5%BA%94%E6%B6%88%E6%81%AF/</id>
    <published>2020-08-19T04:09:43.000Z</published>
    <updated>2020-08-19T04:11:58.647Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200819120809472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="相应消息"></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><ol><li><p>请求消息： 客户端发送给服务端的数据<br> *数据格式：</p><pre><code>1. 请求行2. 请求头3. 请求空行4. 请求体</code></pre><ol start="2"><li><p>响应消息：服务器端发送给客户端的数据<br>   *数据格式</p>   <a id="more"></a> <ol><li><p>响应行</p><pre><code>1. 组成：  协议/版本  响应状态码   状态码描述2. 响应的状态码:     服务器告诉客户端浏览器本次请求和响应的一个状态。    1. 状态码都是三位数字。    2. 分类：</code></pre><ol><li>1xx :<pre><code>服务器接收客户端消息， 但没有接收完成，等待一段时间后， 发送1xx多状态码</code></pre></li><li>2xx ：<pre><code>成功。代表200    </code></pre></li><li>3xx：<pre><code>重定向。代表:302（重定向），304（访问缓存）</code></pre></li><li>4xx：<pre><code>代表客户端错误。   代表：      1. 404（请求路径没有对应的资源）      2. 405 （请求方式没有对应的doxxx方法）</code></pre></li><li>5xx：<pre><code>代表服务器端错误。代表：500（服务器异常）</code></pre></li></ol></li><li><p>响应头</p><pre><code>1. 格式：  头名称   ：  值2. 常见的响应头：    1. Content-Type: 服务器告诉客户端本次响应的数据格式以及编码格式。    2. Content-disposition：服务器告诉客户端以什么格式打开响应体数据：        *值：             *in-line：默认值，在当前页面打开             *attachment；filename=xxx：以附件形式打开响应体。文件下载</code></pre></li><li><p>响应空行</p></li><li><p>响应体：传输的数据。</p></li></ol></li></ol></li></ol><pre><code>HTTP/1.1 200 OKContent-Type: text/html;charset=utf-8Cache-Control: privateCache-Lenght: 101Date:wed,19 Aug 2020  11:00 GMT&lt;html&gt;  &lt;head&gt;    &lt;title&gt;$Title$&lt;/title&gt;  &lt;/head&gt;    &lt;body&gt;        hello,response!      &lt;/body&gt;&lt;/html&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200819120809472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;相应消息&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;请求消息： 客户端发送给服务端的数据&lt;br&gt; *数据格式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 请求行
2. 请求头
3. 请求空行
4. 请求体&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;p&gt;响应消息：服务器端发送给客户端的数据&lt;br&gt;   *数据格式&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="HTTP" scheme="https://oldaz.github.io/tags/HTTP/"/>
    
      <category term="快速入门" scheme="https://oldaz.github.io/tags/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>HTTP协议之Request对象</title>
    <link href="https://oldaz.github.io/2020/08/18/HTTP%E5%8D%8F%E8%AE%AE%E4%B9%8BRequest%E5%AF%B9%E8%B1%A1/"/>
    <id>https://oldaz.github.io/2020/08/18/HTTP%E5%8D%8F%E8%AE%AE%E4%B9%8BRequest%E5%AF%B9%E8%B1%A1/</id>
    <published>2020-08-18T03:16:23.000Z</published>
    <updated>2020-08-25T04:01:39.754Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200816165117123.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="request"></p><h1 id="request对象"><a href="#request对象" class="headerlink" title="request对象"></a>request对象</h1><pre><code>1.request和response对象是由服务器创建的。我们来使用他们2.request对象是来获取请求消息，response对象是来设置响应消息。</code></pre><a id="more"></a><p><img src="https://img-blog.csdnimg.cn/20200816112357668.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="Request对象继承体系结构"><a href="#Request对象继承体系结构" class="headerlink" title="Request对象继承体系结构"></a>Request对象继承体系结构</h1><pre><code>ServletRequest             --接口    继承HttpServletRequest        --接口    实现Org.apache.catalina.connector.RequestFacade 类（tomcat）</code></pre><h1 id="request功能"><a href="#request功能" class="headerlink" title="request功能"></a>request功能</h1><h2 id="1-获取请求消息"><a href="#1-获取请求消息" class="headerlink" title="1.获取请求消息"></a>1.获取请求消息</h2><h3 id="1-1获取请求行数据"><a href="#1-1获取请求行数据" class="headerlink" title="1.1获取请求行数据"></a>1.1获取请求行数据</h3><pre><code>* GET  /day/demo1?name=zhanshan  HTTP/1.1* 方法：            1.获取请求方式：GET                    String getMethod()            2.(*)获取虚拟目录： /day                    String getContextPath()            3.获取Servlet路径：/demo1                     String getServletPath()            4.获取get方式的请求参数： name=zhanshan                     String getQueryString()       5.(*)获取请求的URI：/day/demo1               String getRequestURI()     :/day/demo1               StringBuffer getRequestURL()   :  http://localhost:8080/day/demo1           URL:统一资源定位符                 URL小于URI             URI：统一资源标识符       6.获取协议及版本:HTTP/1.1               String getProtocol()               7.获取客户机的IP地址               String getRemoteAddr()</code></pre><h3 id="1-2获取请求头数据"><a href="#1-2获取请求头数据" class="headerlink" title="1.2获取请求头数据"></a>1.2获取请求头数据</h3><pre><code>方法：        String getHeader(String name):通过请求头的名称获取请求头的值        Enumeration&lt;String&gt; getHeaderNames(): 获取所有的请求头名称</code></pre><p> 3.获取请求体数据<br>         请求体：只有POST请求方式，才有请求体，在请求体中封装了请求的请求参数</p><pre><code>步骤：        1.获取流对象                1.BUfferedReader getHeader()  :获取字符输入流，只能操作字符数据。                2.ServletInputStream()  :获取字节流，可以操作所有类型的数据        2.再从流对象中拿数据</code></pre><h2 id="2-其他功能"><a href="#2-其他功能" class="headerlink" title="2.其他功能"></a>2.其他功能</h2><h3 id="2-1获取请求参数-的通用方式"><a href="#2-1获取请求参数-的通用方式" class="headerlink" title="2.1获取请求参数 的通用方式"></a>2.1获取请求参数 的通用方式</h3><p>GET和POST请求方式都可以使用以下方法：<br>this.DoPost(request,response)</p><pre><code>1.String getParamterer(String name)        //根据参数名称获取参数值 username=1&amp;password=22.String[]  getParamtererValues(String name)      //根据参数名称获取参数值与数组  hobby=1&amp; hobby=23.getParameterNames()      //获取所有请求的参数名称4.Map&lt;String,String[]&gt; getParameterMap()        //获取所有集合的Map集合</code></pre><p>乱码问题：</p><pre><code>设置流的字符集：            在获取参数前，设置request.setcharacterEncoding(&quot;utf-8&quot;);</code></pre><h2 id="3-请求转发"><a href="#3-请求转发" class="headerlink" title="3.请求转发"></a>3.请求转发</h2><p>一种在服务器内部的资源跳转方式<br><img src="https://img-blog.csdnimg.cn/20200816162354892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="转发"></p><h3 id="3-1步骤"><a href="#3-1步骤" class="headerlink" title="3.1步骤:"></a>3.1步骤:</h3><pre><code>1.通过request对象获取请求转发器对象   RequestDispatcher  getRequestDispatcher(String path)2.使用 RequestDispatcher对象进行转发  forward(ServletRequest  request,ServletResponse response)</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式1</span></span><br><span class="line"> RequestDispatcher rd = request.getRequestDispatcher(<span class="string">"/Demo3"</span>);</span><br><span class="line"> rd.forward(request,response);        </span><br><span class="line"> <span class="comment">//方式2</span></span><br><span class="line"> request.getRequestDispatcher(<span class="string">"/Demo3"</span>).forward(request,response);</span><br></pre></td></tr></table></figure><h3 id="3-2特点"><a href="#3-2特点" class="headerlink" title="3.2特点"></a>3.2特点</h3><pre><code>1.浏览器地址栏路径不发生变化2. 只能转发到当前服务器内部资源中3. 转发是一次请求</code></pre><h2 id="4-共享数据"><a href="#4-共享数据" class="headerlink" title="4.共享数据"></a>4.共享数据</h2><h3 id="4-1域对象"><a href="#4-1域对象" class="headerlink" title="4.1域对象"></a>4.1域对象</h3><p>一个作用范围的对象，可以在范围内共享数据。</p><pre><code>request域：         代表一次请求，一般用于请求转发的多个资源中共享数据方法：    1.setAttrbute(String name,Oject obj):存储数据    2.Object getAttrbute(String name)   :通过键获取数据    3.void removeAttrbute(String name ):通过键移除键值对</code></pre><p>​        </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200816165117123.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;request&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;request对象&quot;&gt;&lt;a href=&quot;#request对象&quot; class=&quot;headerlink&quot; title=&quot;request对象&quot;&gt;&lt;/a&gt;request对象&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;1.request和response对象是由服务器创建的。我们来使用他们
2.request对象是来获取请求消息，response对象是来设置响应消息。&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="HTTP" scheme="https://oldaz.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>记录“偷懒”实用小技巧--beanutils包</title>
    <link href="https://oldaz.github.io/2020/08/18/%E8%AE%B0%E5%BD%95%E2%80%9C%E5%81%B7%E6%87%92%E2%80%9D%E5%AE%9E%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7--beanutils%E5%8C%85/"/>
    <id>https://oldaz.github.io/2020/08/18/%E8%AE%B0%E5%BD%95%E2%80%9C%E5%81%B7%E6%87%92%E2%80%9D%E5%AE%9E%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7--beanutils%E5%8C%85/</id>
    <published>2020-08-18T03:13:03.000Z</published>
    <updated>2020-08-18T03:16:58.236Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200818110842814.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="BenUtils"></p><h1 id="Beautils介绍"><a href="#Beautils介绍" class="headerlink" title="Beautils介绍"></a>Beautils介绍</h1><pre><code>Apache组织开发了一套用于操作JavaBean的API，这套API考虑到了很多实际开发中的应用场景，因此在实际开发中很多程序员使用这套API操作JavaBean，以简化程序代码的编写。</code></pre><p>在工程下新建lib目录，导入commons-beanutils-1.8.3.jar 和支持包commons-logging-1.1.1.jar</p><p>选中两个包，右键add as library</p><a id="more"></a><h1 id="Beanutils工具包的常用类："><a href="#Beanutils工具包的常用类：" class="headerlink" title="Beanutils工具包的常用类："></a>Beanutils工具包的常用类：</h1><ul><li><p>BeanUtils</p></li><li><p>PropertyUtils</p></li><li><p>ConvertUtils.regsiter(Converterconvert, Class clazz)</p></li></ul><h2 id="对属性进行赋值操作"><a href="#对属性进行赋值操作" class="headerlink" title="对属性进行赋值操作"></a>对属性进行赋值操作</h2><p>可以实现String向8种基本数据类型的自动转换。如age是int类型的，但也可以使用String f赋值,这就是在BeanUtils内部实现了该转化操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="comment">// 可以实现String向8种基本数据类型的自动转换。如age是int类型的，但也可以使用String f赋值</span></span><br><span class="line"><span class="comment">// 这就是在BeanUtils内部实现了该转化操作。</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 1、调用BeanUtils的setProperty方法就可以直接对bean内省了</span></span><br><span class="line"><span class="comment">// 实际上是在这里面封装了Sun的普通内省的方法。</span></span><br><span class="line">BeanUtils.setProperty(p, <span class="string">"age"</span>, <span class="string">"21"</span>);</span><br><span class="line">System.out.println(p.getAge());</span><br><span class="line"> </span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalAccessException | InvocationTargetException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="封装用户对象"><a href="#封装用户对象" class="headerlink" title="封装用户对象"></a>封装用户对象</h2><p> 实际运用1：用户注册时提交的数据都是String类型的， 我们需要对用户的信息进行封装 将用户封装一个个对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 假设客户提交的数据</span></span><br><span class="line">String age = <span class="string">"24"</span>;</span><br><span class="line">String name = <span class="string">"小明"</span>;</span><br><span class="line">String sex = <span class="string">"男"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取请求参数</span></span><br><span class="line">Map&lt;String,String[]&gt; map = req.getparameterMap();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 封装成对象</span></span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">/*BeanUtils.setProperty(p, "name", name);</span></span><br><span class="line"><span class="comment">BeanUtils.setProperty(p, "age", age);</span></span><br><span class="line"><span class="comment">BeanUtils.setProperty(p, "sex", sex);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">BeanUtils.populate(p,map);</span><br><span class="line"> </span><br><span class="line">System.out.println(p.getAge() + <span class="string">".."</span> + p.getName() + <span class="string">".."</span></span><br><span class="line">+ p.getSex());</span><br><span class="line"> </span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>由于BeanUtils只支持8种基本数据类型的转换，因此要实现其他类型的转化，就需要注册该类型的转换器。自定义转换器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 使用ConverUtils对象的register()方法来注册类型转换器</span></span><br><span class="line"><span class="comment">// 1、第一个参数为实现了Converter接口的对象，第二个参数为要注册的类型的class对象。</span></span><br><span class="line"><span class="comment">// 2、因此需要使用匿名内部类的方式重写Converter的converter方法。</span></span><br><span class="line"><span class="comment">// 3、该方法最有有BeanUtils的setProperty()来调用</span></span><br><span class="line">ConvertUtils.register(<span class="keyword">new</span> Converter() &#123;</span><br><span class="line"><span class="comment">// arg0这种情况产生的原因是因为没有导入源码</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * public Object convert(Class arg0, Object arg1) &#123; // TODO</span></span><br><span class="line"><span class="comment"> * Auto-generated method stub return null; &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">convert</span><span class="params">(Class&lt;T&gt; type, Object value)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 1、先对value进行判断。看看是否符合条件</span></span><br><span class="line"><span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2、对value的值进行判断，因为我们要转换的是String类型的</span></span><br><span class="line"><span class="keyword">if</span> (!(value <span class="keyword">instanceof</span> String)) &#123;</span><br><span class="line"><span class="comment">// 不是String,将该错误抛给调用他的方法</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ConversionException(<span class="string">"值支持String类型的转换！"</span>);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3、如果1、2都没错误进行第三步，判断value是否全是空格</span></span><br><span class="line">String string = (String) value;</span><br><span class="line"><span class="keyword">if</span> (string.trim().equals(<span class="string">""</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4、将含有值得字符转转换为日期</span></span><br><span class="line">SimpleDateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">Date date = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">date = (Date) df.parse(string);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line"><span class="comment">// 将异常抛给下一级必须加上e——异常链不能断。</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> (T) date;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;, Date<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"> </span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">String date = <span class="string">"1992-09-12"</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">BeanUtils.setProperty(p, <span class="string">"date"</span>, date);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(p.getDate());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用BeanUtils本身自带的转换器"><a href="#使用BeanUtils本身自带的转换器" class="headerlink" title="使用BeanUtils本身自带的转换器"></a>使用BeanUtils本身自带的转换器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ConvertUtils.register(<span class="keyword">new</span> DateLocaleConverter(), Date<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">String date = <span class="string">"1990-08-09"</span>;</span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">BeanUtils.setProperty(p, <span class="string">"date"</span>, date);</span><br><span class="line">System.out.println(p.getDate());</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实际开发中常常把客户机提交的元素封装到Map集合中去。"><a href="#实际开发中常常把客户机提交的元素封装到Map集合中去。" class="headerlink" title="实际开发中常常把客户机提交的元素封装到Map集合中去。"></a>实际开发中常常把客户机提交的元素封装到Map集合中去。</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String age = <span class="string">"24"</span>;</span><br><span class="line">String name = <span class="string">"小明"</span>;</span><br><span class="line">String sex = <span class="string">"男"</span>;</span><br><span class="line">String date = <span class="string">"1990-08-09"</span>;</span><br><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">map.put(name, name);</span><br><span class="line">map.put(age, age);</span><br><span class="line">map.put(date, date);</span><br><span class="line">map.put(sex, sex);</span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 用map集合中的值填充Bean属性</span></span><br><span class="line">BeanUtils.populate(p, map);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>收集的更加<a href="https://blog.csdn.net/wzc1991520/article/details/80176679?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param" target="_blank" rel="noopener">详细的博文</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200818110842814.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;BenUtils&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Beautils介绍&quot;&gt;&lt;a href=&quot;#Beautils介绍&quot; class=&quot;headerlink&quot; title=&quot;Beautils介绍&quot;&gt;&lt;/a&gt;Beautils介绍&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;Apache组织开发了一套用于操作JavaBean的API，
这套API考虑到了很多实际开发中的应用场景，
因此在实际开发中很多程序员使用这套API操作JavaBean，以简化程序代码的编写。&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在工程下新建lib目录，导入commons-beanutils-1.8.3.jar 和支持包commons-logging-1.1.1.jar&lt;/p&gt;
&lt;p&gt;选中两个包，右键add as library&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://oldaz.github.io/tags/Java/"/>
    
      <category term="经验之谈" scheme="https://oldaz.github.io/tags/%E7%BB%8F%E9%AA%8C%E4%B9%8B%E8%B0%88/"/>
    
      <category term="工具类" scheme="https://oldaz.github.io/tags/%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>速解HTTP协议之请求消息</title>
    <link href="https://oldaz.github.io/2020/08/16/HTTP%E5%8D%8F%E8%AE%AE%E4%B9%8B%E8%AF%B7%E6%B1%82%E6%B6%88%E6%81%AF/"/>
    <id>https://oldaz.github.io/2020/08/16/HTTP%E5%8D%8F%E8%AE%AE%E4%B9%8B%E8%AF%B7%E6%B1%82%E6%B6%88%E6%81%AF/</id>
    <published>2020-08-16T02:24:09.000Z</published>
    <updated>2020-08-16T02:26:08.193Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200816100624670.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="HTTP"></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><pre><code>HTTP : Hyper Text Transfer Protocol   超文本传输协议</code></pre><h2 id="超文本传输协议"><a href="#超文本传输协议" class="headerlink" title="超文本传输协议"></a>超文本传输协议</h2><pre><code>传输协议：定义了客户端和服务器端通讯时，发送数据的格式</code></pre><a id="more"></a><p>  <img src="https://img-blog.csdnimg.cn/20200815171936872.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><pre><code>1.基于TCP/IP的高级协议2. 默认端口号：803. 基于请求/响应模型的：一次请求对应一次响应 4. 无状态的：每次请求之间，相互独立，不能交互数据</code></pre><p>历史版本：</p><pre><code>1.0 ：每一次请求都会建立新的连接1.1 ：复用连接，对缓存的支持比较好。</code></pre><h1 id="请求消息数据格式"><a href="#请求消息数据格式" class="headerlink" title="请求消息数据格式"></a>请求消息数据格式</h1><p><img src="https://img-blog.csdnimg.cn/20200816090007260.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="请求消息"></p><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><h3 id="1-请求行"><a href="#1-请求行" class="headerlink" title="1.请求行"></a>1.请求行</h3><pre><code>请求方式  请求url  请求协议/版本GET  /2_Servlet4_0_war_exploded/s3  HTTP/1.1   *请求方式：       HTTP协议中有7中请求方式，常用的2        GET ：           1.请求参数在请求行中，在url后           2.请求的url长度有限制           3.不太安全        POST：            1.请求参数在请求体中            2.请求的url长度没有限制（文件上传）            3.相对安全</code></pre><h3 id="2-请求头"><a href="#2-请求头" class="headerlink" title="2.请求头"></a>2.请求头</h3><p> 客户端浏览器告诉服务端的一些信息</p><pre><code>请求头名称 ：请求值 *常见的请求头：      1.User-Agent:浏览器告诉服务器，我访问你时使用的浏览器版本信息           *可以在服务器端获取该头的信息，解决浏览器的兼容性问题   2.Referer：url        *告诉服务器，我（当前请求）从哪里来？       作用：          1.防盗链          2.统计的工作</code></pre><p><img src="https://img-blog.csdnimg.cn/20200816095517571.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="盗链"></p><h3 id="3-请求空行"><a href="#3-请求空行" class="headerlink" title="3.请求空行"></a>3.请求空行</h3><pre><code>空行（分割POST请求的请求头和请求体）</code></pre><h3 id="4-请求体（正文）"><a href="#4-请求体（正文）" class="headerlink" title="4.请求体（正文）"></a>4.请求体（正文）</h3><pre><code>封装POST请求消息的请求参数的</code></pre><h3 id="字符串格式"><a href="#字符串格式" class="headerlink" title="字符串格式"></a>字符串格式</h3><pre><code>GET /2_Servlet4_0_war_exploded/s3 HTTP/1.1Host: localhost:8080User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:78.0) Gecko/20100101 Firefox/78.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateConnection: keep-aliveCookie: Idea-41e9004a=83460dde-8447-48d3-bfc3-ed6bae83b943Upgrade-Insecure-Requests: 1Cache-Control: max-age=0 user=zhaoyun</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200816100624670.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;HTTP&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;HTTP : Hyper Text Transfer Protocol   超文本传输协议&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;超文本传输协议&quot;&gt;&lt;a href=&quot;#超文本传输协议&quot; class=&quot;headerlink&quot; title=&quot;超文本传输协议&quot;&gt;&lt;/a&gt;超文本传输协议&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;传输协议：定义了客户端和服务器端通讯时，发送数据的格式&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="HTTP" scheme="https://oldaz.github.io/tags/HTTP/"/>
    
      <category term="快速入门" scheme="https://oldaz.github.io/tags/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb知识核心--Servlet体系结构</title>
    <link href="https://oldaz.github.io/2020/08/15/JavaWeb%E7%9F%A5%E8%AF%86%E6%A0%B8%E5%BF%83--Servlet%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
    <id>https://oldaz.github.io/2020/08/15/JavaWeb%E7%9F%A5%E8%AF%86%E6%A0%B8%E5%BF%83--Servlet%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</id>
    <published>2020-08-15T04:09:06.000Z</published>
    <updated>2020-08-15T04:09:57.518Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200815120803119.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="体系结构"></p><h1 id="Servlet-–接口"><a href="#Servlet-–接口" class="headerlink" title="Servlet –接口"></a>Servlet –接口</h1><pre><code>  Servlet          --接口GenericServlet    --抽象类HttpServlet       --抽象类</code></pre>  <a id="more"></a><h2 id="GenericServlet"><a href="#GenericServlet" class="headerlink" title="GenericServlet"></a>GenericServlet</h2><pre><code>里面只有一个service方法作为抽象，因为里面其他方法已经默认做了空实现其他方法可选择性实现</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.GenericServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo2</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="HttpServlet"><a href="#HttpServlet" class="headerlink" title="HttpServlet"></a>HttpServlet</h1><p><img src="https://img-blog.csdnimg.cn/20200815113719610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><pre><code>因为要判断get和post方式，很麻烦，因此sun公司帮我们实现了这个判断-HttpServletHttpServlet：对http协议的封装，简化操作</code></pre><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>定义类继承HttpServlet</li><li>复写doGet() / doPost()方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="meta">@WebServlet</span>(urlPatterns = <span class="string">"/s3"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo3</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"doget..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"doPost..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Servlet相关配置"><a href="#Servlet相关配置" class="headerlink" title="Servlet相关配置"></a>Servlet相关配置</h1><h2 id="urlpartten"><a href="#urlpartten" class="headerlink" title="urlpartten"></a>urlpartten</h2><ol><li><p>Servlet访问路径<br>   注解里面可以定义多个路径<br> @WebServlet(urlPatterns = {“/s3”,”/s31”,”/s32”})</p></li><li><p>路径定义规则</p><pre><code>1.   /xxx2.   /xxx/xxx   :多层路径，目录结构        @WebServlet(urlPatterns = &quot;/user/s1&quot;)        @WebServlet(urlPatterns = &quot;/user/*&quot;)        @WebServlet(urlPatterns = &quot;/*&quot;)        //*代表任意路径，通配符3.   *.do        @WebServlet(urlPatterns = &quot;*.do&quot;)        // 路劲前面不能加/，否则报错，访问为xxx.do        //后缀名可以为任意的</code></pre></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200815120803119.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;体系结构&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Servlet-–接口&quot;&gt;&lt;a href=&quot;#Servlet-–接口&quot; class=&quot;headerlink&quot; title=&quot;Servlet –接口&quot;&gt;&lt;/a&gt;Servlet –接口&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;  Servlet          --接口
GenericServlet    --抽象类
HttpServlet       --抽象类&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://oldaz.github.io/tags/Java/"/>
    
      <category term="Servlet" scheme="https://oldaz.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb知识核心--Servlet周期和注解</title>
    <link href="https://oldaz.github.io/2020/08/15/JavaWeb%E7%9F%A5%E8%AF%86%E6%A0%B8%E5%BF%83--Servlet%E5%91%A8%E6%9C%9F%E5%92%8C%E6%B3%A8%E8%A7%A3/"/>
    <id>https://oldaz.github.io/2020/08/15/JavaWeb%E7%9F%A5%E8%AF%86%E6%A0%B8%E5%BF%83--Servlet%E5%91%A8%E6%9C%9F%E5%92%8C%E6%B3%A8%E8%A7%A3/</id>
    <published>2020-08-15T03:06:28.000Z</published>
    <updated>2020-08-15T03:07:13.777Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200815110437717.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="servlet"></p><h1 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h1><h2 id="最重要的三个方法"><a href="#最重要的三个方法" class="headerlink" title="最重要的三个方法"></a>最重要的三个方法</h2><ol><li><p>被创建</p><pre><code>执行init()方法只执行一次</code></pre></li><li><p>提供服务</p><pre><code>执行Service方法，执行多次</code></pre></li><li><p>被销毁</p><pre><code>执行Destory()方法，只执行一次</code></pre><a id="more"></a><h2 id="代码案例"><a href="#代码案例" class="headerlink" title="代码案例"></a>代码案例</h2></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo2</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//初始化方法，在servlet被创建之前执行，只会执行一次</span></span><br><span class="line">    <span class="comment">//加载资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"init..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//获取Servletconfig对象的，就是Servlet的配置对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//提供服务的方法每一次Servlet被访问时，执行。执行多次</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Servlet..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//获取Servlet的一些信息，版本，作者等等。。。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//销毁方法，只有在服务器正常关闭时会执行，执行一次</span></span><br><span class="line">              <span class="comment">//被销毁之前执行，一般用于释放资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"destory..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小疑问"><a href="#小疑问" class="headerlink" title="小疑问"></a>小疑问</h2><h3 id="Servlet什么时候被创建？"><a href="#Servlet什么时候被创建？" class="headerlink" title="Servlet什么时候被创建？"></a>Servlet什么时候被创建？</h3><pre><code>* 默认情况下，第一次被访问时* servlet被创建。可以配置指定Servlet的创建时机。</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!--    配置servlet标签--&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        这是配置名称为Demo1的文件路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.web.servlet.ServletDemo1<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        指定Servlet的创建时间</span></span><br><span class="line"><span class="comment">            1.第一次被访问时。创建</span></span><br><span class="line"><span class="comment">                标签里面的值为负数，第一次访问时被创建</span></span><br><span class="line"><span class="comment">            2.在服务器启动时，创建</span></span><br><span class="line"><span class="comment">                标签里面的值为0或正整数，服务器启动时被创建</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        这是给名称demo1配置访问路径/demo1--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Servlet是单例的"><a href="#Servlet是单例的" class="headerlink" title="Servlet是单例的"></a>Servlet是单例的</h3><pre><code>Servlet的init()方法，只执行一次，说明Servlet在内存中只存在一个对象，Servlet是单例的</code></pre><p>多个用户同时访问时。可能会存在线程安全问题</p><pre><code>解决：      1.不能加锁    2.设置全局静态代码块，严重影响性能。      解决方案：设置局部代码块，即使定义了成员变量，也不要对其修改值</code></pre><h1 id="Servlet3-0-4-0"><a href="#Servlet3-0-4-0" class="headerlink" title="Servlet3.0/4.0"></a>Servlet3.0/4.0</h1><p>支持注解配置。可以选择不使用web.xml</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li><p>创建JavaEE项目，选择Servlet版本3.0以上，可以不创建web.xml</p></li><li><p>定义一个类，实现Servlet接口（浏览器路径访问为，get方法访问）</p></li><li><p>复写方法</p></li><li><p>在类上使用@webServlet注解，进行配置</p><pre><code>@WebServlet(name = &quot;s1&quot;,urlPatterns = &quot;/s1&quot;)</code></pre></li></ol><p><img src="https://img-blog.csdnimg.cn/20200815102949169.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="创建步骤"><br><img src="https://img-blog.csdnimg.cn/2020081510361491.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="创建2"><br><img src="https://img-blog.csdnimg.cn/20200815103649444.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="代码"><br><img src="https://img-blog.csdnimg.cn/2020081510401558.png#pic_center" alt="访问"><br><img src="https://img-blog.csdnimg.cn/20200815104107109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="控制台"></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><pre><code>在Servlet3.0中，注解内部数据是这样的</code></pre><p><img src="https://img-blog.csdnimg.cn/20200815104406443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><pre><code>有一个属性value，一般默认为最重要的urlpatterns，可以使用           @WebServlet(&quot;/s1&quot;)。在注解4.0版本中，必须自己指定urlpatterns:      @WebServlet(name = &quot;s1&quot;,urlPatterns = &quot;/s1&quot;)</code></pre><h1 id="tomcat与IDEA"><a href="#tomcat与IDEA" class="headerlink" title="tomcat与IDEA"></a>tomcat与IDEA</h1><p><img src="https://img-blog.csdnimg.cn/20200815105956207.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200815110437717.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;servlet&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Servlet生命周期&quot;&gt;&lt;a href=&quot;#Servlet生命周期&quot; class=&quot;headerlink&quot; title=&quot;Servlet生命周期&quot;&gt;&lt;/a&gt;Servlet生命周期&lt;/h1&gt;&lt;h2 id=&quot;最重要的三个方法&quot;&gt;&lt;a href=&quot;#最重要的三个方法&quot; class=&quot;headerlink&quot; title=&quot;最重要的三个方法&quot;&gt;&lt;/a&gt;最重要的三个方法&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;被创建&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;执行init()方法只执行一次&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;提供服务&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;执行Service方法，执行多次&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;被销毁&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;执行Destory()方法，只执行一次&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://oldaz.github.io/tags/Java/"/>
    
      <category term="Servlet" scheme="https://oldaz.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb知识核心--Servlet快速入门</title>
    <link href="https://oldaz.github.io/2020/08/14/JavaWeb%E7%9F%A5%E8%AF%86%E6%A0%B8%E5%BF%83--Servlet%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <id>https://oldaz.github.io/2020/08/14/JavaWeb%E7%9F%A5%E8%AF%86%E6%A0%B8%E5%BF%83--Servlet%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</id>
    <published>2020-08-14T09:45:45.000Z</published>
    <updated>2020-08-14T09:47:11.429Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200814174407679.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="servlet快速入门"></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><pre><code>全名叫server  applet ，运行在服务端的小程序   servlet就是一个接口，定义了Java类被浏览器访问到（tomcat识别）的规则。   *将来我们自己定义一个类，实现Servlet接口，复写方法</code></pre><a id="more"></a><p><img src="https://img-blog.csdnimg.cn/20200814161110256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="servlet"></p><h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><ol><li>创建JavaEE项目</li><li>定义一个类，实现Servlet接口</li><li>实现接口中的抽象方法</li><li>配置Servlet</li></ol><h2 id="创建JavaEE项目"><a href="#创建JavaEE项目" class="headerlink" title="创建JavaEE项目"></a>创建JavaEE项目</h2><p><img src="https://img-blog.csdnimg.cn/20200814165340757.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""><br>点击next以后，输入项目名称。点击finish。即可完成创建。</p><h2 id="定义一个类，实现Servlet接口"><a href="#定义一个类，实现Servlet接口" class="headerlink" title="定义一个类，实现Servlet接口"></a>定义一个类，实现Servlet接口</h2><p><img src="https://img-blog.csdnimg.cn/2020081416561531.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""><br>创建一个类，实现接口Servlet。<br><img src="https://img-blog.csdnimg.cn/20200814165711754.png#pic_center" alt=""><br>如果servlet没有导入就去添加以下Tomcat的依赖：<br><img src="https://img-blog.csdnimg.cn/2020081416593896.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="1"><br><img src="https://img-blog.csdnimg.cn/20200814170326191.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h2 id="实现接口中的抽象方法"><a href="#实现接口中的抽象方法" class="headerlink" title="实现接口中的抽象方法"></a>实现接口中的抽象方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.servlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> OldAZ-PC</span></span><br><span class="line"><span class="comment"> * Servlet快速入门</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo1</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//提供服务的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello Servlet"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置Servlet"><a href="#配置Servlet" class="headerlink" title="配置Servlet"></a>配置Servlet</h2><p>在web/wei-inf 文件夹下面的xml文件里面配置servlet<br><img src="https://img-blog.csdnimg.cn/20200814170546478.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="配置"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    配置servlet标签--&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--    配置servlet标签--&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        这是配置名称为Demo1的文件路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.web.servlet.ServletDemo1<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        这是给名称demo1配置访问路径/demo1--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="启动小案例"><a href="#启动小案例" class="headerlink" title="启动小案例"></a>启动小案例</h1><p>点击启动后<br>在浏览器访问/demo1<br><img src="https://img-blog.csdnimg.cn/20200814171624727.png#pic_center" alt=""><br>控制台会出现</p><p><img src="https://img-blog.csdnimg.cn/20200814171706243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="控制台"></p><pre><code>出现了hello Servlet*里面出现的红色字体，是tomcat服务器的信息，不是报错。</code></pre><h1 id="Servlet执行原理"><a href="#Servlet执行原理" class="headerlink" title="Servlet执行原理"></a>Servlet执行原理</h1><ol><li>当服务器接收到客户端的请求后，会解析请求URL路径，获取访问的Servlet的资源路径。</li><li>查找web.xml文件，是否有对应的标签<url-pattern>内容。</li><li>如果有，则找到对应的<serclet-class>对应的全类名</li><li>tomcat会将字节码文件加载进内存，并且创建其对象。</li><li>调用其方法。<br><img src="https://img-blog.csdnimg.cn/20200814173455443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="原理"></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200814174407679.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;servlet快速入门&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;全名叫server  applet ，运行在服务端的小程序
   servlet就是一个接口，定义了Java类被浏览器访问到（tomcat识别）的规则。
   *将来我们自己定义一个类，实现Servlet接口，复写方法&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="快速入门" scheme="https://oldaz.github.io/tags/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    
      <category term="Java" scheme="https://oldaz.github.io/tags/Java/"/>
    
      <category term="Servlet" scheme="https://oldaz.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>xml解析--Jsoup快捷查询方式</title>
    <link href="https://oldaz.github.io/2020/08/13/xml%E8%A7%A3%E6%9E%90--Jsoup%E5%BF%AB%E6%8D%B7%E6%9F%A5%E8%AF%A2%E6%96%B9%E5%BC%8F/"/>
    <id>https://oldaz.github.io/2020/08/13/xml%E8%A7%A3%E6%9E%90--Jsoup%E5%BF%AB%E6%8D%B7%E6%9F%A5%E8%AF%A2%E6%96%B9%E5%BC%8F/</id>
    <published>2020-08-13T08:18:35.000Z</published>
    <updated>2020-08-13T08:21:55.237Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200813152407270.png#pic_center" alt="查询"></p><h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><pre><code>以前当我们想获取&lt;student&gt; -&gt; &lt;name&gt;  -&gt;   &lt;xing&gt; -&gt; &quot;张&quot;时，我们需要先依次获取对应的标签。在获取内容   我们希望有一种快捷的方式，一下子就能定位到这里。   因此就有了快捷查询方式。</code></pre><a id="more"></a><h1 id="快捷查询方式"><a href="#快捷查询方式" class="headerlink" title="快捷查询方式"></a>快捷查询方式</h1><h2 id="selector"><a href="#selector" class="headerlink" title="selector"></a>selector</h2><pre><code>选择器查询  使用方法：Elements select(String cssQuery) </code></pre><h3 id="selector语法"><a href="#selector语法" class="headerlink" title="selector语法"></a>selector语法</h3><p> 参考selector中定义的语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xml.jsoup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> OldAZ-PC</span></span><br><span class="line"><span class="comment"> * 选择器查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupDemo5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1 获取student。xml的路径</span></span><br><span class="line">        String path = JsoupDemo2.class.getResource("student.xml").getPath();</span><br><span class="line">        <span class="comment">//2.获取Document对象</span></span><br><span class="line">        Document document = Jsoup.parse(<span class="keyword">new</span> File(path), <span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="comment">//3.查询name标签</span></span><br><span class="line">        Elements elements = document.select(<span class="string">"name"</span>);</span><br><span class="line">        System.out.println(elements);</span><br><span class="line">        System.out.println(<span class="string">"---------------"</span>);</span><br><span class="line">        <span class="comment">//4.查询id值为id01的元素</span></span><br><span class="line">        Elements elements1 = document.select(<span class="string">"#id01"</span>);</span><br><span class="line">        System.out.println(elements1);</span><br><span class="line">        System.out.println(<span class="string">"---------------"</span>);</span><br><span class="line">        <span class="comment">//5.获取student标签并且number属性值为xml_0001的age子标签</span></span><br><span class="line">          <span class="comment">//5.1获取student标签并且number属性为xml_0001</span></span><br><span class="line">        Elements elements2 = document.select(<span class="string">"student[number='xml_0001']"</span>);</span><br><span class="line">        System.out.println(elements2);</span><br><span class="line">        System.out.println(<span class="string">"---------------"</span>);</span><br><span class="line">          <span class="comment">//5.2获取student标签并且number属性值为xml_0001的age子标签</span></span><br><span class="line">        Elements elements3 = document.select(<span class="string">"student[number='xml_0001']&gt;age"</span>);</span><br><span class="line">        System.out.println(elements3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="XPath"><a href="#XPath" class="headerlink" title="XPath"></a>XPath</h2><p> w3c定义的一种语法</p><pre><code> XPath即为XML路径语言（XML Path Language）， 它是一种用来确定XML文档中某部分位置的语言。XPath基于XML的树状结构，提供在数据结构树中找寻节点的能力。起初XPath的提出的初衷是将其作为一个通用的、介于XPointer与XSL间的语法模型。但是XPath很快的被开发者采用来当作小型查询语言。</code></pre><p><strong>使用Jsoup的XPath需要导入额外的jar包</strong></p><pre><code>JsoupXpath-0.3.2.jar</code></pre><p>参考w3c的<a href="https://www.w3school.com.cn/xpath/xpath_syntax.asp" target="_blank" rel="noopener">XPath语法文档</a>来使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xml.jsoup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.wanghaomiao.xpath.model.JXDocument;</span><br><span class="line"><span class="keyword">import</span> cn.wanghaomiao.xpath.model.JXNode;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> OldAZ-PC</span></span><br><span class="line"><span class="comment"> * XPath查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupDemo6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1 获取student。xml的路径</span></span><br><span class="line">        String path = JsoupDemo2.class.getResource("student.xml").getPath();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取Document对象</span></span><br><span class="line">        Document document = Jsoup.parse(<span class="keyword">new</span> File(path), <span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="comment">//3.根据document对象，创建JXDocument对象</span></span><br><span class="line">        JXDocument jxDocument = <span class="keyword">new</span> JXDocument(document);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.1结合xpath语法查询所有的student标签</span></span><br><span class="line">        List&lt;JXNode&gt; jxNodes = jxDocument.selN(<span class="string">"//student"</span>);</span><br><span class="line">        <span class="keyword">for</span> (JXNode jxNode:jxNodes)&#123;</span><br><span class="line">        System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"==================="</span>);</span><br><span class="line">        <span class="comment">//4.2查询所有的student标签下的那么标签</span></span><br><span class="line">        List&lt;JXNode&gt; jxNodes2 = jxDocument.selN(<span class="string">"//student/name"</span>);</span><br><span class="line">        <span class="keyword">for</span> (JXNode jxNode:jxNodes2)&#123;</span><br><span class="line">            System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"==================="</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.3查询student标签下带有属性的name标签</span></span><br><span class="line">        List&lt;JXNode&gt; jxNodes3 = jxDocument.selN(<span class="string">"//student/name[@id]"</span>);</span><br><span class="line">        <span class="keyword">for</span> (JXNode jxNode:jxNodes3)&#123;</span><br><span class="line">            System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"==================="</span>);</span><br><span class="line">        <span class="comment">//4.3查询student标签下带有属性的name标签,并且id的属性值为id01</span></span><br><span class="line">        List&lt;JXNode&gt; jxNodes4 = jxDocument.selN(<span class="string">"//student/name[@id='id01']"</span>);</span><br><span class="line">        <span class="keyword">for</span> (JXNode jxNode:jxNodes4)&#123;</span><br><span class="line">            System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"==================="</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200813152407270.png#pic_center&quot; alt=&quot;查询&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;引入&quot;&gt;&lt;a href=&quot;#引入&quot; class=&quot;headerlink&quot; title=&quot;引入&quot;&gt;&lt;/a&gt;引入&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;以前当我们想获取&amp;lt;student&amp;gt; -&amp;gt; &amp;lt;name&amp;gt;  -&amp;gt;   &amp;lt;xing&amp;gt; -&amp;gt; &amp;quot;张&amp;quot;
时，我们需要先依次获取对应的标签。在获取内容
   我们希望有一种快捷的方式，一下子就能定位到这里。
   因此就有了快捷查询方式。&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="快速入门" scheme="https://oldaz.github.io/tags/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    
      <category term="Java" scheme="https://oldaz.github.io/tags/Java/"/>
    
      <category term="xml" scheme="https://oldaz.github.io/tags/xml/"/>
    
      <category term="Jsoup" scheme="https://oldaz.github.io/tags/Jsoup/"/>
    
  </entry>
  
  <entry>
    <title>xml解析--Jsoup快速入门</title>
    <link href="https://oldaz.github.io/2020/08/13/xml%E8%A7%A3%E6%9E%90--Jsoup%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <id>https://oldaz.github.io/2020/08/13/xml%E8%A7%A3%E6%9E%90--Jsoup%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</id>
    <published>2020-08-13T06:35:50.000Z</published>
    <updated>2020-08-13T08:21:17.414Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200813143329389.png#pic_center" alt="jsoup"></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p> Jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</p><a id="more"></a><h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li><p>导入jar包</p><pre><code>jsoup-1.11.2.jar</code></pre></li><li><p>获取Document</p></li><li><p>获取对应的标签Element对象</p></li><li><p>获取数据</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xml.jsoup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> OldAZ-PC</span></span><br><span class="line"><span class="comment"> * Jsoup快速入门</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//2.获取Document对象,根据xml文档来获取</span></span><br><span class="line">        <span class="comment">//2.1 获取student。xml的路径</span></span><br><span class="line">        String path = JsoupDemo1.class.getResource("student.xml").getPath();</span><br><span class="line">        <span class="comment">//2.2解析xml文档，加载文档进入内存，获取dom树--&gt;Document</span></span><br><span class="line">        Document document = Jsoup.parse(<span class="keyword">new</span> File(path), <span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="comment">//3.获取元素对象</span></span><br><span class="line">        Elements elements = document.getElementsByTag(<span class="string">"name"</span>);</span><br><span class="line">        System.out.println(elements.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.1获取第一个name的element对象</span></span><br><span class="line">        Element element = elements.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.2获取数据</span></span><br><span class="line">        String name = element.text();</span><br><span class="line">        System.out.println(name);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="对象的使用"><a href="#对象的使用" class="headerlink" title="对象的使用"></a>对象的使用</h1><ol><li>Jsoup：工具类，可以解析html或者xml文档返回给Document对象。</li><li>Document：文档对象，代表内存中的dom树</li><li>Elements：元素Element对象的集合。可以当作ArrayList<Element>来使用</li><li>Element：元素对象</li><li>Node：节点对象<h2 id="Jsoup对象"><a href="#Jsoup对象" class="headerlink" title="Jsoup对象"></a>Jsoup对象</h2><ul><li>parse：解析html或者xml文档，返回Document<ul><li>parse(File in,String charsetName) :解析html或者xml文件的</li><li>parse(String html):解析xml或者html字符串的</li><li>parse(URL url ,int timeoutMillis):通过网络路径获取指定的HTML和xml的文档对象</li></ul></li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xml.jsoup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> OldAZ-PC</span></span><br><span class="line"><span class="comment"> * Jsoup对象功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//2.1 获取student。xml的路径</span></span><br><span class="line">        String path = JsoupDemo2.class.getResource("student.xml").getPath();</span><br><span class="line">        <span class="comment">//2.2解析xml文档，加载文档进入内存，获取dom树--&gt;Document</span></span><br><span class="line"><span class="comment">//        Document document = Jsoup.parse(new File(path), "utf-8");</span></span><br><span class="line"><span class="comment">//        System.out.println(document);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//parse(String html):解析xml或者html字符串的</span></span><br><span class="line">        String str = <span class="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n"</span> +</span><br><span class="line">                <span class="string">" &lt;students   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"</span> +</span><br><span class="line">                <span class="string">" \t\t\t xmlns=\"http://www.itcast.cn/xml\" \n"</span> +</span><br><span class="line">                <span class="string">" \t\t   xsi:schemaLocation=\"http://www.itcast.cn/xml  student.xsd\"\n"</span> +</span><br><span class="line">                <span class="string">" \t\t    &gt;\n"</span> +</span><br><span class="line">                <span class="string">" \t&lt;student number=\"xml_0001\"&gt;\n"</span> +</span><br><span class="line">                <span class="string">" \t\t&lt;name&gt;tom&lt;/name&gt;\n"</span> +</span><br><span class="line">                <span class="string">" \t\t&lt;age&gt;18&lt;/age&gt;\n"</span> +</span><br><span class="line">                <span class="string">" \t\t&lt;sex&gt;male&lt;/sex&gt;\n"</span> +</span><br><span class="line">                <span class="string">" \t&lt;/student&gt;\n"</span> +</span><br><span class="line">                <span class="string">"\t&lt;student number=\"xml_0002\"&gt;\n"</span> +</span><br><span class="line">                <span class="string">" \t\t&lt;name&gt;mark&lt;/name&gt;\n"</span> +</span><br><span class="line">                <span class="string">" \t\t&lt;age&gt;18&lt;/age&gt;\n"</span> +</span><br><span class="line">                <span class="string">" \t\t&lt;sex&gt;female&lt;/sex&gt;\n"</span> +</span><br><span class="line">                <span class="string">" \t&lt;/student&gt;\n"</span> +</span><br><span class="line">                <span class="string">"\t\t \n"</span> +</span><br><span class="line">                <span class="string">" &lt;/students&gt;"</span>;</span><br><span class="line">        Document document = Jsoup.parse(str);</span><br><span class="line">        System.out.println(document);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//parse(URL url ,int timeoutMillis):通过网络路径获取指定的HTML和xml的文档对象</span></span><br><span class="line">        <span class="comment">//代表网络中的资源路径</span></span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">"http://oldaz.top/"</span>);</span><br><span class="line">        Document document1 = Jsoup.parse(url, <span class="number">10000</span>);</span><br><span class="line">        System.out.println(document1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Document对象"><a href="#Document对象" class="headerlink" title="Document对象"></a>Document对象</h2><pre><code>文本对象，代表内存中的dom树</code></pre><h3 id="功能：获取Element对象"><a href="#功能：获取Element对象" class="headerlink" title="功能：获取Element对象"></a>功能：获取Element对象</h3><pre><code>getElementById(id):根据id属性值获取唯一的element对象getElementsByTag(String tagName):根据标签名称获取元素对象集合getElementsByAttribute(String key):根据属性名称来获取元素元素对象集合getElementsByAttribute(String key,String value):                     根据对应的属性名和属性值获取元素对象集合。</code></pre><h3 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h3><p>xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">students</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">student</span> <span class="attr">number</span>=<span class="string">"xml_0001"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">name</span> <span class="attr">id</span> =<span class="string">"id01"</span>&gt;</span>tom<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">sex</span>&gt;</span>male<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">student</span> <span class="attr">number</span>=<span class="string">"xml_0002"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">name</span>&gt;</span>mark<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">sex</span>&gt;</span>female<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br></pre></td></tr></table></figure><p>获取Elements对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xml.jsoup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> OldAZ-PC</span></span><br><span class="line"><span class="comment"> * Document/Element对象功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1 获取student。xml的路径</span></span><br><span class="line">        String path = JsoupDemo2.class.getResource("student.xml").getPath();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取Document对象</span></span><br><span class="line">        Document document = Jsoup.parse(<span class="keyword">new</span> File(path), <span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.获取元素对象</span></span><br><span class="line">        <span class="comment">// 3.1获取所有的student对象</span></span><br><span class="line">        Elements elements = document.getElementsByTag(<span class="string">"student"</span>);</span><br><span class="line">        System.out.println(elements);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"----------getEleentsById-----------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.2获取属性名为id的元素对象</span></span><br><span class="line">        Elements elements1 = document.getElementsByAttribute(<span class="string">"id"</span>);</span><br><span class="line">        System.out.println(elements1);</span><br><span class="line">        System.out.println(<span class="string">"--------------------"</span>);</span><br><span class="line">        <span class="comment">//3.3获取number属性值为xml_0001的元素对象</span></span><br><span class="line">        Elements elements2 = document.getElementsByAttributeValue(<span class="string">"number"</span>, <span class="string">"xml_0001"</span>);</span><br><span class="line">        System.out.println(elements2);</span><br><span class="line">        System.out.println(<span class="string">"--------------------"</span>);</span><br><span class="line">            <span class="comment">//3.4获取id属性值的元素对象</span></span><br><span class="line">        Element id01 = document.getElementById(<span class="string">"id01"</span>);</span><br><span class="line">        System.out.println(id01);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Element对象"><a href="#Element对象" class="headerlink" title="Element对象"></a>Element对象</h2><h3 id="获取子元素对象"><a href="#获取子元素对象" class="headerlink" title="获取子元素对象"></a>获取子元素对象</h3><pre><code>getElementById(id):根据id属性值获取唯一的element对象getElementsByTag(String tagName):根据标签名称获取元素对象集合getElementsByAttribute(String key):根据属性名称来获取元素元素对象集合getElementsByAttribute(String key,String value):                     根据对应的属性名和属性值获取元素对象集合。</code></pre><h3 id="获取属性值"><a href="#获取属性值" class="headerlink" title="获取属性值"></a>获取属性值</h3><pre><code>String attr(String key):根据属性名称获取属性值</code></pre><h3 id="获取文本内容"><a href="#获取文本内容" class="headerlink" title="获取文本内容"></a>获取文本内容</h3><pre><code>String text():获取文本内容String html():获取标签体的所有内容（包括子标签的字符串内容）</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xml.jsoup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> OldAZ-PC</span></span><br><span class="line"><span class="comment"> * Element对象功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupDemo4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1 获取student。xml的路径</span></span><br><span class="line">        String path = JsoupDemo2.class.getResource("student.xml").getPath();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取Document对象</span></span><br><span class="line">        Document document = Jsoup.parse(<span class="keyword">new</span> File(path), <span class="string">"utf-8"</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Element对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  获取子元素对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       getElementById(id):根据id属性值获取唯一的element对象</span></span><br><span class="line"><span class="comment">       getElementsByTag(String tagName):根据标签名称获取元素对象集合</span></span><br><span class="line"><span class="comment">       getElementsByAttribute(String key):根据属性名称来获取元素元素对象集合</span></span><br><span class="line"><span class="comment">       getElementsByAttribute(String key,String value):</span></span><br><span class="line"><span class="comment">                            根据对应的属性名和属性值获取元素对象集合。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  获取属性值</span></span><br><span class="line"><span class="comment">    String attr(String key):根据属性名称获取属性值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  获取文本内容</span></span><br><span class="line"><span class="comment">    String text():获取文本内容</span></span><br><span class="line"><span class="comment">    String html():获取标签体的所有内容（包括子标签的字符串内容）</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过document 对象获取name标签，获取所有的name标签   2个</span></span><br><span class="line">        Elements elements = document.getElementsByTag(<span class="string">"name"</span>);</span><br><span class="line">        System.out.println(elements.size());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//通过Element对象获取子标签对象</span></span><br><span class="line">        System.out.println(<span class="string">"---------------"</span>);</span><br><span class="line">        Element student_1 = document.getElementsByTag(<span class="string">"student"</span>).get(<span class="number">0</span>);</span><br><span class="line">        Elements stdent_1_name = student_1.getElementsByTag(<span class="string">"name"</span>);</span><br><span class="line">        System.out.println(stdent_1_name.size());</span><br><span class="line">            <span class="comment">//获取student对象的属性值</span></span><br><span class="line">        String number = student_1.attr(<span class="string">"number"</span>);</span><br><span class="line">        System.out.println(number);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取文本内容，text只获取纯文本内容，html会获取标签</span></span><br><span class="line">        String text = stdent_1_name.text();</span><br><span class="line">        String html = stdent_1_name.html();</span><br><span class="line">        System.out.println(text);</span><br><span class="line">        System.out.println(html);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Node节点对象"><a href="#Node节点对象" class="headerlink" title="Node节点对象"></a>Node节点对象</h2><pre><code>是Document和Element的父类 主要是包含增删改的方法</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200813143329389.png#pic_center&quot; alt=&quot;jsoup&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;p&gt; Jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="快速入门" scheme="https://oldaz.github.io/tags/%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    
      <category term="Java" scheme="https://oldaz.github.io/tags/Java/"/>
    
      <category term="xml" scheme="https://oldaz.github.io/tags/xml/"/>
    
      <category term="Jsoup" scheme="https://oldaz.github.io/tags/Jsoup/"/>
    
  </entry>
  
  <entry>
    <title>来看看XML到底是个啥--xml解析</title>
    <link href="https://oldaz.github.io/2020/08/12/%E6%9D%A5%E7%9C%8B%E7%9C%8BXML%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5--xml%E8%A7%A3%E6%9E%90/"/>
    <id>https://oldaz.github.io/2020/08/12/%E6%9D%A5%E7%9C%8B%E7%9C%8BXML%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5--xml%E8%A7%A3%E6%9E%90/</id>
    <published>2020-08-12T08:38:30.000Z</published>
    <updated>2020-08-12T08:39:16.160Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200812163705788.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="xml解析"></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>操作xml文档，将文档中的数据读取到内存中。</p><pre><code>操作xml文档：     1.解析（读取）：将文档中的数据读取到内存中              2.写入：将内存中的数据写到xml文档中。持久化的存储。</code></pre><a id="more"></a><h1 id="解析xml的方式"><a href="#解析xml的方式" class="headerlink" title="解析xml的方式"></a>解析xml的方式</h1><p>两种思想</p><ul><li><p>DOM思想（服务器端）</p><pre><code>将标记语言文档一次性加入内存中，在内存中形成dom树       优点：操作方便，可以对文档进行CRUD（增删改查）的所有操作       缺点：占内存（一次性读取，形成的dom树是文档大小的上千倍）</code></pre></li><li><p>SAX思想（移动端）</p><pre><code>逐行读取，基于事件驱动的   优点：不占内存   缺点：只能读取（不能增删改） </code></pre><p><img src="https://img-blog.csdnimg.cn/2020081216133641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="SAXs思想"></p><h1 id="xml常见的解析器"><a href="#xml常见的解析器" class="headerlink" title="xml常见的解析器"></a>xml常见的解析器</h1></li></ul><ol><li><p>JAXP</p><pre><code>sun公司提供的解析器，支持dom和sax两种思想* 性能不好，一般不会使用，了解即可</code></pre></li><li><p>DOM4J</p><pre><code>基于DOM思想的解析器*一款很优秀的解析器，使用于服务器端。   </code></pre></li><li><p>Jsounp</p><pre><code>jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。*由于xml刚开始就是为了代替html的，因此可以通过Jsoup解析xml。</code></pre></li><li><p>PULL</p><pre><code>安卓内置的解析器，sax方式的</code></pre></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200812163705788.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center&quot; alt=&quot;xml解析&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;p&gt;操作xml文档，将文档中的数据读取到内存中。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;操作xml文档：
     1.解析（读取）：将文档中的数据读取到内存中         
     2.写入：将内存中的数据写到xml文档中。持久化的存储。&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://oldaz.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://oldaz.github.io/tags/Java/"/>
    
      <category term="xml" scheme="https://oldaz.github.io/tags/xml/"/>
    
  </entry>
  
</feed>
