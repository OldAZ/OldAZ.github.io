<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>NOSQL非关系型数据库-Redis缓存优化案例</title>
      <link href="/2020/09/22/NOSQL%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93-Redis%E7%BC%93%E5%AD%98%E4%BC%98%E5%8C%96%E6%A1%88%E4%BE%8B/"/>
      <url>/2020/09/22/NOSQL%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93-Redis%E7%BC%93%E5%AD%98%E4%BC%98%E5%8C%96%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200922221845723.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="案例需求"><a href="#案例需求" class="headerlink" title="案例需求"></a>案例需求</h1><pre><code>1. 提供index.html页面，页面中有一个省份 下拉列表2. 当 页面加载完成后 发送ajax请求，加载所有省份</code></pre><a id="more"></a><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p><img src="https://img-blog.csdnimg.cn/20200922211524105.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>未使用优化前：<br><img src="https://img-blog.csdnimg.cn/20200922220707781.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h2 id="service层"><a href="#service层" class="headerlink" title="service层"></a>service层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProvinceServiceImpl</span> <span class="keyword">implements</span> <span class="title">ProvinceService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//声明dao</span></span><br><span class="line">    <span class="keyword">private</span> ProvinceDao dao = <span class="keyword">new</span> ProvinceDaoImpl();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Province&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dao.findAll();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="dao层"><a href="#dao层" class="headerlink" title="dao层"></a>dao层</h2><p><img src="https://img-blog.csdnimg.cn/20200922220820830.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明成员变量jdbctemplate</span></span><br><span class="line"><span class="keyword">private</span> JdbcTemplate template = <span class="keyword">new</span> JdbcTemplate(JDBCUtils.getDataSource());</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Province&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.定义sql</span></span><br><span class="line">    String sql = <span class="string">"select * from province"</span>;</span><br><span class="line">    <span class="comment">//执行sql</span></span><br><span class="line">    List&lt;Province&gt; list = template.query(sql, <span class="keyword">new</span> BeanPropertyRowMapper&lt;Province&gt;(Province<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">    System.out.println(list);</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Redis优化"><a href="#Redis优化" class="headerlink" title="Redis优化"></a>Redis优化</h1><ul><li>省份的数据不是经常发生变化的，每一次访问都去访问数据库就就提高了访问频率，会给数据库增加压力；利用缓存的思想（Redis缓存）。</li></ul><h2 id="service层-1"><a href="#service层-1" class="headerlink" title="service层"></a>service层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">package</span> com.web.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.web.Jedis.util.JedisPoolUtils;</span><br><span class="line"><span class="keyword">import</span> com.web.dao.ProvinceDao;</span><br><span class="line"><span class="keyword">import</span> com.web.dao.impl.ProvinceDaoImpl;</span><br><span class="line"><span class="keyword">import</span> com.web.domain.Province;</span><br><span class="line"><span class="keyword">import</span> com.web.service.ProvinceService;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProvinceServiceImpl</span> <span class="keyword">implements</span> <span class="title">ProvinceService</span> </span>&#123;</span><br><span class="line">    <span class="comment">//声明dao</span></span><br><span class="line">    <span class="keyword">private</span> ProvinceDao dao = <span class="keyword">new</span> ProvinceDaoImpl();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Province&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 使用Redis的缓存</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">findAllJson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.先从Redis中查询数据</span></span><br><span class="line">        <span class="comment">//1.1 获取Redis客户端连接</span></span><br><span class="line">        Jedis jedis = JedisPoolUtils.getJedis();</span><br><span class="line">        String provice_json = jedis.get(<span class="string">"province"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.判断province——json是否为null</span></span><br><span class="line">        <span class="keyword">if</span> (provice_json == <span class="keyword">null</span>||provice_json.length()==<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">//redis中没有数据</span></span><br><span class="line">            System.out.println(<span class="string">"redis中没有数据，查询数据库。。。"</span>);</span><br><span class="line">            <span class="comment">//2.1从数据库中查询</span></span><br><span class="line">            List&lt;Province&gt; ps = dao.findAll();</span><br><span class="line">            <span class="comment">//2.2将list序列化为json</span></span><br><span class="line">            ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                provice_json = mapper.writeValueAsString(ps);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//2.3将数据存入redis</span></span><br><span class="line">            jedis.set(<span class="string">"province"</span>,provice_json);</span><br><span class="line">            <span class="comment">//归还连接</span></span><br><span class="line">            jedis.close();</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"redis中有数据，查询缓存"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> provice_json;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Servlet层"><a href="#Servlet层" class="headerlink" title="Servlet层"></a>Servlet层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.web.service.ProvinceService;</span><br><span class="line"><span class="keyword">import</span> com.web.service.impl.ProvinceServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(urlPatterns = <span class="string">"/findProvinceServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindProvinceServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line">         <span class="comment">/*//1.调用service查询</span></span><br><span class="line"><span class="comment">        ProvinceService service = new ProvinceServiceImpl();</span></span><br><span class="line"><span class="comment">        List&lt;Province&gt; list = service.findAll();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //2.序列化list为JSON</span></span><br><span class="line"><span class="comment">        ObjectMapper mapper = new ObjectMapper();</span></span><br><span class="line"><span class="comment">        String JSON = mapper.writeValueAsString(list);</span></span><br><span class="line"><span class="comment">        System.out.println(JSON);*/</span></span><br><span class="line"></span><br><span class="line">         <span class="comment">//1.调用service查询</span></span><br><span class="line">        ProvinceService service = <span class="keyword">new</span> ProvinceServiceImpl();</span><br><span class="line">        String json = service.findAllJson();</span><br><span class="line">        <span class="comment">//响应结果</span></span><br><span class="line">        response.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">        response.getWriter().write(json);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="优化后"><a href="#优化后" class="headerlink" title="优化后"></a>优化后</h1><p><img src="https://img-blog.csdnimg.cn/2020092221532342.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><p><img src="https://img-blog.csdnimg.cn/20200922215336440.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><pre><code>1. 使用redis缓存一些不经常发生变化的数据。2. 数据库的数据一旦发生改变，则需要更新缓存。3. 数据库的表执行 增删改的相关操作，需要将redis缓存数据情况，再次存入4. 在service对应的增删改方法中，将redis数据删除。</code></pre><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p><a href="https://github.com/OldAZ/case_1/tree/master/1.case_Java%E5%8F%8D%E5%B0%84" target="_blank" rel="noopener">点击获取源码</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOSQL非关系型数据库-Jedis客户端</title>
      <link href="/2020/09/22/NOSQL%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93-Jedis%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
      <url>/2020/09/22/NOSQL%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93-Jedis%E5%AE%A2%E6%88%B7%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200922141054481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>Jedis是一款Java操作的redis数据库的工具</p><a id="more"></a><h1 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h1><h2 id="1-下载Jedis的jar包"><a href="#1-下载Jedis的jar包" class="headerlink" title="1. 下载Jedis的jar包"></a>1. 下载Jedis的jar包</h2><p><img src="https://img-blog.csdnimg.cn/20200921155052826.png#pic_center" alt=""></p><h2 id="2-使用测试"><a href="#2-使用测试" class="headerlink" title="2. 使用测试"></a>2. 使用测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.Jedis.test;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> OldAZ-PC</span></span><br><span class="line"><span class="comment"> * jedis的测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 快速入门</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.获取连接</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"localhost"</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//2.操作</span></span><br><span class="line">        jedis.set(<span class="string">"username"</span>,<span class="string">"shangsan"</span>);</span><br><span class="line">        <span class="comment">//3.关闭连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-Java代码执行前："><a href="#3-Java代码执行前：" class="headerlink" title="3. Java代码执行前："></a>3. Java代码执行前：</h2><p><img src="https://img-blog.csdnimg.cn/20200921155310623.png#pic_center" alt=""></p><h2 id="4-Java代码执行后"><a href="#4-Java代码执行后" class="headerlink" title="4. Java代码执行后"></a>4. Java代码执行后</h2><p><img src="https://img-blog.csdnimg.cn/20200921155531964.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="Jedis操作各种redis中的数据结构"><a href="#Jedis操作各种redis中的数据结构" class="headerlink" title="Jedis操作各种redis中的数据结构"></a>Jedis操作各种redis中的数据结构</h1><h2 id="1-字符串类型-string"><a href="#1-字符串类型-string" class="headerlink" title="1. 字符串类型 string"></a>1. 字符串类型 string</h2><pre><code>setget</code></pre><h2 id="2-哈希类型-hash"><a href="#2-哈希类型-hash" class="headerlink" title="2. 哈希类型 hash"></a>2. 哈希类型 hash</h2><p>map 格式</p><pre><code>hsethget</code></pre><h2 id="3-列表类型-list"><a href="#3-列表类型-list" class="headerlink" title="3.  列表类型 list"></a>3.  列表类型 list</h2><p>linkedlist格式。支持重复元素</p><pre><code>lpush/rpushlpop/rpop</code></pre><h2 id="4-集合类型-set"><a href="#4-集合类型-set" class="headerlink" title="4.集合类型 set"></a>4.集合类型 set</h2><p>不允许重复元素</p><pre><code>saddsrem</code></pre><h2 id="5-有序集合类型-sortedset"><a href="#5-有序集合类型-sortedset" class="headerlink" title="5. 有序集合类型 sortedset"></a>5. 有序集合类型 sortedset</h2><p>不允许重复元素，且元素有序</p><pre><code>zaddzrem</code></pre><h1 id="数据结构操作代码"><a href="#数据结构操作代码" class="headerlink" title="数据结构操作代码"></a>数据结构操作代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.Jedis.test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> OldAZ-PC</span></span><br><span class="line"><span class="comment"> * jedis的测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 快速入门</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.获取连接</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"localhost"</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//2.操作</span></span><br><span class="line">        jedis.set(<span class="string">"username"</span>,<span class="string">"shangsan"</span>);</span><br><span class="line">        <span class="comment">//3.关闭连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * String数据</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.获取连接</span></span><br><span class="line">           <span class="comment">//如果使用空参构造，默认值 “localhost”，6379</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"localhost"</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//2.操作</span></span><br><span class="line">        jedis.set(<span class="string">"username"</span>,<span class="string">"shangsan"</span>);</span><br><span class="line">    System.out.println(jedis.get(<span class="string">"username"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可以使用setext（）方式储存过期时间的key value</span></span><br><span class="line">    <span class="comment">// 将actived：hehe 键值对存入redis，并且20秒以后自动删除键值对</span></span><br><span class="line">    jedis.setex(<span class="string">"actived"</span>,<span class="number">20</span>,<span class="string">"hehe"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.关闭连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Hash数据结构</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.获取连接</span></span><br><span class="line">           <span class="comment">//如果使用空参构造，默认值 “localhost”，6379</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"localhost"</span>, <span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//2.操作</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//存储hash</span></span><br><span class="line">       jedis.hset(<span class="string">"user"</span>,<span class="string">"name"</span>,<span class="string">"lisi"</span>);</span><br><span class="line">       jedis.hset(<span class="string">"user"</span>,<span class="string">"age"</span>,<span class="string">"24"</span>);</span><br><span class="line">       jedis.hset(<span class="string">"user"</span>,<span class="string">"gender"</span>,<span class="string">"male"</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//获取 hash</span></span><br><span class="line">    System.out.println( jedis.hget(<span class="string">"user"</span>,<span class="string">"name"</span>));</span><br><span class="line"></span><br><span class="line">       <span class="comment">//获取hah的所有map中的元素</span></span><br><span class="line">    Map&lt;String, String&gt; user = jedis.hgetAll(<span class="string">"user"</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">        <span class="comment">//遍历</span></span><br><span class="line">    Set&lt;String&gt; keys = user.keySet();</span><br><span class="line">    <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">        <span class="comment">//获取value</span></span><br><span class="line">        String value = user.get(key);</span><br><span class="line">        System.out.println(key+<span class="string">":"</span>+value);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.关闭连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * list数据结构</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.获取连接</span></span><br><span class="line">           <span class="comment">//如果使用空参构造，默认值 “localhost”，6379</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis();</span><br><span class="line">        <span class="comment">//2.操作</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储数据</span></span><br><span class="line">        jedis.lpush(<span class="string">"mylist"</span>,<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>);<span class="comment">//从左边存</span></span><br><span class="line">        jedis.rpush(<span class="string">"mylist"</span>,<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>);<span class="comment">//从右边存</span></span><br><span class="line">    <span class="comment">//获取数据</span></span><br><span class="line">    List&lt;String&gt; mylist = jedis.lrange(<span class="string">"mylist"</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    System.out.println(mylist);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//list弹出</span></span><br><span class="line">    String lpop = jedis.lpop(<span class="string">"mylist"</span>);</span><br><span class="line">    System.out.println(lpop);</span><br><span class="line"></span><br><span class="line">    String rpop = jedis.rpop(<span class="string">"mylist"</span>);</span><br><span class="line">    System.out.println(rpop);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.关闭连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * set数据结构</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.获取连接</span></span><br><span class="line">           <span class="comment">//如果使用空参构造，默认值 “localhost”，6379</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis();</span><br><span class="line">        <span class="comment">//2.操作</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储数据</span></span><br><span class="line">       jedis.sadd(<span class="string">"myset"</span>,<span class="string">"java"</span>,<span class="string">"php"</span>,<span class="string">"c++"</span>);</span><br><span class="line">    <span class="comment">//获取数据</span></span><br><span class="line">    System.out.println(jedis.smembers(<span class="string">"myset"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.关闭连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * sortedset数据结构</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.获取连接</span></span><br><span class="line">           <span class="comment">//如果使用空参构造，默认值 “localhost”，6379</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis();</span><br><span class="line">        <span class="comment">//2.操作</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储数据</span></span><br><span class="line">       jedis.zadd(<span class="string">"mysortedset"</span>,<span class="number">1</span>,<span class="string">"老赵"</span>);</span><br><span class="line">       jedis.zadd(<span class="string">"mysortedset"</span>,<span class="number">2</span>,<span class="string">"老钱"</span>);</span><br><span class="line">       jedis.zadd(<span class="string">"mysortedset"</span>,<span class="number">3</span>,<span class="string">"老孙"</span>);</span><br><span class="line">       jedis.zadd(<span class="string">"mysortedset"</span>,<span class="number">4</span>,<span class="string">"老王"</span>);</span><br><span class="line">    <span class="comment">//获取数据</span></span><br><span class="line">    System.out.println(jedis.zrange(<span class="string">"mysortedset"</span>,<span class="number">0</span>,-<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.关闭连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Jedis连接池"><a href="#Jedis连接池" class="headerlink" title="Jedis连接池"></a>Jedis连接池</h1><p>JedisPool</p><h1 id="连接池的使用"><a href="#连接池的使用" class="headerlink" title="连接池的使用"></a>连接池的使用</h1><h2 id="1-创建JedisPool"><a href="#1-创建JedisPool" class="headerlink" title="1.  创建JedisPool"></a>1.  创建JedisPool</h2><h2 id="2-调用getResource-方法获取Jedis连接"><a href="#2-调用getResource-方法获取Jedis连接" class="headerlink" title="2. 调用getResource()方法获取Jedis连接"></a>2. 调用getResource()方法获取Jedis连接</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jedis连接池的使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//0.创建一个配置对象</span></span><br><span class="line">    JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">    config.setMaxTotal(<span class="number">50</span>);</span><br><span class="line">    config.setMaxIdle(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.创建Jedis连接池对象</span></span><br><span class="line">    JedisPool jedisPool = <span class="keyword">new</span> JedisPool(config, <span class="string">"localhost"</span>, <span class="number">6379</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.获取连接</span></span><br><span class="line">    Jedis jedis = jedisPool.getResource();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.使用</span></span><br><span class="line">    jedis.set(<span class="string">"hehe"</span>, <span class="string">"haha"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭，归还到连接池中</span></span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-config的详细配置："><a href="#3-config的详细配置：" class="headerlink" title="3. config的详细配置："></a>3. config的详细配置：</h2><p><img src="https://img-blog.csdnimg.cn/20200922110041899.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="连接池工具类"><a href="#连接池工具类" class="headerlink" title="连接池工具类"></a>连接池工具类</h1><ul><li>JedisPool工具类</li><li>加载配置文件，配置连接池参数</li><li>提供获取连接的方法</li></ul><h1 id="JedisPoolUtils代码"><a href="#JedisPoolUtils代码" class="headerlink" title="JedisPoolUtils代码"></a>JedisPoolUtils代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.Jedis.util;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPool;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.JedisPoolConfig;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JedisPool工具类</span></span><br><span class="line"><span class="comment"> * 加载配置文件，配置连接池参数</span></span><br><span class="line"><span class="comment"> *提供获取连接的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisPoolUtils</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> JedisPool jedisPool;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> &#123;</span><br><span class="line">       <span class="comment">//读取配置文件</span></span><br><span class="line">       InputStream is = JedisPoolUtils.class.getClassLoader().getResourceAsStream("jedis.properties");</span><br><span class="line">       <span class="comment">//创建properties对象</span></span><br><span class="line">       Properties pro = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//关联文件</span></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           pro.load(is);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//获取数据，设置到config中</span></span><br><span class="line">       JedisPoolConfig config = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">       config.setMaxTotal(Integer.parseInt(pro.getProperty(<span class="string">"maxTotal"</span>)));</span><br><span class="line">       config.setMaxIdle(Integer.parseInt(pro.getProperty(<span class="string">"maxIdle"</span>)));</span><br><span class="line"></span><br><span class="line">       <span class="comment">//初始化Jedispool</span></span><br><span class="line">       jedisPool  = <span class="keyword">new</span> JedisPool(config,pro.getProperty(<span class="string">"host"</span>),Integer.parseInt(pro.getProperty(<span class="string">"port"</span>)));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*获取连接的方法*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title">getJedis</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jedisPool.getResource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试工具类"><a href="#测试工具类" class="headerlink" title="测试工具类"></a>测试工具类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jedis连接池工具类的使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test8</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">//通过连接池工具类获取</span></span><br><span class="line">    Jedis jedis = JedisPoolUtils.getJedis();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用</span></span><br><span class="line">    jedis.set(<span class="string">"hello"</span>, <span class="string">"world"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭，归还连接池</span></span><br><span class="line"></span><br><span class="line">    jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOSQL非关系型数据库-Redis持久化</title>
      <link href="/2020/09/21/NOSQL%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93-Redis%E6%8C%81%E4%B9%85%E5%8C%96/"/>
      <url>/2020/09/21/NOSQL%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93-Redis%E6%8C%81%E4%B9%85%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200921145842265.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="持久化概念"><a href="#持久化概念" class="headerlink" title="持久化概念"></a>持久化概念</h1><p> redis是一个内存数据库，当redis服务器重启，或者电脑重启，数据就会丢失，我们可以将redis内存中的数据库持久化保存到硬盘文件中。</p><a id="more"></a><h1 id="持久化机制"><a href="#持久化机制" class="headerlink" title="持久化机制"></a>持久化机制</h1><h2 id="1-RDB"><a href="#1-RDB" class="headerlink" title="1. RDB"></a>1. RDB</h2><p>默认模式，不需要进行配置，默认就是使用这种机制（对性能影响比较小）</p><pre><code>在一定的时间间隔中，检测key的变化情况，然后进行持久化数据，</code></pre><h3 id="1-编辑按包目录下的redis-windows-conf文件"><a href="#1-编辑按包目录下的redis-windows-conf文件" class="headerlink" title="1. 编辑按包目录下的redis.windows.conf文件"></a>1. 编辑按包目录下的redis.windows.conf文件</h3><p><img src="https://img-blog.csdnimg.cn/20200920161144146.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""><br><img src="https://img-blog.csdnimg.cn/20200920161701545.png#pic_center" alt=""></p><h3 id="2-编辑内容"><a href="#2-编辑内容" class="headerlink" title="2. 编辑内容"></a>2. 编辑内容</h3><pre><code>- after 900 sec (15 min) if at least 1 key changed      save 900 1- after 300 sec (5 min) if at least 10 keys changed      save 300 10- after 60 sec if at least 10000 keys changed      save 60 10000</code></pre><h3 id="3-启动服务器"><a href="#3-启动服务器" class="headerlink" title="3. 启动服务器"></a>3. 启动服务器</h3><p>用命令行的方式启动 指定配置文件名称<br> <code>redis-sever.exe redis.windows.conf</code><br><img src="https://img-blog.csdnimg.cn/20200920163141807.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h2 id="2-AOF"><a href="#2-AOF" class="headerlink" title="2. AOF"></a>2. AOF</h2><p>日志记录方式，可以记录每一条命令操作。可以每一次命令操作后，持久化数据。（对性能影响比较大）</p><h3 id="1-编辑按包目录下的redis-windows-conf文件-1"><a href="#1-编辑按包目录下的redis-windows-conf文件-1" class="headerlink" title="1. 编辑按包目录下的redis.windows.conf文件"></a>1. 编辑按包目录下的redis.windows.conf文件</h3><p><img src="https://img-blog.csdnimg.cn/20200920161144146.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h3 id="2-开启AOF持久化"><a href="#2-开启AOF持久化" class="headerlink" title="2.  开启AOF持久化"></a>2.  开启AOF持久化</h3><pre><code>默认是：appendonly no （代表关闭AOF）改为 appendonly yes （开启AOF机制）</code></pre><p><img src="https://img-blog.csdnimg.cn/20200921143627181.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h3 id="3-配置持久化方式"><a href="#3-配置持久化方式" class="headerlink" title="3. 配置持久化方式"></a>3. 配置持久化方式</h3><p>每一次操作都进行持久化</p><pre><code># appendfsync always</code></pre><p>每隔一秒进行一持久化（默认）</p><pre><code>appendfsync everysec</code></pre><p>不进行持久化</p><pre><code># appendfsync no</code></pre><p><img src="https://img-blog.csdnimg.cn/20200921144513592.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h3 id="3-启动服务器-1"><a href="#3-启动服务器-1" class="headerlink" title="3. 启动服务器"></a>3. 启动服务器</h3><p>用命令行的方式启动 指定配置文件名称<br> <code>redis-sever.exe redis.windows.conf</code><br><img src="https://img-blog.csdnimg.cn/20200920163141807.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""><br>这样的数据库实习上也不是绝对的安全，要安全还是要一些关系型数据库。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOSQL非关系型数据库-Redis快速入门</title>
      <link href="/2020/09/20/NOSQL%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93-Redis%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2020/09/20/NOSQL%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93-Redis%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200920154029859.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>redis是一款高性能的NOSQL系列的非关系型数据库</p><a id="more"></a><pre><code>NOSQL： not only非关系型数据库MYSQL：关系型数据库1.1.什么是NOSQL    NoSQL(NoSQL = Not Only SQL)，意即“不仅仅是SQL”，是一项全新的数据库理念，泛指非关系型的数据库。    随着互联网web2.0网站的兴起，传统的关系数据库在应付web2.0网站，特别是超大规模和高并发的SNS类型的web2.0纯动态网站已经显得力不从心，暴露了很多难以克服的问题，而非关系型的数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合多重数据种类带来的挑战，尤其是大数据应用难题。    1.1.1.    NOSQL和关系型数据库比较        优点：            1）成本：nosql数据库简单易部署，基本都是开源软件，不需要像使用oracle那样花费大量成本购买使用，相比关系型数据库价格便宜。            2）查询速度：nosql数据库将数据存储于缓存之中，关系型数据库将数据存储在硬盘中，自然查询速度远不及nosql数据库。            3）存储数据的格式：nosql的存储格式是key,value形式、文档形式、图片形式等等，所以可以存储基础类型以及对象或者是集合等各种格式，而数据库则只支持基础类型。            4）扩展性：关系型数据库有类似join这样的多表查询机制的限制导致扩展很艰难。        缺点：            1）维护的工具和资料有限，因为nosql是属于新的技术，不能和关系型数据库10几年的技术同日而语。            2）不提供对sql的支持，如果不支持sql这样的工业标准，将产生一定用户的学习和使用成本。            3）不提供关系型数据库对事务的处理。    1.1.2.    非关系型数据库的优势：        1）性能NOSQL是基于键值对的，可以想象成表中的主键和值的对应关系，而且不需要经过SQL层的解析，所以性能非常高。        2）可扩展性同样也是因为基于键值对，数据之间没有耦合性，所以非常容易水平扩展。    1.1.3.    关系型数据库的优势：        1）复杂查询可以用SQL语句方便的在一个表以及多个表之间做非常复杂的数据查询。        2）事务支持使得对于安全性能很高的数据访问要求得以实现。对于这两类数据库，对方的优势就是自己的弱势，反之亦然。    1.1.4.    总结        关系型数据库与NoSQL数据库并非对立而是互补的关系，即通常情况下使用关系型数据库，在适合使用NoSQL的时候使用NoSQL数据库，        让NoSQL数据库对关系型数据库的不足进行弥补。        一般会将数据存储在关系型数据库中，在nosql数据库中备份存储关系型数据库的数据1.2.主流的NOSQL产品    •    键值(Key-Value)存储数据库            相关产品： Tokyo Cabinet/Tyrant、Redis、Voldemort、Berkeley DB            典型应用： 内容缓存，主要用于处理大量数据的高访问负载。             数据模型： 一系列键值对            优势： 快速查询            劣势： 存储的数据缺少结构化    •    列存储数据库            相关产品：Cassandra, HBase, Riak            典型应用：分布式的文件系统            数据模型：以列簇式存储，将同一列数据存在一起            优势：查找速度快，可扩展性强，更容易进行分布式扩展            劣势：功能相对局限    •    文档型数据库            相关产品：CouchDB、MongoDB            典型应用：Web应用（与Key-Value类似，Value是结构化的）            数据模型： 一系列键值对            优势：数据结构要求不严格            劣势： 查询性能不高，而且缺乏统一的查询语法    •    图形(Graph)数据库            相关数据库：Neo4J、InfoGrid、Infinite Graph            典型应用：社交网络            数据模型：图结构            优势：利用图结构相关算法。            劣势：需要对整个图做计算才能得出结果，不容易做分布式的集群方案。1.3 什么是Redis    Redis是用C语言开发的一个开源的高性能键值对（key-value）数据库，官方提供测试数据，50个并发执行100000个请求,读的速度是110000次/s,写的速度是81000次/s ，且Redis通过提供多种键值数据类型来适应不同场景下的存储需求，目前为止Redis支持的键值数据类型如下：        1) 字符串类型 string        2) 哈希类型 hash        3) 列表类型 list        4) 集合类型 set        5) 有序集合类型 sortedset    1.3.1 redis的应用场景        •    缓存（数据查询、短连接、新闻内容、商品内容等等）        •    聊天室的在线好友列表        •    任务队列。（秒杀、抢购、12306等等）        •    应用排行榜        •    网站访问统计        •    数据过期处理（可以精确到毫秒        •    分布式集群架构中的session分离</code></pre><p><img src="https://img-blog.csdnimg.cn/20200915141116449.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h1><pre><code>1. 官网：https://redis.io/2. 中文网：https://www.redis.net.cn/3. 解压直接使用：     redis.windows.conf: 配置文件    redis-cli.exe:redis的客户端    redis-server.exe:Jedis的服务端</code></pre><h1 id="命令操作"><a href="#命令操作" class="headerlink" title="命令操作"></a>命令操作</h1><h2 id="1-redis的数据结构"><a href="#1-redis的数据结构" class="headerlink" title="1. redis的数据结构"></a>1. redis的数据结构</h2><pre><code>redis 存储的是：key，value格式的数据，其中key都是字符串，value有5种不同的数据结构。    * value的数据结构        1) 字符串类型 string        2) 哈希类型 hash ：map格式        3) 列表类型 list ： linkedlist格式        4) 集合类型 set        5) 有序集合类型 sortedset</code></pre><p><img src="https://img-blog.csdnimg.cn/20200915195437793.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h2 id="2-字符串类型-String"><a href="#2-字符串类型-String" class="headerlink" title="2. 字符串类型  String"></a>2. 字符串类型  String</h2><pre><code>1. 存储： set key value2. 获取： get key3. 删除： del key </code></pre><h2 id="3-哈希类型-hash"><a href="#3-哈希类型-hash" class="headerlink" title="3. 哈希类型  hash"></a>3. 哈希类型  hash</h2><pre><code>1. 储存： hset key field value2. 获取：    * hget key filed ：获取指定的filed对应的值   * hgetall key ：获取所有的filed和value3. 删除： hdel key filed</code></pre><h2 id="4-列表类型-list"><a href="#4-列表类型-list" class="headerlink" title="4.列表类型  list"></a>4.列表类型  list</h2><pre><code>可以添加一个元素到列表的头部（左边）或者尾部（右边）1. 添加：    1. lpush  key value ：将元素加入列表左边     2. rpush  key value ：将元素加入列表右边2. 查询：    lrange key start end : 范围获取3. 删除：    lpop key ：删除列表最左边删除元素，并将元素返回    rpop key ：删除列表最右边删除元素，并将元素返回</code></pre><p><img src="https://img-blog.csdnimg.cn/2020091520305778.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h2 id="5-集合类型-set-：不允许重复元素"><a href="#5-集合类型-set-：不允许重复元素" class="headerlink" title="5.集合类型 set ：不允许重复元素"></a>5.集合类型 set ：不允许重复元素</h2><pre><code>1. 存储： sadd key value2. 获取： smembers key ：获取set集合中所有的元素3. 删除： srem key value ：删除set集合中的某个元素</code></pre><h2 id="6-有序集合类型-sortedset"><a href="#6-有序集合类型-sortedset" class="headerlink" title="6.有序集合类型 sortedset"></a>6.有序集合类型 sortedset</h2><pre><code>1. 存储：zadd key score value2. 获取：zrange key start end ：获取范围3. 删除：zrem key value</code></pre><h2 id="7-通用命令"><a href="#7-通用命令" class="headerlink" title="7.通用命令"></a>7.通用命令</h2><pre><code>1. keys * :查询所有的键2. type key ：获取键值对应的value的类型3. del key ：删除指定的value</code></pre><h1 id="持久化操作"><a href="#持久化操作" class="headerlink" title="持久化操作"></a><a href="http://oldaz.top/2020/09/21/NOSQL%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93-Redis%E6%8C%81%E4%B9%85%E5%8C%96/" target="_blank" rel="noopener">持久化操作</a></h1><h1 id="使用Java客户端操作redis"><a href="#使用Java客户端操作redis" class="headerlink" title="使用Java客户端操作redis"></a><a href="http://oldaz.top/2020/09/22/NOSQL%E9%9D%9E%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93-Jedis%E5%AE%A2%E6%88%B7%E7%AB%AF/" target="_blank" rel="noopener">使用Java客户端操作redis</a></h1>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快速入门 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>轻量级数据交换格式-JSON解析器</title>
      <link href="/2020/09/11/%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%95%B0%E6%8D%AE%E4%BA%A4%E6%8D%A2%E6%A0%BC%E5%BC%8F-JSON%E8%A7%A3%E6%9E%90%E5%99%A8/"/>
      <url>/2020/09/11/%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%95%B0%E6%8D%AE%E4%BA%A4%E6%8D%A2%E6%A0%BC%E5%BC%8F-JSON%E8%A7%A3%E6%9E%90%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200910212459413.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="JSON解析器"><a href="#JSON解析器" class="headerlink" title="JSON解析器"></a>JSON解析器</h1><pre><code>一些封装好的工具常见的解析器：Jsonlib，Gson，fastjson，jackson（今天学习的）</code></pre><a id="more"></a><h1 id="JSON转换为Java对象"><a href="#JSON转换为Java对象" class="headerlink" title="JSON转换为Java对象"></a>JSON转换为Java对象</h1><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><ol><li>导入Jackson的相关jar包</li><li>创建Jackson核心对象ObjectMapper</li><li>调用ObjectMapper的相关方法进行转换</li></ol><ul><li><p>转换方法：</p><pre><code>readValue (json字符串数据，class)</code></pre></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//演示： JSON字符串转换为Java对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.初始化JSON字符串</span></span><br><span class="line">    String json = <span class="string">"&#123;\"name\":\"张三\",\"age\":23,\"gender\":\"男\",\"birthday\":\"2020-09-11\"&#125;"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 创建ObjectMapper对象</span></span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 转换为Java对象 Pertson对象</span></span><br><span class="line">    Person person = mapper.readValue(json, Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    System.out.println(person);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Java对象转换为JSON"><a href="#Java对象转换为JSON" class="headerlink" title="Java对象转换为JSON"></a>Java对象转换为JSON</h1><h2 id="使用步骤-1"><a href="#使用步骤-1" class="headerlink" title="使用步骤"></a>使用步骤</h2><ol><li>导入Jackson的相关jar包</li><li>创建Jackson核心对象ObjectMapper</li><li>调用ObjectMapper的相关方法进行转换</li></ol><ul><li><p>转换方法：</p><pre><code>writeValue(参数1，obj)    参数1：     File：将obj对象转换为JSON字符串，并保存到指定的文件中   writer：将obj对象转换为JSON字符串，并将json数据填充到字符输出流中    OutputStream：将obj对象转换为JSON字符串，并将json数据填充到字节输出流中writeValueAsString(obj):        将对象转换为json字符串</code></pre></li><li><p>注解 </p><pre><code>1. @JsonIgnore：排除属性2. @JsonFormat ：属性值的格式化  (使用时都是加在私有属性上方)</code></pre></li></ul><p><img src="https://img-blog.csdnimg.cn/20200911085742104.png#pic_center" alt=""></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>不包含person实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.web.domain.Person;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JacksonTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//Java 对象转为JSON字符串</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建person对象</span></span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        p.setName(<span class="string">"张三"</span>);</span><br><span class="line">        p.setAge(<span class="number">23</span>);</span><br><span class="line">        p.setGender(<span class="string">"男"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.创建Jackson的核心对象  ObjectMapper</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.转换</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        *   转换方法：</span></span><br><span class="line"><span class="comment">        *        writeValue(参数1，obj)</span></span><br><span class="line"><span class="comment">        *          参数1：</span></span><br><span class="line"><span class="comment">        *               File：将obj对象转换为JSON字符串，并保存到指定的文件中</span></span><br><span class="line"><span class="comment">        *               writer：将obj对象转换为JSON字符串，并将json数据填充到字符输出流中</span></span><br><span class="line"><span class="comment">        *               OutputStream：将obj对象转换为JSON字符串，并将json数据填充到字节输出流中</span></span><br><span class="line"><span class="comment">        *       writeValueAsString(obj):将对象转换为json字符串</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">        String json = mapper.writeValueAsString(p);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//&#123;"name":"张三","age":23,"gender":"男"&#125;</span></span><br><span class="line">        System.out.println(json);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//writeValue.将数据写到中F:/JavaCode/JavaEE/7-JSON/src/a.txt文件中</span></span><br><span class="line">        mapper.writeValue(<span class="keyword">new</span> File(<span class="string">"F:/JavaCode/JavaEE/7-JSON/src/a.txt"</span>),p);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//writeValue.将数据关联到writer中</span></span><br><span class="line">        mapper.writeValue(<span class="keyword">new</span> FileWriter(<span class="string">"F:/JavaCode/JavaEE/7-JSON/src/b.txt"</span>),p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建person对象</span></span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        p.setName(<span class="string">"张三"</span>);</span><br><span class="line">        p.setAge(<span class="number">23</span>);</span><br><span class="line">        p.setGender(<span class="string">"男"</span>);</span><br><span class="line">        p.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.转换</span></span><br><span class="line"></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        String json = mapper.writeValueAsString(p);</span><br><span class="line">        System.out.println(json);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><img src="https://img-blog.csdnimg.cn/20200910230110856.png#pic_center" alt=""><br>test1：<img src="https://img-blog.csdnimg.cn/20200910230126187.png#pic_center" alt=""><br>test2：<br><img src="https://img-blog.csdnimg.cn/20200911090257259.png#pic_center" alt=""></p><h2 id="复杂Java对象转换"><a href="#复杂Java对象转换" class="headerlink" title="复杂Java对象转换"></a>复杂Java对象转换</h2><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><ol><li>List集合：数组</li><li>Map集合 ：对象格式一致</li></ol><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//创建person对象</span></span><br><span class="line">    Person p = <span class="keyword">new</span> Person();</span><br><span class="line">    p.setName(<span class="string">"张三"</span>);</span><br><span class="line">    p.setAge(<span class="number">23</span>);</span><br><span class="line">    p.setGender(<span class="string">"男"</span>);</span><br><span class="line">    p.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">    Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">    p1.setName(<span class="string">"张三"</span>);</span><br><span class="line">    p1.setAge(<span class="number">23</span>);</span><br><span class="line">    p1.setGender(<span class="string">"男"</span>);</span><br><span class="line">    p1.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">    Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line">    p2.setName(<span class="string">"张三"</span>);</span><br><span class="line">    p2.setAge(<span class="number">23</span>);</span><br><span class="line">    p2.setGender(<span class="string">"男"</span>);</span><br><span class="line">    p2.setBirthday(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建List集合</span></span><br><span class="line">    List&lt;Person&gt; ps = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</span><br><span class="line">    ps.add(p);</span><br><span class="line">    ps.add(p1);</span><br><span class="line">    ps.add(p2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.转换</span></span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    String json = mapper.writeValueAsString(ps);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//[&#123;"name":"张三","age":23,"gender":"男","birthday":"2020-09-11"&#125;,&#123;"name":"张三","age":23,"gender":"男","birthday":"2020-09-11"&#125;,&#123;"name":"张三","age":23,"gender":"男","birthday":"2020-09-11"&#125;]</span></span><br><span class="line">    System.out.println(json);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//创建map对象</span></span><br><span class="line">    Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line">    map.put(<span class="string">"name"</span>,<span class="string">"李四"</span>);</span><br><span class="line">    map.put(<span class="string">"age"</span>,<span class="number">23</span>);</span><br><span class="line">    map.put(<span class="string">"gender"</span>,<span class="string">"男"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2.转换</span></span><br><span class="line"></span><br><span class="line">    ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    String json = mapper.writeValueAsString(map);</span><br><span class="line"></span><br><span class="line">    System.out.println(json);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>test3：</p><p><img src="https://img-blog.csdnimg.cn/20200911092227246.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""><br>test4：<br><img src="https://img-blog.csdnimg.cn/20200911092258914.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>轻量级数据交换格式-JSON概念</title>
      <link href="/2020/09/10/%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%95%B0%E6%8D%AE%E4%BA%A4%E6%8D%A2%E6%A0%BC%E5%BC%8F-JSON%E6%A6%82%E5%BF%B5/"/>
      <url>/2020/09/10/%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%95%B0%E6%8D%AE%E4%BA%A4%E6%8D%A2%E6%A0%BC%E5%BC%8F-JSON%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200910211111465.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>JavaScript Object Notation ：JavaScript对象表示法</p><pre><code>JSON现在对于存储和交换信息的语法进行数据的传输JSON 比 XML 更小、更快、更易解析</code></pre><a id="more"></a>    <p>作用（早期）<br>在Java中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> person();</span><br><span class="line">p.setName(<span class="string">"张三"</span>)；</span><br><span class="line">p.setAge(<span class="number">23</span>);</span><br><span class="line">p.setGender(<span class="string">"男"</span>)；</span><br></pre></td></tr></table></figure><p>在JavaScript中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p =&#123;<span class="string">"name"</span>:<span class="string">"张三"</span>,<span class="string">"age"</span>:<span class="string">"23"</span>,<span class="string">"gender"</span>:<span class="string">"男"</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h2 id="基本规则"><a href="#基本规则" class="headerlink" title="基本规则"></a>基本规则</h2><pre><code>1. 数据在名称/值对中：JSON数据是由键值对构成的        * 键用引号（单双都行）引起来，也可以不使用引号        * 值的取值类型：            1. 数字（整数和浮点数）            2. 字符串（在双引号中）            3. 逻辑值（true和false）            4. 数组（在方括号中）{&quot;person&quot;:[{1},{2}]}            5. 对象（在华括号中）{&quot;address&quot;:{&quot;provice&quot;:&quot;陕西...&quot;}}            6. null2. 数据由逗号分隔：多个键值对由逗号分隔3. 花括号保存对象：使用{}定义JSON格式4. 5. 方括号保存数组：[]</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 定义基本格式</span></span><br><span class="line">  <span class="keyword">var</span> person = &#123;<span class="string">"name"</span>:<span class="string">"张三"</span>,<span class="string">"age"</span>:<span class="string">"23"</span>,<span class="string">"gender"</span>:<span class="string">"true"</span>&#125;</span><br><span class="line">  <span class="comment">//alert(person);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//2.嵌套格式&#123;&#125;-&gt;[]</span></span><br><span class="line">  <span class="keyword">var</span> person = &#123;<span class="string">"person"</span>:[</span><br><span class="line">          &#123;<span class="string">"name"</span>:<span class="string">"张三"</span>,<span class="string">"age"</span>:<span class="string">"23"</span>,<span class="string">"gender"</span>:<span class="string">"true"</span>&#125;,</span><br><span class="line">          &#123;<span class="string">"name"</span>:<span class="string">"李四"</span>,<span class="string">"age"</span>:<span class="string">"24"</span>,<span class="string">"gender"</span>:<span class="string">"true"</span>&#125;,</span><br><span class="line">          &#123;<span class="string">"name"</span>:<span class="string">"王五"</span>,<span class="string">"age"</span>:<span class="string">"21"</span>,<span class="string">"gender"</span>:<span class="string">"false"</span>&#125;]&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//alert(persons);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//2.嵌套格式 [] --&gt; &#123;&#125;</span></span><br><span class="line">   <span class="keyword">var</span> ps = [</span><br><span class="line">       &#123;<span class="string">"name"</span>:<span class="string">"张三"</span>,<span class="string">"age"</span>:<span class="string">"23"</span>,<span class="string">"gender"</span>:<span class="string">"true"</span>&#125;,</span><br><span class="line">       &#123;<span class="string">"name"</span>:<span class="string">"李四"</span>,<span class="string">"age"</span>:<span class="string">"24"</span>,<span class="string">"gender"</span>:<span class="string">"true"</span>&#125;,</span><br><span class="line">       &#123;<span class="string">"name"</span>:<span class="string">"王五"</span>,<span class="string">"age"</span>:<span class="string">"21"</span>,<span class="string">"gender"</span>:<span class="string">"false"</span>&#125;]</span><br><span class="line">   <span class="comment">//alert(ps);</span></span><br></pre></td></tr></table></figure><h2 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h2><pre><code>1. JSON对象： 对象.键名2. JSON对象[&quot;键名&quot;]3. 数组对象[索引]</code></pre><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 定义基本格式</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;<span class="string">"name"</span>:<span class="string">"张三"</span>,<span class="string">"age"</span>:<span class="string">"23"</span>,<span class="string">"gender"</span>:<span class="string">"true"</span>&#125;</span><br><span class="line"><span class="comment">//alert(person);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取name值</span></span><br><span class="line"><span class="comment">// var name = person.name;</span></span><br><span class="line"><span class="keyword">var</span> name = person[<span class="string">"name"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.嵌套格式&#123;&#125;-&gt;[]</span></span><br><span class="line"><span class="keyword">var</span> persons = &#123;<span class="string">"person"</span>:[</span><br><span class="line">        &#123;<span class="string">"name"</span>:<span class="string">"张三"</span>,<span class="string">"age"</span>:<span class="string">"23"</span>,<span class="string">"gender"</span>:<span class="string">"true"</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"name"</span>:<span class="string">"李四"</span>,<span class="string">"age"</span>:<span class="string">"24"</span>,<span class="string">"gender"</span>:<span class="string">"true"</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"name"</span>:<span class="string">"王五"</span>,<span class="string">"age"</span>:<span class="string">"21"</span>,<span class="string">"gender"</span>:<span class="string">"false"</span>&#125;]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//alert(persons);</span></span><br><span class="line"> <span class="comment">//获取王五值</span></span><br><span class="line"><span class="keyword">var</span> name2 = persons.person[<span class="number">2</span>].name;</span><br><span class="line"><span class="built_in">console</span>.log(name2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//2.嵌套格式 [] --&gt; &#123;&#125;</span></span><br><span class="line"> <span class="keyword">var</span> ps = [</span><br><span class="line">     &#123;<span class="string">"name"</span>:<span class="string">"张三"</span>,<span class="string">"age"</span>:<span class="string">"23"</span>,<span class="string">"gender"</span>:<span class="string">"true"</span>&#125;,</span><br><span class="line">     &#123;<span class="string">"name"</span>:<span class="string">"李四"</span>,<span class="string">"age"</span>:<span class="string">"24"</span>,<span class="string">"gender"</span>:<span class="string">"true"</span>&#125;,</span><br><span class="line">     &#123;<span class="string">"name"</span>:<span class="string">"王五"</span>,<span class="string">"age"</span>:<span class="string">"21"</span>,<span class="string">"gender"</span>:<span class="string">"false"</span>&#125;]</span><br><span class="line"> <span class="comment">//alert(ps);</span></span><br><span class="line"><span class="comment">//获取李四值</span></span><br><span class="line"> <span class="built_in">console</span>.log(ps[<span class="number">1</span>].name)</span><br><span class="line"></span><br><span class="line"> <span class="comment">//获取ps[1]对象中所有的键和值</span></span><br><span class="line"> <span class="comment">//for in 循环</span></span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> ps[<span class="number">1</span>])&#123;</span><br><span class="line"></span><br><span class="line">     <span class="built_in">console</span>.log(key+<span class="string">":"</span>+ps[<span class="number">1</span>][key]);</span><br><span class="line">     <span class="comment">//这样的方式不行，相当于person."name"</span></span><br><span class="line">     <span class="built_in">console</span>.log(key+<span class="string">":"</span>+ps[<span class="number">1</span>].key);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">//获取ps的数组i</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= ps.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> p = ps[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> p)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(key+<span class="string">"="</span>+p[key]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="取数据结果"><a href="#取数据结果" class="headerlink" title="取数据结果"></a>取数据结果</h3><p><img src="https://img-blog.csdnimg.cn/20200910210403228.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaEE核心技术之Listener监听器</title>
      <link href="/2020/09/10/JavaEE%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B9%8BListener%E7%9B%91%E5%90%AC%E5%99%A8/"/>
      <url>/2020/09/10/JavaEE%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B9%8BListener%E7%9B%91%E5%90%AC%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200910164225960.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>   web的三大组件之一。</p><a id="more"></a><pre><code>事件监听机制：    * 事件：一件事情    * 事件源：事情发生的地方    * 监听器：一个对象    * 注册监听：将事件、事件源、监听器绑定在一起。         当事件源发生发生某个事件后，执行监视器代码。</code></pre><h1 id="ServletContextListener"><a href="#ServletContextListener" class="headerlink" title="ServletContextListener"></a>ServletContextListener</h1><p>监听ServletContext对象的创建和销毁</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><pre><code>void contextDestoryed(ServletContextEvent  sce)：                    ServletContext对象销毁之前会调用此方法。void contextInitialized(ServletContextEvent sce) ：                    ServletContext对象创建前会调用此方法。</code></pre><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li><p>定义一个类，实现ServletContextListener接口</p></li><li><p>复写方法</p></li><li><p>配置</p><pre><code>1. web.xml</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置监听器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.web.listener.ContextLoaderLitsener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--指定初始化参数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>/WEB-INF/classes/applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>注解设置<br>同Servlet和Filter一样在前面加入注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@webListener</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="监听器代码"><a href="#监听器代码" class="headerlink" title="监听器代码"></a>监听器代码</h2><p>加载配置文件进内存<br><img src="https://img-blog.csdnimg.cn/20200910163939842.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextListener;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextLoaderLitsener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line">    <span class="comment">//监听ServletContext对象创建的。ServletContext对服务器启动后自动创建。</span></span><br><span class="line">    <span class="comment">//在服务器自动启动后被调用</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//加载资源</span></span><br><span class="line">        <span class="comment">//1. 获取ServletContext对象</span></span><br><span class="line">        ServletContext servletContext = servletContextEvent.getServletContext();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 加载资源文件</span></span><br><span class="line">        String contextConfigLocation = servletContext.getInitParameter(<span class="string">"contextConfigLocation"</span>);</span><br><span class="line">        <span class="comment">//3.获取真实路径</span></span><br><span class="line">        String realPath = servletContext.getRealPath(contextConfigLocation);</span><br><span class="line">        <span class="comment">//4.加载进内存</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileInputStream fis = <span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line">            System.out.println(fis);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"ServletContext被创建了。。。"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在服务器关闭后，ServletContext对象被销毁，当服务器正常关闭后该方法被调用</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ServletContext被销毁了。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
            <tag> Listener </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaEE核心技术之Filter案例</title>
      <link href="/2020/09/10/JavaEE%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B9%8BFilter%E6%A1%88%E4%BE%8B/"/>
      <url>/2020/09/10/JavaEE%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B9%8BFilter%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200910093135782.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="案例一：登录验证"><a href="#案例一：登录验证" class="headerlink" title="案例一：登录验证"></a>案例一：登录验证</h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><pre><code>1. 访问项目案例的资源。验证其实是否登录、2. 如果登录直接放行3. 如果没有登录，则会跳转到登录页面，提示“您尚未登录，请先登录”。</code></pre><a id="more"></a><p><img src="https://img-blog.csdnimg.cn/20200907182007957.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h2 id="Filter代码"><a href="#Filter代码" class="headerlink" title="Filter代码"></a>Filter代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.web.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录验证的过滤器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebFilter</span>(urlPatterns = <span class="string">"/*"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 资源亲求路径</span></span><br><span class="line">        String uri = request.getRequestURI();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 判断是否包含相关的路径,要注意排除掉 css/js/图片/验证码资源</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (uri.contains(<span class="string">"/login.jsp"</span>) || uri.contains(<span class="string">"/loginServlet"</span>) || uri.contains(<span class="string">"/css/"</span>) || uri.contains(<span class="string">"/js/"</span>) || uri.contains(<span class="string">"/fonts/"</span>) || uri.contains(<span class="string">"/checkCodeServlet"</span>)) &#123;</span><br><span class="line">            <span class="comment">//包含登录页的信息，放行</span></span><br><span class="line">            chain.doFilter(req, resp);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//不包含登录页的信息，判断是否已经登录</span></span><br><span class="line">            <span class="comment">//获取session对象</span></span><br><span class="line">            Object user = request.getSession().getAttribute(<span class="string">"user"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (user != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//登陆了，放行</span></span><br><span class="line">                chain.doFilter(req, resp);</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                request.setAttribute(<span class="string">"login_msg"</span>,<span class="string">"您尚未登录，请登录！"</span>);</span><br><span class="line">                System.out.println(request.getAttribute(<span class="string">"login_msg"</span>));</span><br><span class="line">                request.getRequestDispatcher(<span class="string">"/login.jsp"</span>).forward(request,resp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="案例二：敏感词过滤"><a href="#案例二：敏感词过滤" class="headerlink" title="案例二：敏感词过滤"></a>案例二：敏感词过滤</h1><h2 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a>需求</h2><pre><code>1. 对案例录入的数据进行敏感词过滤2. 敏感词参考《敏感词.txt》3. 如果为敏感词，则替换为 ***</code></pre><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><pre><code>1. 对request对象进行增强。增强获取参数相关参数2. 放行。传递代理对象。</code></pre><p>增强对象的功能<br><img src="https://img-blog.csdnimg.cn/20200909175949861.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 敏感词汇过滤器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebFilter</span>(urlPatterns = <span class="string">"/*"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SensitiveWordsFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取代理对象，增强getParameter方法</span></span><br><span class="line"></span><br><span class="line">        ServletRequest proxy_req = (ServletRequest)Proxy.newProxyInstance(req.getClass().getClassLoader(), req.getClass().getInterfaces(), <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="comment">//增强getParamter方法</span></span><br><span class="line">                <span class="comment">//判断是否为getParamter方法</span></span><br><span class="line">                <span class="keyword">if</span> (method.getName().equals(<span class="string">"getParamter"</span>))&#123;</span><br><span class="line">                    <span class="comment">//增强返回值</span></span><br><span class="line">                    <span class="comment">//获取返回值</span></span><br><span class="line">                    String value = (String)method.invoke(req,args);</span><br><span class="line">                    <span class="keyword">if</span> (value!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                        <span class="keyword">for</span> (String str:list) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (value.contains(str)) &#123;</span><br><span class="line">                                value.replaceAll(str,<span class="string">"****"</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> value;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//判断方法名是否是 getParameterMap</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//判断方法名是否是 getParameterValue</span></span><br><span class="line">                <span class="keyword">return</span> method.invoke(req,args);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//2.放行</span></span><br><span class="line">        chain.doFilter(proxy_req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();<span class="comment">//敏感词汇集合</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.加载文件</span></span><br><span class="line">             ServletContext servletContext = config.getServletContext();</span><br><span class="line">             String realPath = servletContext.getRealPath(<span class="string">"/WEB-INF/classes/敏感词汇.txt"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.读取文件</span></span><br><span class="line">            BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(realPath));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.将文件的每一行数据设置或者添加到list中</span></span><br><span class="line">            String line = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span>((line =br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                list.add(line);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            br.close();</span><br><span class="line">            System.out.println(list);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><pre><code>一共23种，一些通用的解决问题的方式。</code></pre><h2 id="装饰模式"><a href="#装饰模式" class="headerlink" title="装饰模式"></a>装饰模式</h2><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><pre><code>1. 真实对象：被代理的对象 （下图背景北京的代理商）2. 代理对象：（下图西安卖电脑的）3. 代理模式：代理对象代理真实对象，达到增强真实功能的目的。</code></pre><p><img src="https://img-blog.csdnimg.cn/20200909180119853.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><pre><code>1. 静态代理：有一个类文件描述代理模式2. 动态代理：在内存中来形成代理类    *实现步骤        1.  代理对象和真实对象实现相同的接口        2. 代理对象 = proxy.newProxyInstance();        3. 使用代理对象来调用方法。        4. 增强方法    *增强方式：        1. 增强参数列表        2. 增强返回值类型        3. 增强方法体执行逻辑</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.proxy.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.proxy.SaleComputer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建真实的对象</span></span><br><span class="line">        Lenovo lenovo = <span class="keyword">new</span> Lenovo();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 动态代理增强lenovo方法</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 三个加载器：</span></span><br><span class="line"><span class="comment">        *       1.真实对象.getClass().getClassLoader()  --类加载器</span></span><br><span class="line"><span class="comment">        *       2.接口数组：真实对象.getClass().getInterfaces()   --保证代理对象和真实对象实现的接口</span></span><br><span class="line"><span class="comment">        *       3.处理器：new InvocationHandle()  --核心业务逻辑的处理</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        SaleComputer proxy_lenovo = (SaleComputer) Proxy.newProxyInstance(lenovo.getClass().getClassLoader(), lenovo.getClass().getInterfaces(), <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line"></span><br><span class="line">           <span class="comment">/*</span></span><br><span class="line"><span class="comment">           * 代理逻辑编写的方法：</span></span><br><span class="line"><span class="comment">           *        代理对象调用的多有方法都会出发该方法执行</span></span><br><span class="line"><span class="comment">           *       参数：</span></span><br><span class="line"><span class="comment">           *        1.proxy：代理对象</span></span><br><span class="line"><span class="comment">           *        2.method:代理对象调用方法</span></span><br><span class="line"><span class="comment">           *        3.args：代理对象调用的方法时,传递的实际参数</span></span><br><span class="line"><span class="comment">           *</span></span><br><span class="line"><span class="comment">           * */</span></span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="comment">/*                System.out.println("该方法执行了。。。");</span></span><br><span class="line"><span class="comment">                System.out.println(method.getName());</span></span><br><span class="line"><span class="comment">                System.out.println(args[0]);*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (method.getName().equals(<span class="string">"sale"</span>)) &#123;</span><br><span class="line">                    <span class="comment">//1. 增强参数</span></span><br><span class="line">                    <span class="keyword">double</span> money = (<span class="keyword">double</span>) args[<span class="number">0</span>];</span><br><span class="line">                    money = money*<span class="number">0.85</span>;</span><br><span class="line"></span><br><span class="line">                    System.out.println(<span class="string">"专车接你。。。"</span>);</span><br><span class="line">                    <span class="comment">//使用真实对象调用方法</span></span><br><span class="line">                    String obj = (String) method.invoke(lenovo, money);</span><br><span class="line">                    System.out.println(<span class="string">"免费送货。。。"</span>);</span><br><span class="line">                    <span class="comment">//增强返回值</span></span><br><span class="line">                    <span class="keyword">return</span> obj+<span class="string">"_鼠标垫"</span>;</span><br><span class="line"></span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//使用真实对象该方法</span></span><br><span class="line">                    Object obj = method.invoke(lenovo, args);</span><br><span class="line">                    <span class="keyword">return</span> obj;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        String computer = proxy_lenovo.sale(<span class="number">7000</span>);</span><br><span class="line">        System.out.println(computer);</span><br><span class="line">        proxy_lenovo.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
            <tag> Filter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaEE核心技术之Filter过滤器</title>
      <link href="/2020/09/07/JavaEE%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B9%8BFilter%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
      <url>/2020/09/07/JavaEE%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B9%8BFilter%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200907154733350.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><pre><code>*生活中的过滤器：净水器，空气净化器...web中的过滤器：当访问服务器资源时，过滤器可以将请求拦下来，                完成一些特殊的功能</code></pre><a id="more"></a><pre><code>过滤器的作用：        一般用于完成通过的操作。如：登录验证，统一编码处理，敏感字符过滤...</code></pre><h1 id="快速入门："><a href="#快速入门：" class="headerlink" title="快速入门："></a>快速入门：</h1><h2 id="1-步骤："><a href="#1-步骤：" class="headerlink" title="1. 步骤："></a>1. 步骤：</h2><pre><code>1. 定义一个类，实现接口Filter2. 复写方法3. 配置拦截路径</code></pre><h2 id="2-代码"><a href="#2-代码" class="headerlink" title="2. 代码"></a>2. 代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter</span>(<span class="string">"/*"</span>) <span class="comment">//访问所有的资源之前，都会执行该过滤器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterDemo1</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"FilterDemo1被执行了。。。"</span>);</span><br><span class="line">        <span class="comment">//放行</span></span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-过滤器细节："><a href="#3-过滤器细节：" class="headerlink" title="3. 过滤器细节："></a>3. 过滤器细节：</h2><h3 id="1-web-xml配置"><a href="#1-web-xml配置" class="headerlink" title="1. web.xml配置"></a>1. web.xml配置</h3><p>和配置servlet基本一样的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.web.filter.FilterDemo1<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--拦截路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-执行流程"><a href="#2-执行流程" class="headerlink" title="2.  执行流程"></a>2.  执行流程</h3><pre><code>1. 执行过滤器2. 执行放行后的资源3. 回来执行放行代码下边的代码 </code></pre><p><img src="https://img-blog.csdnimg.cn/20200906211207560.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">       <span class="comment">//对request对象请求消息增强</span></span><br><span class="line">       System.out.println(<span class="string">"filterDemo2..."</span>);</span><br><span class="line">       <span class="comment">//放行</span></span><br><span class="line">       chain.doFilter(req, resp);</span><br><span class="line">       <span class="comment">//对response对象的响应消息增强</span></span><br><span class="line">       System.out.println(<span class="string">"filterDemo2回来了。。。。"</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="3-过滤器生命周期方法"><a href="#3-过滤器生命周期方法" class="headerlink" title="3. 过滤器生命周期方法"></a>3. 过滤器生命周期方法</h3><pre><code>1. init:在服务器启动后，会创建Filter对象，         然后调用init方法.只执行一次2. doFilter:           每一次请求被拦截时，会被执行，执行多次。3. destroy:        在服务器关闭后，filter对象被销毁，        如果是正常关闭，然后调用destroy方法，执行一次。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> OldAZ-PC</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebFilter</span>(urlPatterns = <span class="string">"/FilterDemo3"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterDemo3</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 在服务器启动后，会创建Filter对象，然后调用init方法.只执行一次。</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"init。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*每一次请求被拦截时，会被执行，执行多次。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"doFilter。。。"</span>);</span><br><span class="line">        chain.doFilter(req, resp);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 在服务器关闭后，filter对象被销毁，如果是正常关闭，然后调用destroy方法，执行一次。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"destroy..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-过滤器配置详解"><a href="#4-过滤器配置详解" class="headerlink" title="4. 过滤器配置详解"></a>4. 过滤器配置详解</h3><h4 id="拦截路径配置"><a href="#拦截路径配置" class="headerlink" title="拦截路径配置"></a>拦截路径配置</h4><pre><code>1. 具体路径资源：    /index.jsp    只有当访问index.jsp时，过滤器才会被执行。2. 拦截目录：    /user/*       访问/user下的所有资源时，过滤器会被执行3. 后缀名拦截    *.jsp         访问所有的jsp资源时，过滤器会被执行4. 拦截所有的资源     /*           访问所有资源时，过滤器都会被执行。</code></pre><h4 id="拦截方式的配置"><a href="#拦截方式的配置" class="headerlink" title="拦截方式的配置"></a>拦截方式的配置</h4><p>资源被访问的方式：</p><ol><li>注解配置</li></ol><ul><li><p>设置dispatcher属性</p><pre><code>- REQUEST：默认值，浏览器直接请求资源</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*浏览器直接请求index.jsp时，该过滤器会被执行*/</span></span><br><span class="line"><span class="meta">@WebFilter</span>(urlPatterns = <span class="string">"/index.jsp"</span>,dispatcherTypes = DispatcherType.REQUEST)</span><br></pre></td></tr></table></figure><ul><li><p>FOEWORD：转发访问资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*只有浏览器转发访问index.jsp时，该过滤器会被执行*/</span></span><br><span class="line"><span class="meta">@WebFilter</span>(urlPatterns = <span class="string">"/index.jsp"</span>,dispatcherTypes = DispatcherType.REQUEST)</span><br></pre></td></tr></table></figure><pre><code>- INCLUSE：包含访问资源- ERROR:错误跳转资源- ASYNC：一部访问资源</code></pre></li></ul></li></ul><p>同时设置多个执行条件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*浏览器直接访问或者转发访问index.jsp时，该过滤器会被执行*/</span></span><br><span class="line"><span class="meta">@WebFilter</span>(urlPatterns = <span class="string">"/index.jsp"</span>,dispatcherTypes = &#123;DispatcherType.REQUEST,DispatcherType.FORWARD&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li>web.xml </li></ol><pre><code>设置&lt;dispatcherTypes&gt;&lt;/dispatcherTypes&gt;</code></pre><h3 id="5-过滤器链（配置多个过滤器）"><a href="#5-过滤器链（配置多个过滤器）" class="headerlink" title="5. 过滤器链（配置多个过滤器）"></a>5. 过滤器链（配置多个过滤器）</h3><pre><code>配置多个过滤器，可以同时生效</code></pre><h4 id="执行顺序和先后"><a href="#执行顺序和先后" class="headerlink" title="执行顺序和先后"></a>执行顺序和先后</h4><p>如果有两个过滤器，过滤器1和过滤器2</p><ul><li><p>执行顺序：</p><pre><code>1. 过滤器12. 过滤器23. 资源执行4. 过滤器25. 过滤器1 </code></pre></li><li><p>过滤器先后顺序问题</p></li></ul><ol><li><p>注解配置</p><pre><code>按照类名字符串的字符串进行逐个比较，值小的先被执行。例：AFilter和BFliter两个过滤器，AFilter先执行。</code></pre></li><li><p>web.xml</p><pre><code>谁的&lt;filter-mapping&gt;&lt;/filter-mapping&gt;定义在上面，谁先执行</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
            <tag> Filter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaEE页面技术之JSTL标签&amp;小案例</title>
      <link href="/2020/09/04/JavaEE%E9%A1%B5%E9%9D%A2%E6%8A%80%E6%9C%AF%E4%B9%8BJSTL%E6%A0%87%E7%AD%BE&amp;%E5%B0%8F%E6%A1%88%E4%BE%8B/"/>
      <url>/2020/09/04/JavaEE%E9%A1%B5%E9%9D%A2%E6%8A%80%E6%9C%AF%E4%B9%8BJSTL%E6%A0%87%E7%AD%BE&amp;%E5%B0%8F%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200904213132605.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><pre><code>JavaServer Pages Tag Library   ：  JSP标准标签库* 是由Apache组织提供的开源的免费的JSP标签</code></pre><h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><pre><code>用户简化和替换JSP页面上的Java代码</code></pre><a id="more"></a><h1 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h1><pre><code>1. 导入JSTL相关的jar包2. 引入标签库： taglib指令 &lt;%@ taglib =&quot;&quot; prefix=&quot;&quot;%&gt;3. 使用标签</code></pre><h1 id="常用的JSTL标签"><a href="#常用的JSTL标签" class="headerlink" title="常用的JSTL标签"></a>常用的JSTL标签</h1><ol><li><p>if  </p><pre><code>相当于Java代码的if语句</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%--</span></span></span><br><span class="line"><span class="tag">        <span class="attr">1.test</span> 必须属性，接受<span class="attr">boolean</span>表达式</span></span><br><span class="line"><span class="tag">          如果表达式为<span class="attr">true</span>，则显示<span class="attr">if</span>标签体内容，如果为<span class="attr">false</span>，则不显示标签体内容。</span></span><br><span class="line"><span class="tag">          一般情况下，<span class="attr">test</span>属性值会结合<span class="attr">el</span>表达式一起使用</span></span><br><span class="line"><span class="tag"></span></span><br><span class="line">        2.没有else，若是想用else，则只能再写一份&lt;c:if ...&gt;</span><br><span class="line"></span><br><span class="line">    --%&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">c:if</span> <span class="attr">test</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        我是真...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">c:if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag">        //判断<span class="attr">request</span>域中一个<span class="attr">list</span>集合为空，如果不为空，则显示遍历集合</span></span><br><span class="line"><span class="tag">        <span class="attr">List</span> <span class="attr">list</span> = <span class="string">new</span> <span class="attr">ArrayList</span>();</span></span><br><span class="line"><span class="tag">        <span class="attr">list.add</span>("<span class="attr">aaa</span>");</span></span><br><span class="line"><span class="tag">        <span class="attr">request.setAttribute</span>("<span class="attr">number</span>",<span class="attr">3</span>);</span></span><br><span class="line"><span class="tag">        <span class="attr">request.setAttribute</span>("<span class="attr">list</span>",<span class="attr">list</span>);</span></span><br><span class="line"><span class="tag">    %&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">c:if</span> <span class="attr">test</span>=<span class="string">"$&#123;not empty list&#125;"</span>&gt;</span></span><br><span class="line">        遍历集合</span><br><span class="line">    <span class="tag">&lt;/<span class="name">c:if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">c:if</span> <span class="attr">test</span>=<span class="string">"$&#123;number % 2 !=0&#125;"</span>&gt;</span></span><br><span class="line">        $&#123;number&#125;为奇数</span><br><span class="line">    <span class="tag">&lt;/<span class="name">c:if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">c:if</span> <span class="attr">test</span>=<span class="string">"$&#123;number % 2 ==0&#125;"</span>&gt;</span></span><br><span class="line">        $&#123;number&#125;为偶数</span><br><span class="line">    <span class="tag">&lt;/<span class="name">c:if</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>choose </p><p>   相当于 Java代码的switch</p></li></ol></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">        &lt;%--</span><br><span class="line">        完成对应数字编号对应星期几的案例</span><br><span class="line">            <span class="number">1</span>. 域中c储存一数字</span><br><span class="line">            <span class="number">2</span>. 使用choose标签取出数字，        相当于<span class="keyword">switch</span>声明</span><br><span class="line">            <span class="number">3</span>. 使用when标签做出判断，          相当于<span class="keyword">case</span></span><br><span class="line">            <span class="number">4</span>. otherwise标签做其他情况的声明 ，相当于<span class="keyword">default</span></span><br><span class="line">        --%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">request.setAttribute(<span class="string">"number"</span>,<span class="number">3</span>);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:choose&gt;</span><br><span class="line">    &lt;c:when test="number==1"&gt;星期一&lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test="number==2"&gt;星期二&lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test="number==3"&gt;星期三&lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test="number==4"&gt;星期四&lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test="number==5"&gt;星期五&lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test="number==6"&gt;星期六&lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test="number==7"&gt;星期天&lt;/c:when&gt;</span><br><span class="line">    &lt;c:otherwise&gt;输入有误&lt;/c:otherwise&gt;</span><br><span class="line"></span><br><span class="line">&lt;/c:choose&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>foreach  </p><pre><code>相当于Java代码的for语句</code></pre></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">    &lt;%--</span><br><span class="line">    foreach:相当Java的<span class="keyword">for</span>语句</span><br><span class="line">    <span class="number">1</span>. 完成重复的操作</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;\</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">     属性：</span><br><span class="line">        begin：开始值</span><br><span class="line">        end：结束值</span><br><span class="line">        <span class="keyword">var</span>：临时变量</span><br><span class="line">        step：步长</span><br><span class="line">        varStatus:循环对象</span><br><span class="line">            包含俩对象</span><br><span class="line">            index：容器中循环的索引，从<span class="number">0</span>开始</span><br><span class="line">            count：循环次数，从<span class="number">1</span>开始</span><br><span class="line"></span><br><span class="line">    <span class="number">2</span>，遍历容器</span><br><span class="line">    Lis&lt;User&gt; list;</span><br><span class="line">    <span class="keyword">for</span>(User user : list)&#123;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    --%&gt;</span><br><span class="line"></span><br><span class="line">    &lt;c:forEach begin=<span class="string">"1"</span> end=<span class="string">"10"</span> <span class="keyword">var</span>=<span class="string">"1"</span> step=<span class="string">"1"</span> varStatus=<span class="string">"s"</span>&gt;</span><br><span class="line">        $&#123;i&#125;&lt;br/&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr/&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    list.add(<span class="string">"aaa"</span>);</span><br><span class="line">    list.add(<span class="string">"bbb"</span>);</span><br><span class="line">    list.add(<span class="string">"ccc"</span>);</span><br><span class="line"></span><br><span class="line">    request.setAttribute(<span class="string">"list"</span>,list);</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">    &lt;c:forEach items=<span class="string">"$&#123;list&#125;"</span> <span class="keyword">var</span>=<span class="string">"str"</span> varStatus=<span class="string">"s"</span>&gt;</span><br><span class="line"></span><br><span class="line">        $&#123;s.index&#125; $&#123;s.count&#125; $&#123;str&#125;&lt;br/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><h1 id="小案例"><a href="#小案例" class="headerlink" title="小案例"></a>小案例</h1><pre><code>需求：        在request域中有一个存有User对象的List集合。        需要使用jstl +el 将集合数据展示到JSP页面的表格table中</code></pre><p><img src="https://img-blog.csdnimg.cn/20200904212510245.png#pic_center" alt=""></p><p>JSP代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"com.web.domain.User"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.ArrayList"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.List"</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.Date"</span> %&gt;&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: OldAZ-PC</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">9</span>/<span class="number">4</span></span><br><span class="line">  Time: <span class="number">21</span>:<span class="number">04</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;案例&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;%</span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="keyword">new</span> User(<span class="string">"张三"</span>,<span class="number">23</span>,<span class="keyword">new</span> Date()));</span><br><span class="line">        list.add(<span class="keyword">new</span> User(<span class="string">"李四"</span>,<span class="number">25</span>,<span class="keyword">new</span> Date()));</span><br><span class="line">        list.add(<span class="keyword">new</span> User(<span class="string">"王老五"</span>,<span class="number">26</span>,<span class="keyword">new</span> Date()));</span><br><span class="line">        request.setAttribute(<span class="string">"list"</span>,list);</span><br><span class="line"></span><br><span class="line">    %&gt;</span><br><span class="line"></span><br><span class="line">&lt;table border=<span class="string">"1px"</span> width=<span class="string">"500"</span> align=<span class="string">"center"</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;编号&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;姓名&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;年龄&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;日期&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">"$&#123;list&#125;"</span> <span class="keyword">var</span>=<span class="string">"user"</span> varStatus=<span class="string">"s"</span>&gt;</span><br><span class="line">        &lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;s.count%2==0&#125;"</span>&gt;</span><br><span class="line">        &lt;tr bgcolor=<span class="string">"#d2691e"</span>&gt;</span><br><span class="line">            &lt;td&gt;$&#123;s.count&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;user.name&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;user.age&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;user.birStr&#125;&lt;/td&gt;</span><br><span class="line">        &lt;/c:if&gt;</span><br><span class="line"></span><br><span class="line">        &lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;s.count%2!=0&#125;"</span>&gt;</span><br><span class="line">        &lt;tr bgcolor=<span class="string">"#00ffff"</span>&gt;</span><br><span class="line">            &lt;td&gt;$&#123;s.count&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;user.name&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;user.age&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;user.birStr&#125;&lt;/td&gt;</span><br><span class="line">        &lt;/c:if&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>User代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> OldAZ-PC</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//逻辑视图</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> age, Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBirStr</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (birthday != <span class="keyword">null</span>) &#123;</span><br><span class="line">            SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-mm-dd  HH:mm:ss"</span>);</span><br><span class="line">            <span class="keyword">return</span> sdf.format(birthday);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
            <tag> JSTL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaEE页面显示技术之EL表达式</title>
      <link href="/2020/09/04/JavaEE%E9%A1%B5%E9%9D%A2%E6%98%BE%E7%A4%BA%E6%8A%80%E6%9C%AF%E4%B9%8BEL%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2020/09/04/JavaEE%E9%A1%B5%E9%9D%A2%E6%98%BE%E7%A4%BA%E6%8A%80%E6%9C%AF%E4%B9%8BEL%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200904162743801.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>Expression Language 表达式语言</p><h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><p>替换和简化JSP页面中的Java代码的编写</p><a id="more"></a><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p>${表达式}</p><pre><code>注意：1. JSP页面中默认支持EL表达式2. 忽略EL表达式：设置jsp的Page指令中：isELIgnored=&quot;true&quot;3. 忽略单句EL表达式：加一个反斜线  \</code></pre><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol><li><p>运算</p><pre><code>1. 算数运算符： + - * /(div)  %(mod)2. 比较运算符： &gt;  &lt;   &gt;=  ==  !=3. 逻辑运算符： &amp;&amp;  ||   ！4. 空运算符：empty    功能：用于判断字符串，集合，数组对象是否 为null并且长度是否为0    ${empty list}：          判断是否为null或者长度为0    ${not empty list}:          判断是否不为null并且长度大于0</code></pre></li><li><p>获取值</p><pre><code>1. el表达式只能从域对象中获取值</code></pre><h1 id="语法："><a href="#语法：" class="headerlink" title="语法："></a>语法：</h1></li></ol><h2 id="1-域名称-键名"><a href="#1-域名称-键名" class="headerlink" title="1. $域名称.键名}"></a>1. $域名称.键名}</h2><pre><code>从指定的域中获取指键的值。    域名称：     1. PageScope      --&gt;   pageContext     2. requestScope   --&gt;  request     3. sessionScope   --&gt;  session     4. applicationScope --&gt; application(ServletContext)         举例：在request域中存储了name=张三        获取：$(request.name)</code></pre><p><img src="https://img-blog.csdnimg.cn/20200904095410773.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h2 id="2-键名"><a href="#2-键名" class="headerlink" title="2. ${键名}"></a>2. ${键名}</h2><p>表示依次从最小的域中查找是否有该键对应的值，直到找到为止。</p><p><img src="https://img-blog.csdnimg.cn/20200904100310100.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h2 id="3-获取对象"><a href="#3-获取对象" class="headerlink" title="3. 获取对象"></a>3. 获取对象</h2><p>获取LIst集合，Map集合的值</p><ol><li><p>对象：    </p><pre><code>${域对象.键名.属性名}    本质上是会去调用对象的getter方法 </code></pre></li><li><p>List集合：</p><pre><code>${域名.键名[索引]}    （EL中索引越界，不显示）</code></pre></li><li><p>Map集合：</p><pre><code>${域名称.键名.key名称}    ${域名称.键名[&quot;key名称&quot;]}    </code></pre></li></ol><h2 id="4-隐式对象"><a href="#4-隐式对象" class="headerlink" title="4. 隐式对象"></a>4. 隐式对象</h2><pre><code>pageContext:  获取jsp其他8个内置对象${pageContext.request.contextPath}:动态获取虚拟目录</code></pre><p>注：EL表达式一共有11个隐式对象</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
            <tag> EL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaEE开发模式之MVC</title>
      <link href="/2020/09/04/JavaEE%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F%E4%B9%8BMVC/"/>
      <url>/2020/09/04/JavaEE%E5%BC%80%E5%8F%91%E6%A8%A1%E5%BC%8F%E4%B9%8BMVC/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200904092017301.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="JSP演变史"><a href="#JSP演变史" class="headerlink" title="JSP演变史"></a>JSP演变史</h1><pre><code>1. 早期只有servlet，只能使用response输出标签数据，非常麻烦2. 后来有了JSP，简化的Servlet开发，如果过度使用JSP，在jsp中写了大量的Java代码，又写html表，造成维护困难，难于分工合作3. 再后来，Java的web开发，借鉴MVC开发模式，使得程序的设计更加合理性。</code></pre><a id="more"></a><h1 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h1><pre><code>1. M：model ，模型 （JavaBean）    *完成具体的业务2. V:view ,控制器  （JSP）    *展示数据3. C：Controller，控制器 （Servlet）    * 用户获取输入    * 调用模型    * 将数据交给视图进行展示</code></pre><p><img src="https://img-blog.csdnimg.cn/20200904090640849.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="MVC特点"><a href="#MVC特点" class="headerlink" title="MVC特点"></a>MVC特点</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>耦合性低，方便维护，利于分工合作。</li><li>重用性高<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2></li><li>使得项目架构变得复杂，对开发人员要求较高</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
            <tag> MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java EE页显示技术之JSP</title>
      <link href="/2020/09/04/Java-EE%E9%A1%B5%E6%98%BE%E7%A4%BA%E6%8A%80%E6%9C%AF%E4%B9%8BJSP/"/>
      <url>/2020/09/04/Java-EE%E9%A1%B5%E6%98%BE%E7%A4%BA%E6%8A%80%E6%9C%AF%E4%B9%8BJSP/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/2020090408471826.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h1><p>1.概念：</p><pre><code>* Java Server Pages:Java服务器页面    * 可以理解为一个特殊的页面，    * 其中既可以定义html标签，又可以定义java代码    用于简化书写</code></pre><a id="more"></a><p><img src="https://img-blog.csdnimg.cn/20200902091143184.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="概念"></p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p><img src="https://img-blog.csdnimg.cn/20200902091512601.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="原理"></p><ol><li>本质上一个Servlet</li></ol><h1 id="Jsp的脚本"><a href="#Jsp的脚本" class="headerlink" title="Jsp的脚本"></a>Jsp的脚本</h1><pre><code>Jsp定义Java代码的方式  1.  &lt;%| 代码%&gt; ：        定义的Java代码在Service方法中。        Servce方法中可以定义什么，该脚本中就可以定义什么 。  2.  &lt;%！ 代码%&gt;：         定义的java代码在JSP转换后的Java类的成员位置。        一般使用 安全问题  3.  &lt;%= 代码%&gt;：         定义Java代码，会输出在页面上。         输出语句可以定义什么，该脚本就可以定义什么。</code></pre><h1 id="Jsp的内置对象"><a href="#Jsp的内置对象" class="headerlink" title="Jsp的内置对象"></a>Jsp的内置对象</h1><pre><code>* 在JSP页面不需要获取和创建，可以直接使用的对象* JSP一共有九个内置对象。* 3个常用 ：        1. request        2. response         3. out :           字符的输出流，可以将数据输出到页面上。           和reponse.getWriter类似。           * 二者区别： 在Tomcat 服务器真正给客户端做出响应之前，                     会先找出response缓冲区数据，再找出out数据缓冲区数据。             response.getWriter()数据永远在out.write()之前。             尽量只用out输出。</code></pre><p><img src="https://img-blog.csdnimg.cn/20200902103835170.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="区别"></p><h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><pre><code>*作用：用于JSP页面，导入资源文件* 格式    &lt;% 指令名称 属性名称 属性名称1=属性值1 属性名称2=属性值2 .. %&gt;</code></pre><p>分类：<br>          1. page：配置JSP页面的</p><pre><code>*contentType：等同于response.setContentType()     1. 设置响应体的mime类型以及字符集     2. 设置当前JSP页面的编码（只能是高级的IDE才能生效，        如果使用低级工具，则需要设置pageEncoding属性设置当前页面的字符集）     *import：导包     * errorPage：当页面发生错误后跳转的页面。     * isErrorPage：标识当前页面是否为错误页面。       1. true：是，可以使用内置对象exception       2. false：否，默认值。不可以使用内置对象exception</code></pre><ol start="2"><li>include<pre><code>页面包含的。导入页面的资源文件</code></pre><img src="https://img-blog.csdnimg.cn/20200903232938742.png#pic_center" alt=""><br><img src="https://img-blog.csdnimg.cn/20200903233041508.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></li></ol><ol start="3"><li><p>taglib</p><pre><code>     导入资源（JSTL标签库）&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;  * rprefix:前缀，自定义的</code></pre></li></ol><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><ol><li><p>html注释： </p><pre><code>&lt;!--  --&gt;:只能注释html代码片段（会发送到页面，但是不解析）。</code></pre></li><li><p>JSP注释：推荐使用</p><pre><code>&lt;%--  --%&gt;:可以注释所有。（不会将注释内容发送到页面）</code></pre></li></ol><h1 id="所有内置对象"><a href="#所有内置对象" class="headerlink" title="所有内置对象"></a>所有内置对象</h1><p>在JSP页面中不需要创建，直接使用的对象</p><p>一共有九个：</p><table><thead><tr><th>变量名</th><th>真实类型</th><th>作用</th></tr></thead><tbody><tr><td>pageContext</td><td>pageContext</td><td>当前页面共享数据，获取其他8个内置对象</td></tr><tr><td>request</td><td>HttpServletRequest</td><td>一次请求访问多个资源（转发）</td></tr><tr><td>session</td><td>HttpSession</td><td>一次会话的多个请求</td></tr><tr><td>application</td><td>ServletContext</td><td>所有用户间共享数据</td></tr><tr><td>response</td><td>HttpServletResponse</td><td>响应对象</td></tr><tr><td>page</td><td>Object</td><td>当前页面的（Servlet）对象 this</td></tr><tr><td>out</td><td>JspWriter</td><td>输出对象，数据输出到页面上</td></tr><tr><td>config</td><td>SerletConfig</td><td>Servlet的配置对象</td></tr><tr><td>excepton</td><td>Throwable</td><td>异常对象</td></tr></tbody></table><p>后面五个为域对象</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
            <tag> JSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaEE会话技术之Session案例</title>
      <link href="/2020/09/03/JavaEE%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF%E4%B9%8BSession%E6%A1%88%E4%BE%8B/"/>
      <url>/2020/09/03/JavaEE%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF%E4%B9%8BSession%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200903221657818.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="案例需求："><a href="#案例需求：" class="headerlink" title="案例需求："></a>案例需求：</h1><ol><li>访问带有验证码的登录页面login.jsp</li><li>用户输入用户户名和密码以及验证码。</li></ol><a id="more"></a><pre><code>* 如果用户名和密码输入有误，跳转登录页面，  提示用户名或者密码错误*如果验证码输入有误，跳转登录页面，  提示：验证码错误*如果输入全部正确，则转跳到主页success.jsp，  显示：用户名，欢迎您！</code></pre><h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><p><img src="https://img-blog.csdnimg.cn/20200903162342892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="分析"></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="验证码代码"><a href="#验证码代码" class="headerlink" title="验证码代码"></a>验证码代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/checkCodeServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckCodeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> width = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">int</span> height = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建一对象，在内存中图片(验证码图片对象)</span></span><br><span class="line">        BufferedImage image = <span class="keyword">new</span> BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.美化图片</span></span><br><span class="line">        <span class="comment">//2.1 填充背景色</span></span><br><span class="line">        Graphics g = image.getGraphics();<span class="comment">//画笔对象</span></span><br><span class="line">        g.setColor(Color.PINK);<span class="comment">//设置画笔颜色</span></span><br><span class="line">        g.fillRect(<span class="number">0</span>,<span class="number">0</span>,width,height);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.2画边框</span></span><br><span class="line">        g.setColor(Color.BLUE);</span><br><span class="line">        g.drawRect(<span class="number">0</span>,<span class="number">0</span>,width - <span class="number">1</span>,height - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        String str = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghigklmnopqrstuvwxyz0123456789"</span>;</span><br><span class="line">        <span class="comment">//生成随机角标</span></span><br><span class="line">        Random ran = <span class="keyword">new</span> Random();</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = ran.nextInt(str.length());</span><br><span class="line">            <span class="comment">//获取字符</span></span><br><span class="line">            <span class="keyword">char</span> ch = str.charAt(index);<span class="comment">//随机字符</span></span><br><span class="line">            sb.append(ch);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.3写验证码</span></span><br><span class="line">            g.drawString(ch+<span class="string">""</span>,width/<span class="number">5</span>*i,height/<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        String checkCode_session = sb.toString();</span><br><span class="line">        <span class="comment">//将验证码存入session</span></span><br><span class="line">        request.getSession().setAttribute(<span class="string">"checkCode_session"</span>,checkCode_session);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.4画干扰线</span></span><br><span class="line">        g.setColor(Color.GREEN);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//随机生成坐标点</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x1 = ran.nextInt(width);</span><br><span class="line">            <span class="keyword">int</span> x2 = ran.nextInt(width);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> y1 = ran.nextInt(height);</span><br><span class="line">            <span class="keyword">int</span> y2 = ran.nextInt(height);</span><br><span class="line">            g.drawLine(x1,y1,x2,y2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.将图片输出到页面展示</span></span><br><span class="line">        ImageIO.write(image,<span class="string">"jpg"</span>,response.getOutputStream());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="登陆代码"><a href="#登陆代码" class="headerlink" title="登陆代码"></a>登陆代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/loginServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">       <span class="comment">//1.设置request编码</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="comment">//2.获取Map参数</span></span><br><span class="line">        String username = request.getParameter(<span class="string">"username"</span>);</span><br><span class="line">        String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line">        String checkCode = request.getParameter(<span class="string">"checkCode"</span>);</span><br><span class="line">        <span class="comment">//先获取生成的验证码</span></span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        String checkCode_session = (String) session.getAttribute(<span class="string">"checkCode_session"</span>);</span><br><span class="line">        <span class="comment">//删除session中存储的验证码</span></span><br><span class="line">            session.removeAttribute(<span class="string">"checkCode_session"</span>);</span><br><span class="line">        <span class="comment">//3.判断验证码是否正确</span></span><br><span class="line">        <span class="keyword">if</span> (checkCode_session!= <span class="keyword">null</span>&amp;&amp;checkCode_session.equalsIgnoreCase(checkCode))&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//忽略大小写比较字符串</span></span><br><span class="line">            <span class="comment">//验证码正确</span></span><br><span class="line">            <span class="comment">//判断用户名和密码是否一致</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"zhansan"</span>.equals(username)&amp;&amp;<span class="string">"123"</span>.equals(password))&#123;</span><br><span class="line">                <span class="comment">//登陆成功</span></span><br><span class="line">                <span class="comment">//存储信息，用户信息</span></span><br><span class="line">                session.setAttribute(<span class="string">"user"</span>,username);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//重定向到success页面</span></span><br><span class="line"></span><br><span class="line">                response.sendRedirect(request.getContextPath()+<span class="string">"/success.jsp"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//登陆失败</span></span><br><span class="line">                <span class="comment">//储存提示信息到request</span></span><br><span class="line">                request.setAttribute(<span class="string">"login_error"</span>,<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">                <span class="comment">//转发到登录页面</span></span><br><span class="line">                request.getRequestDispatcher(<span class="string">"/login.jsp"</span>).forward(request,response);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//验证码不一致</span></span><br><span class="line">            <span class="comment">//储存提示信息到request</span></span><br><span class="line">            request.setAttribute(<span class="string">"cc_error"</span>,<span class="string">"验证码错误"</span>);</span><br><span class="line">            <span class="comment">//转发到登录页面</span></span><br><span class="line">            request.getRequestDispatcher(<span class="string">"/login.jsp"</span>).forward(request,response);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="登陆页面代码"><a href="#登陆页面代码" class="headerlink" title="登陆页面代码"></a>登陆页面代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%--</span></span></span><br><span class="line"><span class="tag">  <span class="attr">Created</span> <span class="attr">by</span> <span class="attr">IntelliJ</span> <span class="attr">IDEA.</span></span></span><br><span class="line"><span class="tag">  <span class="attr">User:</span> <span class="attr">OldAZ-PC</span></span></span><br><span class="line"><span class="tag">  <span class="attr">Date:</span> <span class="attr">2020</span>/<span class="attr">9</span>/<span class="attr">3</span></span></span><br><span class="line"><span class="tag">  <span class="attr">Time:</span> <span class="attr">16:30</span></span></span><br><span class="line"><span class="tag">  <span class="attr">To</span> <span class="attr">change</span> <span class="attr">this</span> <span class="attr">template</span> <span class="attr">use</span> <span class="attr">File</span> | <span class="attr">Settings</span> | <span class="attr">File</span> <span class="attr">Templates.</span></span></span><br><span class="line"><span class="tag"><span class="attr">--</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">"img"</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.src = <span class="string">"/4_Cookie_Session_war_exploded/checkCodeServlet?date="</span>+<span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        div&#123;</span><br><span class="line">            color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"loginServlet"</span> <span class="attr">method</span>=<span class="string">"post"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">password</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>验证码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"checkCode"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span> &gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"img"</span> <span class="attr">src</span>=<span class="string">"/4_Cookie_Session_war_exploded/checkCodeServlet"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登录"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span> &gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">%=request.getAttribute("cc_error")==null?"":request.getAttribute("cc_error")%</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">%=request.getAttribute("login_error")==null?"":request.getAttribute("login_error")%</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="登录成功页面"><a href="#登录成功页面" class="headerlink" title="登录成功页面"></a>登录成功页面</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: OldAZ-PC</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">9</span>/<span class="number">3</span></span><br><span class="line">  Time: <span class="number">19</span>:<span class="number">05</span></span><br><span class="line">  To change <span class="keyword">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;&lt;%=request.getSession().getAttribute("user") %&gt;,欢迎您！！&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Session </tag>
            
            <tag> JavaEE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaEE会话技术之Session</title>
      <link href="/2020/09/03/JavaEE%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF%E4%B9%8BSession/"/>
      <url>/2020/09/03/JavaEE%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF%E4%B9%8BSession/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/202009031222016.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><pre><code>服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端的对象中。Httpsession</code></pre><a id="more"></a><h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><pre><code>1. 获取Httpsession对象：     HttpSession session = request.getSession();2. 使用Httpsession对象：    object  getAttribute(String name)    void  setAttribute(String name,Object value)    void  removeAttribute(String name)</code></pre><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><pre><code>Session的实现是依赖于Cookie的。</code></pre><p><img src="https://img-blog.csdnimg.cn/20200903101153442.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="原理"></p><h1 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h1><ol><li><p>当客户端关闭后，服务器不关闭，两次获取的Session是否为同一个？</p><pre><code>默认情况下，不是。* 如果需要相同，则可以创建Cookie，键为JSESSIONID，设置最大存活时间，让Cookie持久化保存。</code></pre></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"JSESSIONID"</span>,session.getId());</span><br><span class="line">cookie.setMaxAge(<span class="number">60</span>*<span class="number">60</span>);</span><br><span class="line">response.addCookie(cookie);</span><br></pre></td></tr></table></figure><ol start="2"><li><p>客户端不关闭，两次获取的session是同一个吗？</p><pre><code>不是同一个，但是要确保数据不丢失。   1. session钝化         在服务器正常关闭之前，将seesion对象序列化到硬盘上。（在tomcat的项目里面的work目录下）   2. session活化       在服务器启动后，将session 文件转化为session对象即可。       （IDEA中实现不了活化，因为在启动服务器的过程中，会先删除work目录，       再创建，上一次的session数据会被删除。无法读取活化）</code></pre></li></ol><p><strong><em>不过本地的Tomcat已经实现了这个过程，以后部署项目时不用考虑这个问题。</em></strong></p><ol start="3"><li>Session的什么时候被销毁？<ol><li>服务器被关闭。</li><li>session对象调用invalidate()。</li><li>session默认失效时间为30分钟。</li></ol></li></ol><pre><code>在所有项目的配置文件web.xml 就可以修改默认的失效时间</code></pre><p><img src="https://img-blog.csdnimg.cn/20200903121013194.png#pic_center" alt="失效时间"></p><h1 id="Session特点"><a href="#Session特点" class="headerlink" title="Session特点"></a>Session特点</h1><ol><li><p>session 用于储存一次会话的多次请求的数据，存在服务器端。</p></li><li><p>session 可以存储任意类型，任意大小的数据。</p></li><li><p>session和cokie的区别：</p><pre><code>1. session存储在服务器端，Cookie在客户端。2. seesion没有数据大小的限制，cookie有3. session数据安全，Cookie相对不安全。</code></pre></li></ol><p>注：session的体量会大一些，Cookie小一些。可以从翻译理解，session翻译为主菜，cookie翻译为小饼干！！！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Session </tag>
            
            <tag> JavaEE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaEE会话技术之cookie案例</title>
      <link href="/2020/08/28/JavaEE%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF%E4%B9%8Bcookie%E6%A1%88%E4%BE%8B/"/>
      <url>/2020/08/28/JavaEE%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF%E4%B9%8Bcookie%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200828183545603.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><pre><code>1.  访问一个servlet，如果第一次访问，则提示：您好！欢迎首次访问2. 如果不是第一次访问，则提示：欢迎回来，您上次到访时间为：显示时间字符串</code></pre><a id="more"></a><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><pre><code>1.  可以采用cookie完成2. 在服务器中的servlet判断是否有一个名字为lastTime的cookie    1. 有：不是第一次访问        1. 响应数据：欢迎回来，您上次的访问时间为：时间        2.  写回cookie：lastTime=时间    2. 没有：是第一次访问        1. 响应数据：您好，欢迎首次访问        2. 写回cookie：lastTime=时间</code></pre><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p><img src="https://img-blog.csdnimg.cn/20200828182648435.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><p><img src="https://img-blog.csdnimg.cn/20200828183054423.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.cookie;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLDecoder;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*1.  可以采用cookie完成</span></span><br><span class="line"><span class="comment">            2. 在服务器中的servlet判断是否有一个名字为lastTime的cookie</span></span><br><span class="line"><span class="comment">            1. 有：不是第一次访问</span></span><br><span class="line"><span class="comment">            1. 响应数据：欢迎回来，您上次的访问时间为：时间</span></span><br><span class="line"><span class="comment">            2.  写回cookie：lastTime=时间</span></span><br><span class="line"><span class="comment">            2. 没有：是第一次访问</span></span><br><span class="line"><span class="comment">            1. 响应数据：您好，欢迎首次访问</span></span><br><span class="line"><span class="comment">            2. 写回cookie：lastTime=时间</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> OldAZ-PC</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(urlPatterns = <span class="string">"/CookieTest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieTest</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">  <span class="comment">//设置响应消息体的数据格式</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取所有的cookie</span></span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        Boolean flag = <span class="keyword">false</span>;    <span class="comment">//没有cookie为last time</span></span><br><span class="line">        <span class="comment">//2.遍历数组</span></span><br><span class="line">        <span class="keyword">if</span> (cookies != <span class="keyword">null</span>&amp;&amp; cookies.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">                <span class="comment">//3.获取cookie的名称</span></span><br><span class="line">                String name = cookie.getName();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"lastTime"</span>.equals(name))&#123;</span><br><span class="line">                    <span class="comment">//有该cookie，表示不是第一次访问</span></span><br><span class="line">                    flag = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="comment">//设置cookie的value</span></span><br><span class="line">                    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">                    SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日  HH:mm:ss"</span>);</span><br><span class="line">                    String str_date = sdf.format(date);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    System.out.println(<span class="string">"编码前："</span>+str_date);</span><br><span class="line">                    str_date = URLEncoder.encode(str_date, <span class="string">"utf-8"</span>);</span><br><span class="line">                    System.out.println(<span class="string">"编码后："</span>+str_date);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    cookie.setValue(str_date);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//设置cookie的存活时间</span></span><br><span class="line">                    cookie.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>);<span class="comment">//一个月</span></span><br><span class="line">                    response.addCookie(cookie);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//响应数据</span></span><br><span class="line">                    <span class="comment">//获取cookie的value，时间</span></span><br><span class="line">                    String value = cookie.getValue();</span><br><span class="line">                    System.out.println(<span class="string">"解码前："</span>+value);</span><br><span class="line">                    value = URLDecoder.decode(value,<span class="string">"utf-8"</span>);</span><br><span class="line">                    System.out.println(<span class="string">"解码后："</span>+value);</span><br><span class="line">                    response.getWriter().write(<span class="string">"&lt;h1&gt;欢迎回来，您上次的访问时间为："</span>+value+<span class="string">"&lt;/h1&gt;"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (cookies==<span class="keyword">null</span> || cookies.length==<span class="number">0</span>||flag==<span class="keyword">false</span>)&#123;</span><br><span class="line">            <span class="comment">//没有，第一次访问</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//设置cookie的value</span></span><br><span class="line">            Date date = <span class="keyword">new</span> Date();</span><br><span class="line">            SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy年MM月dd日  HH:mm:ss"</span>);</span><br><span class="line">            String str_date = sdf.format(date);</span><br><span class="line">            str_date = URLEncoder.encode(str_date, <span class="string">"utf-8"</span>);</span><br><span class="line">            Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"lastTime"</span>,str_date);</span><br><span class="line">            <span class="comment">//设置cookie的存活时间</span></span><br><span class="line">            cookie.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>);  <span class="comment">//一个月</span></span><br><span class="line">            response.addCookie(cookie);</span><br><span class="line"></span><br><span class="line">            response.getWriter().write(<span class="string">"&lt;h1&gt;您好，欢迎首次访问&lt;/h1&gt;"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
            <tag> Cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaEE会话技术之Cookie</title>
      <link href="/2020/08/28/JavaEE%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF%E4%B9%8BCookie/"/>
      <url>/2020/08/28/JavaEE%E4%BC%9A%E8%AF%9D%E6%8A%80%E6%9C%AF%E4%B9%8BCookie/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200828184012478.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><pre><code>一次会话包含多次请求和响应。一次会话：浏览器第一次给服务器资源发送请求，会话建立，直到有一方断开为止。</code></pre><a id="more"></a><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><pre><code>在一次会话范围内的多次请求间，共享数据</code></pre><h2 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h2><pre><code>1.客户端会话技术：        Cookie2.服务器端会话技术:        Session</code></pre><h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><pre><code>客户端会话技术，将 数据保存到客户端</code></pre><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><pre><code>1. 创建Cookie对象，绑定数据    * new Cookie(String name,String value)2. 发送Cookie对象    *response.addCookie(Cookie cookie)</code></pre><p><img src="https://img-blog.csdnimg.cn/20200828160938959.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><pre><code>3. 获取Cookie，拿到数据    *Cookie[]   request.getCookies()</code></pre><p><img src="https://img-blog.csdnimg.cn/20200828161043635.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><p>*在同一个浏览器先访问CookieDemo1，再访问CookieDemo2控制台打印数据。<br><img src="https://img-blog.csdnimg.cn/20200828161216201.png#pic_center" alt=""></p><ul><li>若是在一个浏览器访问CookieDemo1后，在另一个不同的浏览器访问CookieDemo2.控制台不会输出数据。</li></ul><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>基于响应头set-cookie和请求头cookie实现：<br><img src="https://img-blog.csdnimg.cn/20200828161716529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h2 id="Cookie的细节"><a href="#Cookie的细节" class="headerlink" title="Cookie的细节"></a>Cookie的细节</h2><ol><li><p>一次可不可以发送多个cookie？</p><pre><code>*可以可以创建多个Cookie对象，使用response调用多次addCookie方法发送cookie 即可。</code></pre></li><li><p>cookie可以在浏览器中保存多长时间？</p><pre><code>1. 默认情况下，当浏览器被关闭后，cookie数据被销毁。2. 持久化的存储：    * setMaxAge(int seconds)       1. 正数：将cookie数据写到硬盘文件中，持久化储存。secons表示存活时间。       2. 负数：默认值       3. 零：删除cookie信息</code></pre></li><li><p>cookie能不能存中文？</p><pre><code>*在tomcat 8之前，cookie中不能直接储存中文数据    需要将中文数据转码--一般采用URL编码（%）*在tomcat 8之后，cookie支持储存中文数据</code></pre></li><li><p>cookie获取的范围是多大？</p><pre><code>1. 假设在同一个tomcat服务器中，部署了多个web项目，  那么这些web项目中cookie能不能共享？-默认情况下cookie不能共享-由setPath(String path):设置cookie的获取范围，默认情况下为当前虚拟目录。-如果要共享则可以将path设置为&quot;/&quot;2.在不同的tomcat服务器间的cookie 共享问题？    setDomain(String path):如果设置一级域名相同，则多个服务器之间cookie可以共享    *setDomain(&quot;.baidu.coom&quot;),那么tieba.baidu.com和news.baidu.com的cookie可以共享</code></pre></li></ol><h2 id="Cookie的特点和作用"><a href="#Cookie的特点和作用" class="headerlink" title="Cookie的特点和作用"></a>Cookie的特点和作用</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><pre><code>1. cookie存储数据在客户端浏览器2. 浏览器对于单个cookie的大小有限制（4kb）    以及对同一个域名下的cookie数量也有限制 （20个）</code></pre><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><pre><code>1. cookie一般用于存储少了的不太敏感的数据2. 在不登录的情况下，完成服务器对客户端的身份识别</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaEE </tag>
            
            <tag> Cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP协议之文件下载案例</title>
      <link href="/2020/08/28/HTTP%E5%8D%8F%E8%AE%AE%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E6%A1%88%E4%BE%8B/"/>
      <url>/2020/08/28/HTTP%E5%8D%8F%E8%AE%AE%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200828110158673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="文件下载需求："><a href="#文件下载需求：" class="headerlink" title="文件下载需求："></a>文件下载需求：</h1><pre><code>1. 页面显示超链接2. 点击超链接后弹出下载提示框3. 完成图片文件下载</code></pre><a id="more"></a><p><img src="https://img-blog.csdnimg.cn/20200828105902762.png#pic_center" alt=""><br><img src="https://img-blog.csdnimg.cn/20200828105931876.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h1><pre><code>1. 超链接指向的资源如果能够被浏览器解析，则在浏览器中展示，如果不能解析，则弹出下载提示框。不满足需求。2. 任何资源都必须弹出下载提示框。3. 使用响应头设置资源的打开方式：    *content-disposition：attename；filename=xxx;</code></pre><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><pre><code>1.  定义页面，编辑超链接href属性，属性值指向Servlet，    传递资源名称filename2.  定义Servlet    1. 获取文件的名称    2. 使用字节输入流去加载文件进去内存（涉及真实路径）    3. 指定response响应头：        *content-disposition：attename；filename=xxx;    4. 将数据写出到response输出流即可</code></pre><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>中文文件名的问题</p><p>解决思路：</p><pre><code>1. 获取客户端浏览器使用的版本信息2. 根据不同的版本信息，我们设置filename的编码方式不同</code></pre><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p><img src="https://img-blog.csdnimg.cn/20200828105613647.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="DownloadServlet"><a href="#DownloadServlet" class="headerlink" title="DownloadServlet"></a>DownloadServlet</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.download;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.web.utils.DownLoadUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(urlPatterns = <span class="string">"/downLoad"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//1.获取请求参数，文件文名称</span></span><br><span class="line">        String filename = request.getParameter(<span class="string">"filename"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.使用字节输出流加载进去内存</span></span><br><span class="line">            <span class="comment">//2.1找到文件服务器路径</span></span><br><span class="line">        ServletContext servletContext = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        String realPath = servletContext.getRealPath(<span class="string">"/img/"</span>+filename);</span><br><span class="line">            <span class="comment">//2.2用字节流关联</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.设置response的响应头</span></span><br><span class="line">        <span class="comment">//3.1设置响应头类型content-type</span></span><br><span class="line">                <span class="comment">//获取文件的mime类型</span></span><br><span class="line">        String mimeType = servletContext.getMimeType(filename);</span><br><span class="line">        response.setHeader(<span class="string">"content-type"</span>,mimeType);</span><br><span class="line">        <span class="comment">//设置头响应打开方式:content-disposition</span></span><br><span class="line">        <span class="comment">//3.2解决中文文件问题</span></span><br><span class="line">            <span class="comment">//1.获取user-agent请求头</span></span><br><span class="line">        String agent = request.getHeader(<span class="string">"user-agent"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.使用工具类方法编码文件名即可</span></span><br><span class="line">        filename = DownLoadUtils.getFileName(agent, filename);</span><br><span class="line">        response.setHeader(<span class="string">"content-disposition"</span>,<span class="string">"attachment;filename="</span>+filename);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.将输入流的数据写出到输出流中</span></span><br><span class="line">        ServletOutputStream sos = response.getOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>*<span class="number">8</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((len=fis.read(buff))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            sos.write(buff,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.doPost(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中文编码类"><a href="#中文编码类" class="headerlink" title="中文编码类"></a>中文编码类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.misc.BASE64Encoder;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownLoadUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getFileName</span><span class="params">(String agent, String filename)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (agent.contains(<span class="string">"MSIE"</span>)) &#123;</span><br><span class="line">            <span class="comment">// IE浏览器</span></span><br><span class="line">            filename = URLEncoder.encode(filename, <span class="string">"utf-8"</span>);</span><br><span class="line">            filename = filename.replace(<span class="string">"+"</span>, <span class="string">" "</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (agent.contains(<span class="string">"Firefox"</span>)) &#123;</span><br><span class="line">            <span class="comment">// 火狐浏览器</span></span><br><span class="line">            BASE64Encoder base64Encoder = <span class="keyword">new</span> BASE64Encoder();</span><br><span class="line">            filename = <span class="string">"=?utf-8?B?"</span> + base64Encoder.encode(filename.getBytes(<span class="string">"utf-8"</span>)) + <span class="string">"?="</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 其它浏览器</span></span><br><span class="line">            filename = URLEncoder.encode(filename, <span class="string">"utf-8"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> filename;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="下载HTML页面"><a href="#下载HTML页面" class="headerlink" title="下载HTML页面"></a>下载HTML页面</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/3_response_war_exploded/img/1.jpg"</span>&gt;</span>图片1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/3_response_war_exploded/img/2.jpg"</span>&gt;</span>图片2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/3_response_war_exploded/downLoad?filename=1.jpg"</span>&gt;</span>图片1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/3_response_war_exploded/downLoad?filename=九尾.jpg"</span>&gt;</span>图片1（中文）<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/3_response_war_exploded/downLoad?filename=2.jpg"</span>&gt;</span>图片2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP协议之ServletContent对象</title>
      <link href="/2020/08/26/HTTP%E5%8D%8F%E8%AE%AE%E4%B9%8BServletContent%E5%AF%B9%E8%B1%A1/"/>
      <url>/2020/08/26/HTTP%E5%8D%8F%E8%AE%AE%E4%B9%8BServletContent%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200826174813647.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><pre><code>代表整个web应用，可以和程序的容器（服务器）来通讯</code></pre><a id="more"></a><h1 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h1><p>1.通过request对象获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.getServletContext();</span><br></pre></td></tr></table></figure><p>2.通过HttpServlet来获取 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.getServletContext();</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20200826170922826.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><h2 id="1-获取MIME类型（互联网中文件的类型）"><a href="#1-获取MIME类型（互联网中文件的类型）" class="headerlink" title="1.获取MIME类型（互联网中文件的类型）"></a>1.获取MIME类型（互联网中文件的类型）</h2><pre><code>*MIME类型：在互联网通讯过程中定义的一种文件数据类型    *格式： 大类型/小类型   text/html     image/jpg</code></pre><p><img src="https://img-blog.csdnimg.cn/2020082617103990.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="2-域对象：共享数据"><a href="#2-域对象：共享数据" class="headerlink" title="2.域对象：共享数据"></a>2.域对象：共享数据</h2><pre><code>方法：1.setAttribute(String name,Object value)2.getAttribute(String name)3.removeAttribute(String name)范围*ServletContext对象范围：        所有用户请求的数据声明周期长，慎用，否则导致内存压力。</code></pre><h2 id="3-获取文件的真实（服务器路径）路径"><a href="#3-获取文件的真实（服务器路径）路径" class="headerlink" title="3.获取文件的真实（服务器路径）路径"></a>3.获取文件的真实（服务器路径）路径</h2><pre><code>1. 方法： String getRealPath(&quot;&quot;);</code></pre><p><img src="https://img-blog.csdnimg.cn/20200826174234185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP协议之response对象</title>
      <link href="/2020/08/25/HTTP%E5%8D%8F%E8%AE%AE%E4%B9%8Bresponse%E5%AF%B9%E8%B1%A1/"/>
      <url>/2020/08/25/HTTP%E5%8D%8F%E8%AE%AE%E4%B9%8Bresponse%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200825115228784.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><pre><code>设置响应消息1. 设置响应行        1. 格式：HTTP/1.1  200    ok        2. 设置状态码： setStatic(int sc)</code></pre>  <a id="more"></a><pre><code>2. 设置相应头    setHeader(String name,String value)3. 设置响应体   使用步骤：           1. 获取输出流                   * 字符输出流：PrintWriter getWriter()                   * 字节输出流: ServletOutputStream getOutStream()           2. 使用输出流，将数据输出到客户端浏览器</code></pre><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><h2 id="完成重定向"><a href="#完成重定向" class="headerlink" title="完成重定向"></a>完成重定向</h2><h3 id="资源跳转的方式。"><a href="#资源跳转的方式。" class="headerlink" title="资源跳转的方式。"></a>资源跳转的方式。</h3><p><img src="https://img-blog.csdnimg.cn/202008191254267.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="重定向"></p><h3 id="代码实现："><a href="#代码实现：" class="headerlink" title="代码实现："></a>代码实现：</h3><p>这是第一个访问的Servlet    (/rd1)<br><img src="https://img-blog.csdnimg.cn/20200819131405171.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>这是第二个Servlet    (/rd2)  重定向来的<br><img src="https://img-blog.csdnimg.cn/20200819131610498.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""><br>这是运行结果：<br><img src="https://img-blog.csdnimg.cn/20200819131657732.png#pic_center" alt=""></p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><pre><code>转发特点：foward    1. 转发地址栏路径不变    2. 转发只能访问当前服务器下的资源    3. 转发是一次请求，可以使用request对象来共享数据重定向特点：redirect    1. 转发地址栏路径发生变化    2. 转发可以访问其他站点（服务器）的资源    3. 转发是两次请求，不能使用request来共享数据</code></pre><h2 id="路径的写法"><a href="#路径的写法" class="headerlink" title="路径的写法"></a>路径的写法</h2><ol><li><p>路径的分类</p><ol><li><p>相对路径</p><pre><code>不能确定唯一资源如：./index.html规则：找到当前资源和目标资源的相对位置关系    ./:当前目录   ../:后退一级目录</code></pre></li><li><p>绝对路径</p><pre><code>可以确定唯一的资源*如：http://localhost:8080/3_response_war_exploded/rd2*以/开头：/3_response_war_exploded/rd2规则：判断路径给谁用，判断请求从哪儿发出    *给客户端使用：需要加虚拟目录（项目的访问路径）       *建议虚拟目录动态获取：request.getContextPath()       *&lt;a&gt;,&lt;form&gt; 重定向...    *给服务器使用，不需要加虚拟目录      * 转发路径</code></pre></li></ol></li></ol><h2 id="服务器输出字符数据到浏览器"><a href="#服务器输出字符数据到浏览器" class="headerlink" title="服务器输出字符数据到浏览器"></a>服务器输出字符数据到浏览器</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>获取字符输出流</li><li>输出数据</li><li>注意：</li></ol><pre><code>    乱码问题：1. PrintWriter pw = response.getWriter();2. 设置该流的默认编码3. 告诉浏览器，响应体用的编码</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简单的形式，设置编码，在获取响应流之前设置</span></span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br></pre></td></tr></table></figure><ol start="4"><li>代码：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(urlPatterns = <span class="string">"/rd3"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseDemo3</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">     <span class="comment">//获取流对象之前，设置流的默认编码：ISO -8859-1  设置为GBK</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//1.获取字符输出流</span></span><br><span class="line">        PrintWriter pw = response.getWriter();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.输出数据</span></span><br><span class="line">        pw.write(<span class="string">"&lt;h1&gt;hello response&lt;h1&gt;"</span>);</span><br><span class="line">        pw.write(<span class="string">"你好 response"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="服务器输出字节数据到浏览器"><a href="#服务器输出字节数据到浏览器" class="headerlink" title="服务器输出字节数据到浏览器"></a>服务器输出字节数据到浏览器</h2><p>步骤：</p><pre><code>1.  获取字节输出流2.  输出数据</code></pre><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> OldAZ-PC</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(urlPatterns = <span class="string">"/rd4"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseDemo4</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">     <span class="comment">//获取流对象之前，设置流的默认编码：ISO -8859-1  设置为GBK</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取字节输出流</span></span><br><span class="line">        ServletOutputStream sos = response.getOutputStream();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.输出数据</span></span><br><span class="line">        sos.write(<span class="string">"hello"</span>.getBytes());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h2><pre><code>1. 本质：图片2. 目的：防止恶意表单注册      注：以后写的话  ，几乎都是在网上找美观的代码。自己改！！！</code></pre><p>代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> OldAZ-PC</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(urlPatterns = <span class="string">"/rd5"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseDemo5</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">     <span class="comment">//获取流对象之前，设置流的默认编码：ISO -8859-1  设置为GBK</span></span><br><span class="line">       <span class="comment">// response.setContentType("text/html;charset=UTF-8");</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> width = <span class="number">100</span>;</span><br><span class="line">            <span class="keyword">int</span> height = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建一个对象，在内存中图片（验证码图片对象）</span></span><br><span class="line">        BufferedImage image = <span class="keyword">new</span> BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.美化图片</span></span><br><span class="line">        <span class="comment">//2.1 填充背景色</span></span><br><span class="line">        Graphics g = image.getGraphics();  <span class="comment">//画笔对象</span></span><br><span class="line"></span><br><span class="line">        g.setColor(Color.pink);  <span class="comment">//设置画笔颜色</span></span><br><span class="line">        g.fillRect(<span class="number">0</span>,<span class="number">0</span>,width,height);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.2 画边框</span></span><br><span class="line">        g.setColor(Color.blue);</span><br><span class="line">        g.drawRect(<span class="number">0</span>,<span class="number">0</span>,width-<span class="number">1</span>,height-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        String str = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"</span>;</span><br><span class="line">        <span class="comment">//生成随机角标</span></span><br><span class="line">        Random ran = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;<span class="number">5</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = ran.nextInt(str.length());</span><br><span class="line">            <span class="comment">//获取字符</span></span><br><span class="line">            <span class="keyword">char</span> ch = str.charAt(index);<span class="comment">//随机字符</span></span><br><span class="line">            <span class="comment">//2.3写验证码</span></span><br><span class="line">            g.drawString(ch+<span class="string">""</span>,width/<span class="number">5</span>*i,height/<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.4画干扰线</span></span><br><span class="line">        g.setColor(Color.green);</span><br><span class="line">        <span class="comment">//随机生成坐标点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">10</span> ; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x1 = ran.nextInt(width);</span><br><span class="line">            <span class="keyword">int</span> x2 = ran.nextInt(width);</span><br><span class="line">            <span class="keyword">int</span> y1 = ran.nextInt(height);</span><br><span class="line">            <span class="keyword">int</span> y2 = ran.nextInt(height);</span><br><span class="line"></span><br><span class="line">            g.drawLine(x1,y1,x2,y2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.将图片展示到页面</span></span><br><span class="line">        ImageIO.write(image,<span class="string">"jpg"</span>,response.getOutputStream());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HTML页面代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">"checkCode"</span> <span class="attr">src</span>=<span class="string">"/3_response_war_exploded/rd5"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"change"</span> <span class="attr">herf</span>=<span class="string">""</span>&gt;</span>看不清，换一张？<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">/*</span><br><span class="line">    分析：</span><br><span class="line">      点击超链接或者图片，需要换一张</span><br><span class="line">    1. 给超链接或者图片绑定单击事件</span><br><span class="line">    2.重新设置图片的SRC属性值</span><br><span class="line">*/</span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//1.获取图片对象</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> img = <span class="built_in">document</span>.getElementById(<span class="string">"checkCode"</span>);</span></span><br><span class="line"><span class="actionscript">        img.onclick=<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//时间戳</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            img.src = <span class="string">"/3_response_war_exploded/rd5?"</span>+date;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> img2 = <span class="built_in">document</span>.getElementById(<span class="string">"change"</span>);</span></span><br><span class="line"><span class="actionscript">        img2.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//时间戳</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            img.src = <span class="string">"/3_response_war_exploded/rd5?"</span>+date;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>速解HTTP协议之响应消息</title>
      <link href="/2020/08/19/HTTP%E5%8D%8F%E8%AE%AE%E4%B9%8B%E5%93%8D%E5%BA%94%E6%B6%88%E6%81%AF/"/>
      <url>/2020/08/19/HTTP%E5%8D%8F%E8%AE%AE%E4%B9%8B%E5%93%8D%E5%BA%94%E6%B6%88%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200819120809472.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="相应消息"></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><ol><li><p>请求消息： 客户端发送给服务端的数据<br> *数据格式：</p><pre><code>1. 请求行2. 请求头3. 请求空行4. 请求体</code></pre><ol start="2"><li><p>响应消息：服务器端发送给客户端的数据<br>   *数据格式</p>   <a id="more"></a> <ol><li><p>响应行</p><pre><code>1. 组成：  协议/版本  响应状态码   状态码描述2. 响应的状态码:     服务器告诉客户端浏览器本次请求和响应的一个状态。    1. 状态码都是三位数字。    2. 分类：</code></pre><ol><li>1xx :<pre><code>服务器接收客户端消息， 但没有接收完成，等待一段时间后， 发送1xx多状态码</code></pre></li><li>2xx ：<pre><code>成功。代表200    </code></pre></li><li>3xx：<pre><code>重定向。代表:302（重定向），304（访问缓存）</code></pre></li><li>4xx：<pre><code>代表客户端错误。   代表：      1. 404（请求路径没有对应的资源）      2. 405 （请求方式没有对应的doxxx方法）</code></pre></li><li>5xx：<pre><code>代表服务器端错误。代表：500（服务器异常）</code></pre></li></ol></li><li><p>响应头</p><pre><code>1. 格式：  头名称   ：  值2. 常见的响应头：    1. Content-Type: 服务器告诉客户端本次响应的数据格式以及编码格式。    2. Content-disposition：服务器告诉客户端以什么格式打开响应体数据：        *值：             *in-line：默认值，在当前页面打开             *attachment；filename=xxx：以附件形式打开响应体。文件下载</code></pre></li><li><p>响应空行</p></li><li><p>响应体：传输的数据。</p></li></ol></li></ol></li></ol><pre><code>HTTP/1.1 200 OKContent-Type: text/html;charset=utf-8Cache-Control: privateCache-Lenght: 101Date:wed,19 Aug 2020  11:00 GMT&lt;html&gt;  &lt;head&gt;    &lt;title&gt;$Title$&lt;/title&gt;  &lt;/head&gt;    &lt;body&gt;        hello,response!      &lt;/body&gt;&lt;/html&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> 快速入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP协议之Request对象</title>
      <link href="/2020/08/18/HTTP%E5%8D%8F%E8%AE%AE%E4%B9%8BRequest%E5%AF%B9%E8%B1%A1/"/>
      <url>/2020/08/18/HTTP%E5%8D%8F%E8%AE%AE%E4%B9%8BRequest%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200816165117123.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="request"></p><h1 id="request对象"><a href="#request对象" class="headerlink" title="request对象"></a>request对象</h1><pre><code>1.request和response对象是由服务器创建的。我们来使用他们2.request对象是来获取请求消息，response对象是来设置响应消息。</code></pre><a id="more"></a><p><img src="https://img-blog.csdnimg.cn/20200816112357668.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="Request对象继承体系结构"><a href="#Request对象继承体系结构" class="headerlink" title="Request对象继承体系结构"></a>Request对象继承体系结构</h1><pre><code>ServletRequest             --接口    继承HttpServletRequest        --接口    实现Org.apache.catalina.connector.RequestFacade 类（tomcat）</code></pre><h1 id="request功能"><a href="#request功能" class="headerlink" title="request功能"></a>request功能</h1><h2 id="1-获取请求消息"><a href="#1-获取请求消息" class="headerlink" title="1.获取请求消息"></a>1.获取请求消息</h2><h3 id="1-1获取请求行数据"><a href="#1-1获取请求行数据" class="headerlink" title="1.1获取请求行数据"></a>1.1获取请求行数据</h3><pre><code>* GET  /day/demo1?name=zhanshan  HTTP/1.1* 方法：            1.获取请求方式：GET                    String getMethod()            2.(*)获取虚拟目录： /day                    String getContextPath()            3.获取Servlet路径：/demo1                     String getServletPath()            4.获取get方式的请求参数： name=zhanshan                     String getQueryString()       5.(*)获取请求的URI：/day/demo1               String getRequestURI()     :/day/demo1               StringBuffer getRequestURL()   :  http://localhost:8080/day/demo1           URL:统一资源定位符                 URL小于URI             URI：统一资源标识符       6.获取协议及版本:HTTP/1.1               String getProtocol()               7.获取客户机的IP地址               String getRemoteAddr()</code></pre><h3 id="1-2获取请求头数据"><a href="#1-2获取请求头数据" class="headerlink" title="1.2获取请求头数据"></a>1.2获取请求头数据</h3><pre><code>方法：        String getHeader(String name):通过请求头的名称获取请求头的值        Enumeration&lt;String&gt; getHeaderNames(): 获取所有的请求头名称</code></pre><p> 3.获取请求体数据<br>         请求体：只有POST请求方式，才有请求体，在请求体中封装了请求的请求参数</p><pre><code>步骤：        1.获取流对象                1.BUfferedReader getHeader()  :获取字符输入流，只能操作字符数据。                2.ServletInputStream()  :获取字节流，可以操作所有类型的数据        2.再从流对象中拿数据</code></pre><h2 id="2-其他功能"><a href="#2-其他功能" class="headerlink" title="2.其他功能"></a>2.其他功能</h2><h3 id="2-1获取请求参数-的通用方式"><a href="#2-1获取请求参数-的通用方式" class="headerlink" title="2.1获取请求参数 的通用方式"></a>2.1获取请求参数 的通用方式</h3><p>GET和POST请求方式都可以使用以下方法：<br>this.DoPost(request,response)</p><pre><code>1.String getParamterer(String name)        //根据参数名称获取参数值 username=1&amp;password=22.String[]  getParamtererValues(String name)      //根据参数名称获取参数值与数组  hobby=1&amp; hobby=23.getParameterNames()      //获取所有请求的参数名称4.Map&lt;String,String[]&gt; getParameterMap()        //获取所有集合的Map集合</code></pre><p>乱码问题：</p><pre><code>设置流的字符集：            在获取参数前，设置request.setcharacterEncoding(&quot;utf-8&quot;);</code></pre><h2 id="3-请求转发"><a href="#3-请求转发" class="headerlink" title="3.请求转发"></a>3.请求转发</h2><p>一种在服务器内部的资源跳转方式<br><img src="https://img-blog.csdnimg.cn/20200816162354892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="转发"></p><h3 id="3-1步骤"><a href="#3-1步骤" class="headerlink" title="3.1步骤:"></a>3.1步骤:</h3><pre><code>1.通过request对象获取请求转发器对象   RequestDispatcher  getRequestDispatcher(String path)2.使用 RequestDispatcher对象进行转发  forward(ServletRequest  request,ServletResponse response)</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式1</span></span><br><span class="line"> RequestDispatcher rd = request.getRequestDispatcher(<span class="string">"/Demo3"</span>);</span><br><span class="line"> rd.forward(request,response);        </span><br><span class="line"> <span class="comment">//方式2</span></span><br><span class="line"> request.getRequestDispatcher(<span class="string">"/Demo3"</span>).forward(request,response);</span><br></pre></td></tr></table></figure><h3 id="3-2特点"><a href="#3-2特点" class="headerlink" title="3.2特点"></a>3.2特点</h3><pre><code>1.浏览器地址栏路径不发生变化2. 只能转发到当前服务器内部资源中3. 转发是一次请求</code></pre><h2 id="4-共享数据"><a href="#4-共享数据" class="headerlink" title="4.共享数据"></a>4.共享数据</h2><h3 id="4-1域对象"><a href="#4-1域对象" class="headerlink" title="4.1域对象"></a>4.1域对象</h3><p>一个作用范围的对象，可以在范围内共享数据。</p><pre><code>request域：         代表一次请求，一般用于请求转发的多个资源中共享数据方法：    1.setAttrbute(String name,Oject obj):存储数据    2.Object getAttrbute(String name)   :通过键获取数据    3.void removeAttrbute(String name ):通过键移除键值对</code></pre><p>​        </p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录“偷懒”实用小技巧--beanutils包</title>
      <link href="/2020/08/18/%E8%AE%B0%E5%BD%95%E2%80%9C%E5%81%B7%E6%87%92%E2%80%9D%E5%AE%9E%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7--beanutils%E5%8C%85/"/>
      <url>/2020/08/18/%E8%AE%B0%E5%BD%95%E2%80%9C%E5%81%B7%E6%87%92%E2%80%9D%E5%AE%9E%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7--beanutils%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200818110842814.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="BenUtils"></p><h1 id="Beautils介绍"><a href="#Beautils介绍" class="headerlink" title="Beautils介绍"></a>Beautils介绍</h1><pre><code>Apache组织开发了一套用于操作JavaBean的API，这套API考虑到了很多实际开发中的应用场景，因此在实际开发中很多程序员使用这套API操作JavaBean，以简化程序代码的编写。</code></pre><p>在工程下新建lib目录，导入commons-beanutils-1.8.3.jar 和支持包commons-logging-1.1.1.jar</p><p>选中两个包，右键add as library</p><a id="more"></a><h1 id="Beanutils工具包的常用类："><a href="#Beanutils工具包的常用类：" class="headerlink" title="Beanutils工具包的常用类："></a>Beanutils工具包的常用类：</h1><ul><li><p>BeanUtils</p></li><li><p>PropertyUtils</p></li><li><p>ConvertUtils.regsiter(Converterconvert, Class clazz)</p></li></ul><h2 id="对属性进行赋值操作"><a href="#对属性进行赋值操作" class="headerlink" title="对属性进行赋值操作"></a>对属性进行赋值操作</h2><p>可以实现String向8种基本数据类型的自动转换。如age是int类型的，但也可以使用String f赋值,这就是在BeanUtils内部实现了该转化操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="comment">// 可以实现String向8种基本数据类型的自动转换。如age是int类型的，但也可以使用String f赋值</span></span><br><span class="line"><span class="comment">// 这就是在BeanUtils内部实现了该转化操作。</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 1、调用BeanUtils的setProperty方法就可以直接对bean内省了</span></span><br><span class="line"><span class="comment">// 实际上是在这里面封装了Sun的普通内省的方法。</span></span><br><span class="line">BeanUtils.setProperty(p, <span class="string">"age"</span>, <span class="string">"21"</span>);</span><br><span class="line">System.out.println(p.getAge());</span><br><span class="line"> </span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalAccessException | InvocationTargetException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="封装用户对象"><a href="#封装用户对象" class="headerlink" title="封装用户对象"></a>封装用户对象</h2><p> 实际运用1：用户注册时提交的数据都是String类型的， 我们需要对用户的信息进行封装 将用户封装一个个对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 假设客户提交的数据</span></span><br><span class="line">String age = <span class="string">"24"</span>;</span><br><span class="line">String name = <span class="string">"小明"</span>;</span><br><span class="line">String sex = <span class="string">"男"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取请求参数</span></span><br><span class="line">Map&lt;String,String[]&gt; map = req.getparameterMap();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 封装成对象</span></span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">/*BeanUtils.setProperty(p, "name", name);</span></span><br><span class="line"><span class="comment">BeanUtils.setProperty(p, "age", age);</span></span><br><span class="line"><span class="comment">BeanUtils.setProperty(p, "sex", sex);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">BeanUtils.populate(p,map);</span><br><span class="line"> </span><br><span class="line">System.out.println(p.getAge() + <span class="string">".."</span> + p.getName() + <span class="string">".."</span></span><br><span class="line">+ p.getSex());</span><br><span class="line"> </span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>由于BeanUtils只支持8种基本数据类型的转换，因此要实现其他类型的转化，就需要注册该类型的转换器。自定义转换器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 使用ConverUtils对象的register()方法来注册类型转换器</span></span><br><span class="line"><span class="comment">// 1、第一个参数为实现了Converter接口的对象，第二个参数为要注册的类型的class对象。</span></span><br><span class="line"><span class="comment">// 2、因此需要使用匿名内部类的方式重写Converter的converter方法。</span></span><br><span class="line"><span class="comment">// 3、该方法最有有BeanUtils的setProperty()来调用</span></span><br><span class="line">ConvertUtils.register(<span class="keyword">new</span> Converter() &#123;</span><br><span class="line"><span class="comment">// arg0这种情况产生的原因是因为没有导入源码</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * public Object convert(Class arg0, Object arg1) &#123; // TODO</span></span><br><span class="line"><span class="comment"> * Auto-generated method stub return null; &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">convert</span><span class="params">(Class&lt;T&gt; type, Object value)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 1、先对value进行判断。看看是否符合条件</span></span><br><span class="line"><span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2、对value的值进行判断，因为我们要转换的是String类型的</span></span><br><span class="line"><span class="keyword">if</span> (!(value <span class="keyword">instanceof</span> String)) &#123;</span><br><span class="line"><span class="comment">// 不是String,将该错误抛给调用他的方法</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ConversionException(<span class="string">"值支持String类型的转换！"</span>);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3、如果1、2都没错误进行第三步，判断value是否全是空格</span></span><br><span class="line">String string = (String) value;</span><br><span class="line"><span class="keyword">if</span> (string.trim().equals(<span class="string">""</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4、将含有值得字符转转换为日期</span></span><br><span class="line">SimpleDateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">Date date = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">date = (Date) df.parse(string);</span><br><span class="line">&#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line"><span class="comment">// 将异常抛给下一级必须加上e——异常链不能断。</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> (T) date;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;, Date<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"> </span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">String date = <span class="string">"1992-09-12"</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">BeanUtils.setProperty(p, <span class="string">"date"</span>, date);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(p.getDate());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用BeanUtils本身自带的转换器"><a href="#使用BeanUtils本身自带的转换器" class="headerlink" title="使用BeanUtils本身自带的转换器"></a>使用BeanUtils本身自带的转换器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ConvertUtils.register(<span class="keyword">new</span> DateLocaleConverter(), Date<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">String date = <span class="string">"1990-08-09"</span>;</span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">BeanUtils.setProperty(p, <span class="string">"date"</span>, date);</span><br><span class="line">System.out.println(p.getDate());</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实际开发中常常把客户机提交的元素封装到Map集合中去。"><a href="#实际开发中常常把客户机提交的元素封装到Map集合中去。" class="headerlink" title="实际开发中常常把客户机提交的元素封装到Map集合中去。"></a>实际开发中常常把客户机提交的元素封装到Map集合中去。</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String age = <span class="string">"24"</span>;</span><br><span class="line">String name = <span class="string">"小明"</span>;</span><br><span class="line">String sex = <span class="string">"男"</span>;</span><br><span class="line">String date = <span class="string">"1990-08-09"</span>;</span><br><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">map.put(name, name);</span><br><span class="line">map.put(age, age);</span><br><span class="line">map.put(date, date);</span><br><span class="line">map.put(sex, sex);</span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 用map集合中的值填充Bean属性</span></span><br><span class="line">BeanUtils.populate(p, map);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>收集的更加<a href="https://blog.csdn.net/wzc1991520/article/details/80176679?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.channel_param" target="_blank" rel="noopener">详细的博文</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 经验之谈 </tag>
            
            <tag> 工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>速解HTTP协议之请求消息</title>
      <link href="/2020/08/16/HTTP%E5%8D%8F%E8%AE%AE%E4%B9%8B%E8%AF%B7%E6%B1%82%E6%B6%88%E6%81%AF/"/>
      <url>/2020/08/16/HTTP%E5%8D%8F%E8%AE%AE%E4%B9%8B%E8%AF%B7%E6%B1%82%E6%B6%88%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200816100624670.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="HTTP"></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><pre><code>HTTP : Hyper Text Transfer Protocol   超文本传输协议</code></pre><h2 id="超文本传输协议"><a href="#超文本传输协议" class="headerlink" title="超文本传输协议"></a>超文本传输协议</h2><pre><code>传输协议：定义了客户端和服务器端通讯时，发送数据的格式</code></pre><a id="more"></a><p>  <img src="https://img-blog.csdnimg.cn/20200815171936872.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><pre><code>1.基于TCP/IP的高级协议2. 默认端口号：803. 基于请求/响应模型的：一次请求对应一次响应 4. 无状态的：每次请求之间，相互独立，不能交互数据</code></pre><p>历史版本：</p><pre><code>1.0 ：每一次请求都会建立新的连接1.1 ：复用连接，对缓存的支持比较好。</code></pre><h1 id="请求消息数据格式"><a href="#请求消息数据格式" class="headerlink" title="请求消息数据格式"></a>请求消息数据格式</h1><p><img src="https://img-blog.csdnimg.cn/20200816090007260.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="请求消息"></p><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><h3 id="1-请求行"><a href="#1-请求行" class="headerlink" title="1.请求行"></a>1.请求行</h3><pre><code>请求方式  请求url  请求协议/版本GET  /2_Servlet4_0_war_exploded/s3  HTTP/1.1   *请求方式：       HTTP协议中有7中请求方式，常用的2        GET ：           1.请求参数在请求行中，在url后           2.请求的url长度有限制           3.不太安全        POST：            1.请求参数在请求体中            2.请求的url长度没有限制（文件上传）            3.相对安全</code></pre><h3 id="2-请求头"><a href="#2-请求头" class="headerlink" title="2.请求头"></a>2.请求头</h3><p> 客户端浏览器告诉服务端的一些信息</p><pre><code>请求头名称 ：请求值 *常见的请求头：      1.User-Agent:浏览器告诉服务器，我访问你时使用的浏览器版本信息           *可以在服务器端获取该头的信息，解决浏览器的兼容性问题   2.Referer：url        *告诉服务器，我（当前请求）从哪里来？       作用：          1.防盗链          2.统计的工作</code></pre><p><img src="https://img-blog.csdnimg.cn/20200816095517571.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="盗链"></p><h3 id="3-请求空行"><a href="#3-请求空行" class="headerlink" title="3.请求空行"></a>3.请求空行</h3><pre><code>空行（分割POST请求的请求头和请求体）</code></pre><h3 id="4-请求体（正文）"><a href="#4-请求体（正文）" class="headerlink" title="4.请求体（正文）"></a>4.请求体（正文）</h3><pre><code>封装POST请求消息的请求参数的</code></pre><h3 id="字符串格式"><a href="#字符串格式" class="headerlink" title="字符串格式"></a>字符串格式</h3><pre><code>GET /2_Servlet4_0_war_exploded/s3 HTTP/1.1Host: localhost:8080User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:78.0) Gecko/20100101 Firefox/78.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateConnection: keep-aliveCookie: Idea-41e9004a=83460dde-8447-48d3-bfc3-ed6bae83b943Upgrade-Insecure-Requests: 1Cache-Control: max-age=0 user=zhaoyun</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> 快速入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb知识核心--Servlet体系结构</title>
      <link href="/2020/08/15/JavaWeb%E7%9F%A5%E8%AF%86%E6%A0%B8%E5%BF%83--Servlet%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
      <url>/2020/08/15/JavaWeb%E7%9F%A5%E8%AF%86%E6%A0%B8%E5%BF%83--Servlet%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200815120803119.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="体系结构"></p><h1 id="Servlet-–接口"><a href="#Servlet-–接口" class="headerlink" title="Servlet –接口"></a>Servlet –接口</h1><pre><code>  Servlet          --接口GenericServlet    --抽象类HttpServlet       --抽象类</code></pre>  <a id="more"></a><h2 id="GenericServlet"><a href="#GenericServlet" class="headerlink" title="GenericServlet"></a>GenericServlet</h2><pre><code>里面只有一个service方法作为抽象，因为里面其他方法已经默认做了空实现其他方法可选择性实现</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.GenericServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo2</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="HttpServlet"><a href="#HttpServlet" class="headerlink" title="HttpServlet"></a>HttpServlet</h1><p><img src="https://img-blog.csdnimg.cn/20200815113719610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><pre><code>因为要判断get和post方式，很麻烦，因此sun公司帮我们实现了这个判断-HttpServletHttpServlet：对http协议的封装，简化操作</code></pre><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>定义类继承HttpServlet</li><li>复写doGet() / doPost()方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="meta">@WebServlet</span>(urlPatterns = <span class="string">"/s3"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo3</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"doget..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"doPost..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Servlet相关配置"><a href="#Servlet相关配置" class="headerlink" title="Servlet相关配置"></a>Servlet相关配置</h1><h2 id="urlpartten"><a href="#urlpartten" class="headerlink" title="urlpartten"></a>urlpartten</h2><ol><li><p>Servlet访问路径<br>   注解里面可以定义多个路径<br> @WebServlet(urlPatterns = {“/s3”,”/s31”,”/s32”})</p></li><li><p>路径定义规则</p><pre><code>1.   /xxx2.   /xxx/xxx   :多层路径，目录结构        @WebServlet(urlPatterns = &quot;/user/s1&quot;)        @WebServlet(urlPatterns = &quot;/user/*&quot;)        @WebServlet(urlPatterns = &quot;/*&quot;)        //*代表任意路径，通配符3.   *.do        @WebServlet(urlPatterns = &quot;*.do&quot;)        // 路劲前面不能加/，否则报错，访问为xxx.do        //后缀名可以为任意的</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb知识核心--Servlet周期和注解</title>
      <link href="/2020/08/15/JavaWeb%E7%9F%A5%E8%AF%86%E6%A0%B8%E5%BF%83--Servlet%E5%91%A8%E6%9C%9F%E5%92%8C%E6%B3%A8%E8%A7%A3/"/>
      <url>/2020/08/15/JavaWeb%E7%9F%A5%E8%AF%86%E6%A0%B8%E5%BF%83--Servlet%E5%91%A8%E6%9C%9F%E5%92%8C%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200815110437717.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="servlet"></p><h1 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h1><h2 id="最重要的三个方法"><a href="#最重要的三个方法" class="headerlink" title="最重要的三个方法"></a>最重要的三个方法</h2><ol><li><p>被创建</p><pre><code>执行init()方法只执行一次</code></pre></li><li><p>提供服务</p><pre><code>执行Service方法，执行多次</code></pre></li><li><p>被销毁</p><pre><code>执行Destory()方法，只执行一次</code></pre><a id="more"></a><h2 id="代码案例"><a href="#代码案例" class="headerlink" title="代码案例"></a>代码案例</h2></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo2</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//初始化方法，在servlet被创建之前执行，只会执行一次</span></span><br><span class="line">    <span class="comment">//加载资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"init..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//获取Servletconfig对象的，就是Servlet的配置对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//提供服务的方法每一次Servlet被访问时，执行。执行多次</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Servlet..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//获取Servlet的一些信息，版本，作者等等。。。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//销毁方法，只有在服务器正常关闭时会执行，执行一次</span></span><br><span class="line">              <span class="comment">//被销毁之前执行，一般用于释放资源</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"destory..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小疑问"><a href="#小疑问" class="headerlink" title="小疑问"></a>小疑问</h2><h3 id="Servlet什么时候被创建？"><a href="#Servlet什么时候被创建？" class="headerlink" title="Servlet什么时候被创建？"></a>Servlet什么时候被创建？</h3><pre><code>* 默认情况下，第一次被访问时* servlet被创建。可以配置指定Servlet的创建时机。</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!--    配置servlet标签--&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        这是配置名称为Demo1的文件路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.web.servlet.ServletDemo1<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        指定Servlet的创建时间</span></span><br><span class="line"><span class="comment">            1.第一次被访问时。创建</span></span><br><span class="line"><span class="comment">                标签里面的值为负数，第一次访问时被创建</span></span><br><span class="line"><span class="comment">            2.在服务器启动时，创建</span></span><br><span class="line"><span class="comment">                标签里面的值为0或正整数，服务器启动时被创建</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        这是给名称demo1配置访问路径/demo1--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Servlet是单例的"><a href="#Servlet是单例的" class="headerlink" title="Servlet是单例的"></a>Servlet是单例的</h3><pre><code>Servlet的init()方法，只执行一次，说明Servlet在内存中只存在一个对象，Servlet是单例的</code></pre><p>多个用户同时访问时。可能会存在线程安全问题</p><pre><code>解决：      1.不能加锁    2.设置全局静态代码块，严重影响性能。      解决方案：设置局部代码块，即使定义了成员变量，也不要对其修改值</code></pre><h1 id="Servlet3-0-4-0"><a href="#Servlet3-0-4-0" class="headerlink" title="Servlet3.0/4.0"></a>Servlet3.0/4.0</h1><p>支持注解配置。可以选择不使用web.xml</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li><p>创建JavaEE项目，选择Servlet版本3.0以上，可以不创建web.xml</p></li><li><p>定义一个类，实现Servlet接口（浏览器路径访问为，get方法访问）</p></li><li><p>复写方法</p></li><li><p>在类上使用@webServlet注解，进行配置</p><pre><code>@WebServlet(name = &quot;s1&quot;,urlPatterns = &quot;/s1&quot;)</code></pre></li></ol><p><img src="https://img-blog.csdnimg.cn/20200815102949169.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="创建步骤"><br><img src="https://img-blog.csdnimg.cn/2020081510361491.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="创建2"><br><img src="https://img-blog.csdnimg.cn/20200815103649444.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="代码"><br><img src="https://img-blog.csdnimg.cn/2020081510401558.png#pic_center" alt="访问"><br><img src="https://img-blog.csdnimg.cn/20200815104107109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="控制台"></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><pre><code>在Servlet3.0中，注解内部数据是这样的</code></pre><p><img src="https://img-blog.csdnimg.cn/20200815104406443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><pre><code>有一个属性value，一般默认为最重要的urlpatterns，可以使用           @WebServlet(&quot;/s1&quot;)。在注解4.0版本中，必须自己指定urlpatterns:      @WebServlet(name = &quot;s1&quot;,urlPatterns = &quot;/s1&quot;)</code></pre><h1 id="tomcat与IDEA"><a href="#tomcat与IDEA" class="headerlink" title="tomcat与IDEA"></a>tomcat与IDEA</h1><p><img src="https://img-blog.csdnimg.cn/20200815105956207.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb知识核心--Servlet快速入门</title>
      <link href="/2020/08/14/JavaWeb%E7%9F%A5%E8%AF%86%E6%A0%B8%E5%BF%83--Servlet%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2020/08/14/JavaWeb%E7%9F%A5%E8%AF%86%E6%A0%B8%E5%BF%83--Servlet%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200814174407679.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="servlet快速入门"></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><pre><code>全名叫server  applet ，运行在服务端的小程序   servlet就是一个接口，定义了Java类被浏览器访问到（tomcat识别）的规则。   *将来我们自己定义一个类，实现Servlet接口，复写方法</code></pre><a id="more"></a><p><img src="https://img-blog.csdnimg.cn/20200814161110256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="servlet"></p><h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><ol><li>创建JavaEE项目</li><li>定义一个类，实现Servlet接口</li><li>实现接口中的抽象方法</li><li>配置Servlet</li></ol><h2 id="创建JavaEE项目"><a href="#创建JavaEE项目" class="headerlink" title="创建JavaEE项目"></a>创建JavaEE项目</h2><p><img src="https://img-blog.csdnimg.cn/20200814165340757.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""><br>点击next以后，输入项目名称。点击finish。即可完成创建。</p><h2 id="定义一个类，实现Servlet接口"><a href="#定义一个类，实现Servlet接口" class="headerlink" title="定义一个类，实现Servlet接口"></a>定义一个类，实现Servlet接口</h2><p><img src="https://img-blog.csdnimg.cn/2020081416561531.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""><br>创建一个类，实现接口Servlet。<br><img src="https://img-blog.csdnimg.cn/20200814165711754.png#pic_center" alt=""><br>如果servlet没有导入就去添加以下Tomcat的依赖：<br><img src="https://img-blog.csdnimg.cn/2020081416593896.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="1"><br><img src="https://img-blog.csdnimg.cn/20200814170326191.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt=""></p><h2 id="实现接口中的抽象方法"><a href="#实现接口中的抽象方法" class="headerlink" title="实现接口中的抽象方法"></a>实现接口中的抽象方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.web.servlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> OldAZ-PC</span></span><br><span class="line"><span class="comment"> * Servlet快速入门</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo1</span> <span class="keyword">implements</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig servletConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span><span class="comment">//提供服务的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello Servlet"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置Servlet"><a href="#配置Servlet" class="headerlink" title="配置Servlet"></a>配置Servlet</h2><p>在web/wei-inf 文件夹下面的xml文件里面配置servlet<br><img src="https://img-blog.csdnimg.cn/20200814170546478.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="配置"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    配置servlet标签--&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--    配置servlet标签--&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        这是配置名称为Demo1的文件路径--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.web.servlet.ServletDemo1<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        这是给名称demo1配置访问路径/demo1--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo1<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="启动小案例"><a href="#启动小案例" class="headerlink" title="启动小案例"></a>启动小案例</h1><p>点击启动后<br>在浏览器访问/demo1<br><img src="https://img-blog.csdnimg.cn/20200814171624727.png#pic_center" alt=""><br>控制台会出现</p><p><img src="https://img-blog.csdnimg.cn/20200814171706243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="控制台"></p><pre><code>出现了hello Servlet*里面出现的红色字体，是tomcat服务器的信息，不是报错。</code></pre><h1 id="Servlet执行原理"><a href="#Servlet执行原理" class="headerlink" title="Servlet执行原理"></a>Servlet执行原理</h1><ol><li>当服务器接收到客户端的请求后，会解析请求URL路径，获取访问的Servlet的资源路径。</li><li>查找web.xml文件，是否有对应的标签<url-pattern>内容。</li><li>如果有，则找到对应的<serclet-class>对应的全类名</li><li>tomcat会将字节码文件加载进内存，并且创建其对象。</li><li>调用其方法。<br><img src="https://img-blog.csdnimg.cn/20200814173455443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="原理"></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快速入门 </tag>
            
            <tag> Java </tag>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xml解析--Jsoup快捷查询方式</title>
      <link href="/2020/08/13/xml%E8%A7%A3%E6%9E%90--Jsoup%E5%BF%AB%E6%8D%B7%E6%9F%A5%E8%AF%A2%E6%96%B9%E5%BC%8F/"/>
      <url>/2020/08/13/xml%E8%A7%A3%E6%9E%90--Jsoup%E5%BF%AB%E6%8D%B7%E6%9F%A5%E8%AF%A2%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200813152407270.png#pic_center" alt="查询"></p><h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><pre><code>以前当我们想获取&lt;student&gt; -&gt; &lt;name&gt;  -&gt;   &lt;xing&gt; -&gt; &quot;张&quot;时，我们需要先依次获取对应的标签。在获取内容   我们希望有一种快捷的方式，一下子就能定位到这里。   因此就有了快捷查询方式。</code></pre><a id="more"></a><h1 id="快捷查询方式"><a href="#快捷查询方式" class="headerlink" title="快捷查询方式"></a>快捷查询方式</h1><h2 id="selector"><a href="#selector" class="headerlink" title="selector"></a>selector</h2><pre><code>选择器查询  使用方法：Elements select(String cssQuery) </code></pre><h3 id="selector语法"><a href="#selector语法" class="headerlink" title="selector语法"></a>selector语法</h3><p> 参考selector中定义的语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xml.jsoup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> OldAZ-PC</span></span><br><span class="line"><span class="comment"> * 选择器查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupDemo5</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1 获取student。xml的路径</span></span><br><span class="line">        String path = JsoupDemo2.class.getResource("student.xml").getPath();</span><br><span class="line">        <span class="comment">//2.获取Document对象</span></span><br><span class="line">        Document document = Jsoup.parse(<span class="keyword">new</span> File(path), <span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="comment">//3.查询name标签</span></span><br><span class="line">        Elements elements = document.select(<span class="string">"name"</span>);</span><br><span class="line">        System.out.println(elements);</span><br><span class="line">        System.out.println(<span class="string">"---------------"</span>);</span><br><span class="line">        <span class="comment">//4.查询id值为id01的元素</span></span><br><span class="line">        Elements elements1 = document.select(<span class="string">"#id01"</span>);</span><br><span class="line">        System.out.println(elements1);</span><br><span class="line">        System.out.println(<span class="string">"---------------"</span>);</span><br><span class="line">        <span class="comment">//5.获取student标签并且number属性值为xml_0001的age子标签</span></span><br><span class="line">          <span class="comment">//5.1获取student标签并且number属性为xml_0001</span></span><br><span class="line">        Elements elements2 = document.select(<span class="string">"student[number='xml_0001']"</span>);</span><br><span class="line">        System.out.println(elements2);</span><br><span class="line">        System.out.println(<span class="string">"---------------"</span>);</span><br><span class="line">          <span class="comment">//5.2获取student标签并且number属性值为xml_0001的age子标签</span></span><br><span class="line">        Elements elements3 = document.select(<span class="string">"student[number='xml_0001']&gt;age"</span>);</span><br><span class="line">        System.out.println(elements3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="XPath"><a href="#XPath" class="headerlink" title="XPath"></a>XPath</h2><p> w3c定义的一种语法</p><pre><code> XPath即为XML路径语言（XML Path Language）， 它是一种用来确定XML文档中某部分位置的语言。XPath基于XML的树状结构，提供在数据结构树中找寻节点的能力。起初XPath的提出的初衷是将其作为一个通用的、介于XPointer与XSL间的语法模型。但是XPath很快的被开发者采用来当作小型查询语言。</code></pre><p><strong>使用Jsoup的XPath需要导入额外的jar包</strong></p><pre><code>JsoupXpath-0.3.2.jar</code></pre><p>参考w3c的<a href="https://www.w3school.com.cn/xpath/xpath_syntax.asp" target="_blank" rel="noopener">XPath语法文档</a>来使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xml.jsoup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.wanghaomiao.xpath.model.JXDocument;</span><br><span class="line"><span class="keyword">import</span> cn.wanghaomiao.xpath.model.JXNode;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> OldAZ-PC</span></span><br><span class="line"><span class="comment"> * XPath查询</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupDemo6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1 获取student。xml的路径</span></span><br><span class="line">        String path = JsoupDemo2.class.getResource("student.xml").getPath();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取Document对象</span></span><br><span class="line">        Document document = Jsoup.parse(<span class="keyword">new</span> File(path), <span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="comment">//3.根据document对象，创建JXDocument对象</span></span><br><span class="line">        JXDocument jxDocument = <span class="keyword">new</span> JXDocument(document);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.1结合xpath语法查询所有的student标签</span></span><br><span class="line">        List&lt;JXNode&gt; jxNodes = jxDocument.selN(<span class="string">"//student"</span>);</span><br><span class="line">        <span class="keyword">for</span> (JXNode jxNode:jxNodes)&#123;</span><br><span class="line">        System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"==================="</span>);</span><br><span class="line">        <span class="comment">//4.2查询所有的student标签下的那么标签</span></span><br><span class="line">        List&lt;JXNode&gt; jxNodes2 = jxDocument.selN(<span class="string">"//student/name"</span>);</span><br><span class="line">        <span class="keyword">for</span> (JXNode jxNode:jxNodes2)&#123;</span><br><span class="line">            System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"==================="</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.3查询student标签下带有属性的name标签</span></span><br><span class="line">        List&lt;JXNode&gt; jxNodes3 = jxDocument.selN(<span class="string">"//student/name[@id]"</span>);</span><br><span class="line">        <span class="keyword">for</span> (JXNode jxNode:jxNodes3)&#123;</span><br><span class="line">            System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"==================="</span>);</span><br><span class="line">        <span class="comment">//4.3查询student标签下带有属性的name标签,并且id的属性值为id01</span></span><br><span class="line">        List&lt;JXNode&gt; jxNodes4 = jxDocument.selN(<span class="string">"//student/name[@id='id01']"</span>);</span><br><span class="line">        <span class="keyword">for</span> (JXNode jxNode:jxNodes4)&#123;</span><br><span class="line">            System.out.println(jxNode);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"==================="</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快速入门 </tag>
            
            <tag> Java </tag>
            
            <tag> xml </tag>
            
            <tag> Jsoup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xml解析--Jsoup快速入门</title>
      <link href="/2020/08/13/xml%E8%A7%A3%E6%9E%90--Jsoup%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2020/08/13/xml%E8%A7%A3%E6%9E%90--Jsoup%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200813143329389.png#pic_center" alt="jsoup"></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p> Jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。</p><a id="more"></a><h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li><p>导入jar包</p><pre><code>jsoup-1.11.2.jar</code></pre></li><li><p>获取Document</p></li><li><p>获取对应的标签Element对象</p></li><li><p>获取数据</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xml.jsoup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> OldAZ-PC</span></span><br><span class="line"><span class="comment"> * Jsoup快速入门</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//2.获取Document对象,根据xml文档来获取</span></span><br><span class="line">        <span class="comment">//2.1 获取student。xml的路径</span></span><br><span class="line">        String path = JsoupDemo1.class.getResource("student.xml").getPath();</span><br><span class="line">        <span class="comment">//2.2解析xml文档，加载文档进入内存，获取dom树--&gt;Document</span></span><br><span class="line">        Document document = Jsoup.parse(<span class="keyword">new</span> File(path), <span class="string">"utf-8"</span>);</span><br><span class="line">        <span class="comment">//3.获取元素对象</span></span><br><span class="line">        Elements elements = document.getElementsByTag(<span class="string">"name"</span>);</span><br><span class="line">        System.out.println(elements.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.1获取第一个name的element对象</span></span><br><span class="line">        Element element = elements.get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.2获取数据</span></span><br><span class="line">        String name = element.text();</span><br><span class="line">        System.out.println(name);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="对象的使用"><a href="#对象的使用" class="headerlink" title="对象的使用"></a>对象的使用</h1><ol><li>Jsoup：工具类，可以解析html或者xml文档返回给Document对象。</li><li>Document：文档对象，代表内存中的dom树</li><li>Elements：元素Element对象的集合。可以当作ArrayList<Element>来使用</li><li>Element：元素对象</li><li>Node：节点对象<h2 id="Jsoup对象"><a href="#Jsoup对象" class="headerlink" title="Jsoup对象"></a>Jsoup对象</h2><ul><li>parse：解析html或者xml文档，返回Document<ul><li>parse(File in,String charsetName) :解析html或者xml文件的</li><li>parse(String html):解析xml或者html字符串的</li><li>parse(URL url ,int timeoutMillis):通过网络路径获取指定的HTML和xml的文档对象</li></ul></li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xml.jsoup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> OldAZ-PC</span></span><br><span class="line"><span class="comment"> * Jsoup对象功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//2.1 获取student。xml的路径</span></span><br><span class="line">        String path = JsoupDemo2.class.getResource("student.xml").getPath();</span><br><span class="line">        <span class="comment">//2.2解析xml文档，加载文档进入内存，获取dom树--&gt;Document</span></span><br><span class="line"><span class="comment">//        Document document = Jsoup.parse(new File(path), "utf-8");</span></span><br><span class="line"><span class="comment">//        System.out.println(document);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//parse(String html):解析xml或者html字符串的</span></span><br><span class="line">        String str = <span class="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n"</span> +</span><br><span class="line">                <span class="string">" &lt;students   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"</span> +</span><br><span class="line">                <span class="string">" \t\t\t xmlns=\"http://www.itcast.cn/xml\" \n"</span> +</span><br><span class="line">                <span class="string">" \t\t   xsi:schemaLocation=\"http://www.itcast.cn/xml  student.xsd\"\n"</span> +</span><br><span class="line">                <span class="string">" \t\t    &gt;\n"</span> +</span><br><span class="line">                <span class="string">" \t&lt;student number=\"xml_0001\"&gt;\n"</span> +</span><br><span class="line">                <span class="string">" \t\t&lt;name&gt;tom&lt;/name&gt;\n"</span> +</span><br><span class="line">                <span class="string">" \t\t&lt;age&gt;18&lt;/age&gt;\n"</span> +</span><br><span class="line">                <span class="string">" \t\t&lt;sex&gt;male&lt;/sex&gt;\n"</span> +</span><br><span class="line">                <span class="string">" \t&lt;/student&gt;\n"</span> +</span><br><span class="line">                <span class="string">"\t&lt;student number=\"xml_0002\"&gt;\n"</span> +</span><br><span class="line">                <span class="string">" \t\t&lt;name&gt;mark&lt;/name&gt;\n"</span> +</span><br><span class="line">                <span class="string">" \t\t&lt;age&gt;18&lt;/age&gt;\n"</span> +</span><br><span class="line">                <span class="string">" \t\t&lt;sex&gt;female&lt;/sex&gt;\n"</span> +</span><br><span class="line">                <span class="string">" \t&lt;/student&gt;\n"</span> +</span><br><span class="line">                <span class="string">"\t\t \n"</span> +</span><br><span class="line">                <span class="string">" &lt;/students&gt;"</span>;</span><br><span class="line">        Document document = Jsoup.parse(str);</span><br><span class="line">        System.out.println(document);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//parse(URL url ,int timeoutMillis):通过网络路径获取指定的HTML和xml的文档对象</span></span><br><span class="line">        <span class="comment">//代表网络中的资源路径</span></span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">"http://oldaz.top/"</span>);</span><br><span class="line">        Document document1 = Jsoup.parse(url, <span class="number">10000</span>);</span><br><span class="line">        System.out.println(document1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Document对象"><a href="#Document对象" class="headerlink" title="Document对象"></a>Document对象</h2><pre><code>文本对象，代表内存中的dom树</code></pre><h3 id="功能：获取Element对象"><a href="#功能：获取Element对象" class="headerlink" title="功能：获取Element对象"></a>功能：获取Element对象</h3><pre><code>getElementById(id):根据id属性值获取唯一的element对象getElementsByTag(String tagName):根据标签名称获取元素对象集合getElementsByAttribute(String key):根据属性名称来获取元素元素对象集合getElementsByAttribute(String key,String value):                     根据对应的属性名和属性值获取元素对象集合。</code></pre><h3 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h3><p>xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">students</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">student</span> <span class="attr">number</span>=<span class="string">"xml_0001"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">name</span> <span class="attr">id</span> =<span class="string">"id01"</span>&gt;</span>tom<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">sex</span>&gt;</span>male<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">student</span> <span class="attr">number</span>=<span class="string">"xml_0002"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">name</span>&gt;</span>mark<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">sex</span>&gt;</span>female<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br></pre></td></tr></table></figure><p>获取Elements对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xml.jsoup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> OldAZ-PC</span></span><br><span class="line"><span class="comment"> * Document/Element对象功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1 获取student。xml的路径</span></span><br><span class="line">        String path = JsoupDemo2.class.getResource("student.xml").getPath();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取Document对象</span></span><br><span class="line">        Document document = Jsoup.parse(<span class="keyword">new</span> File(path), <span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.获取元素对象</span></span><br><span class="line">        <span class="comment">// 3.1获取所有的student对象</span></span><br><span class="line">        Elements elements = document.getElementsByTag(<span class="string">"student"</span>);</span><br><span class="line">        System.out.println(elements);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"----------getEleentsById-----------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.2获取属性名为id的元素对象</span></span><br><span class="line">        Elements elements1 = document.getElementsByAttribute(<span class="string">"id"</span>);</span><br><span class="line">        System.out.println(elements1);</span><br><span class="line">        System.out.println(<span class="string">"--------------------"</span>);</span><br><span class="line">        <span class="comment">//3.3获取number属性值为xml_0001的元素对象</span></span><br><span class="line">        Elements elements2 = document.getElementsByAttributeValue(<span class="string">"number"</span>, <span class="string">"xml_0001"</span>);</span><br><span class="line">        System.out.println(elements2);</span><br><span class="line">        System.out.println(<span class="string">"--------------------"</span>);</span><br><span class="line">            <span class="comment">//3.4获取id属性值的元素对象</span></span><br><span class="line">        Element id01 = document.getElementById(<span class="string">"id01"</span>);</span><br><span class="line">        System.out.println(id01);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Element对象"><a href="#Element对象" class="headerlink" title="Element对象"></a>Element对象</h2><h3 id="获取子元素对象"><a href="#获取子元素对象" class="headerlink" title="获取子元素对象"></a>获取子元素对象</h3><pre><code>getElementById(id):根据id属性值获取唯一的element对象getElementsByTag(String tagName):根据标签名称获取元素对象集合getElementsByAttribute(String key):根据属性名称来获取元素元素对象集合getElementsByAttribute(String key,String value):                     根据对应的属性名和属性值获取元素对象集合。</code></pre><h3 id="获取属性值"><a href="#获取属性值" class="headerlink" title="获取属性值"></a>获取属性值</h3><pre><code>String attr(String key):根据属性名称获取属性值</code></pre><h3 id="获取文本内容"><a href="#获取文本内容" class="headerlink" title="获取文本内容"></a>获取文本内容</h3><pre><code>String text():获取文本内容String html():获取标签体的所有内容（包括子标签的字符串内容）</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xml.jsoup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> OldAZ-PC</span></span><br><span class="line"><span class="comment"> * Element对象功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsoupDemo4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1 获取student。xml的路径</span></span><br><span class="line">        String path = JsoupDemo2.class.getResource("student.xml").getPath();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取Document对象</span></span><br><span class="line">        Document document = Jsoup.parse(<span class="keyword">new</span> File(path), <span class="string">"utf-8"</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Element对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  获取子元素对象</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       getElementById(id):根据id属性值获取唯一的element对象</span></span><br><span class="line"><span class="comment">       getElementsByTag(String tagName):根据标签名称获取元素对象集合</span></span><br><span class="line"><span class="comment">       getElementsByAttribute(String key):根据属性名称来获取元素元素对象集合</span></span><br><span class="line"><span class="comment">       getElementsByAttribute(String key,String value):</span></span><br><span class="line"><span class="comment">                            根据对应的属性名和属性值获取元素对象集合。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  获取属性值</span></span><br><span class="line"><span class="comment">    String attr(String key):根据属性名称获取属性值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  获取文本内容</span></span><br><span class="line"><span class="comment">    String text():获取文本内容</span></span><br><span class="line"><span class="comment">    String html():获取标签体的所有内容（包括子标签的字符串内容）</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过document 对象获取name标签，获取所有的name标签   2个</span></span><br><span class="line">        Elements elements = document.getElementsByTag(<span class="string">"name"</span>);</span><br><span class="line">        System.out.println(elements.size());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//通过Element对象获取子标签对象</span></span><br><span class="line">        System.out.println(<span class="string">"---------------"</span>);</span><br><span class="line">        Element student_1 = document.getElementsByTag(<span class="string">"student"</span>).get(<span class="number">0</span>);</span><br><span class="line">        Elements stdent_1_name = student_1.getElementsByTag(<span class="string">"name"</span>);</span><br><span class="line">        System.out.println(stdent_1_name.size());</span><br><span class="line">            <span class="comment">//获取student对象的属性值</span></span><br><span class="line">        String number = student_1.attr(<span class="string">"number"</span>);</span><br><span class="line">        System.out.println(number);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取文本内容，text只获取纯文本内容，html会获取标签</span></span><br><span class="line">        String text = stdent_1_name.text();</span><br><span class="line">        String html = stdent_1_name.html();</span><br><span class="line">        System.out.println(text);</span><br><span class="line">        System.out.println(html);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Node节点对象"><a href="#Node节点对象" class="headerlink" title="Node节点对象"></a>Node节点对象</h2><pre><code>是Document和Element的父类 主要是包含增删改的方法</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快速入门 </tag>
            
            <tag> Java </tag>
            
            <tag> xml </tag>
            
            <tag> Jsoup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>来看看XML到底是个啥--xml解析</title>
      <link href="/2020/08/12/%E6%9D%A5%E7%9C%8B%E7%9C%8BXML%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5--xml%E8%A7%A3%E6%9E%90/"/>
      <url>/2020/08/12/%E6%9D%A5%E7%9C%8B%E7%9C%8BXML%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5--xml%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200812163705788.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="xml解析"></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>操作xml文档，将文档中的数据读取到内存中。</p><pre><code>操作xml文档：     1.解析（读取）：将文档中的数据读取到内存中              2.写入：将内存中的数据写到xml文档中。持久化的存储。</code></pre><a id="more"></a><h1 id="解析xml的方式"><a href="#解析xml的方式" class="headerlink" title="解析xml的方式"></a>解析xml的方式</h1><p>两种思想</p><ul><li><p>DOM思想（服务器端）</p><pre><code>将标记语言文档一次性加入内存中，在内存中形成dom树       优点：操作方便，可以对文档进行CRUD（增删改查）的所有操作       缺点：占内存（一次性读取，形成的dom树是文档大小的上千倍）</code></pre></li><li><p>SAX思想（移动端）</p><pre><code>逐行读取，基于事件驱动的   优点：不占内存   缺点：只能读取（不能增删改） </code></pre><p><img src="https://img-blog.csdnimg.cn/2020081216133641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="SAXs思想"></p><h1 id="xml常见的解析器"><a href="#xml常见的解析器" class="headerlink" title="xml常见的解析器"></a>xml常见的解析器</h1></li></ul><ol><li><p>JAXP</p><pre><code>sun公司提供的解析器，支持dom和sax两种思想* 性能不好，一般不会使用，了解即可</code></pre></li><li><p>DOM4J</p><pre><code>基于DOM思想的解析器*一款很优秀的解析器，使用于服务器端。   </code></pre></li><li><p>Jsounp</p><pre><code>jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。*由于xml刚开始就是为了代替html的，因此可以通过Jsoup解析xml。</code></pre></li><li><p>PULL</p><pre><code>安卓内置的解析器，sax方式的</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> xml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>来看看XML到底是个啥--xml约束文档</title>
      <link href="/2020/08/11/%E6%9D%A5%E7%9C%8B%E7%9C%8BXML%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5--xml%E7%BA%A6%E6%9D%9F%E6%96%87%E6%A1%A3/"/>
      <url>/2020/08/11/%E6%9D%A5%E7%9C%8B%E7%9C%8BXML%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5--xml%E7%BA%A6%E6%9D%9F%E6%96%87%E6%A1%A3/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200811180313461.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="xml"></p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><pre><code>规定xml文档的书写规则     * 作为框架的使用者（程序员）       1.能够在xml中引入约束文档       2.能够简单的读懂约束文档</code></pre> <a id="more"></a><h1 id="逻辑图"><a href="#逻辑图" class="headerlink" title="逻辑图"></a>逻辑图</h1><p>以下是约束文档的的作用和逻辑关系的图解：<br>   <img src="https://img-blog.csdnimg.cn/20200811160148642.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="约束"></p><h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><h2 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h2><pre><code>一种简单的约束文档</code></pre><h3 id="student-dtd"><a href="#student-dtd" class="headerlink" title="student.dtd"></a>student.dtd</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">students</span> (<span class="meta-keyword">student</span>*) &gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">student</span> (<span class="meta-keyword">name</span>,<span class="meta-keyword">age</span>,<span class="meta-keyword">sex</span>)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">name</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">age</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ELEMENT <span class="meta-keyword">sex</span> (<span class="meta-keyword">#PCDATA</span>)&gt;</span></span><br><span class="line"><span class="meta">&lt;!ATTLIST <span class="meta-keyword">student</span> <span class="meta-keyword">number</span> <span class="meta-keyword">ID</span> <span class="meta-keyword">#REQUIRED</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这是对于约束文档的说明：<br><img src="https://img-blog.csdnimg.cn/20200811164408212.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="解释"></p><h3 id="引入约束文档"><a href="#引入约束文档" class="headerlink" title="引入约束文档"></a>引入约束文档</h3><p>1.内部dtd文档</p><pre><code>将约束规则定义在xml文档中（不常用）&lt;!DOCTYPE students [                        里面书写约束文档                    ]&gt;</code></pre><p>2.外部dtd文档</p><pre><code>将约束文档定义在外部dtd文件中     1.本地的   &lt;!DOCTYPE 根标签 SYSTEM &quot;外部的dtd文件&quot;&gt;   2.网络的    &lt;!DOCTYPE 根标签 PUBLIC &quot;dtd文件的名字&quot; &quot;外部的dtd文件URL&quot;&gt;</code></pre><h3 id="dtd实例"><a href="#dtd实例" class="headerlink" title="dtd实例"></a>dtd实例</h3><p>根据上面的约束文档书写的xml文档</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">students</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">"student.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">students</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">student</span> <span class="attr">number</span>=<span class="string">"itcast_0001"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>tom<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sex</span>&gt;</span>male<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Schema"><a href="#Schema" class="headerlink" title="Schema"></a>Schema</h2><pre><code>一种复杂的约束技术弥补了dtd约束文档的缺陷（dtd定义的标签里面的值不能进行限制）。</code></pre><h3 id="student-xsd"><a href="#student-xsd" class="headerlink" title="student.xsd"></a>student.xsd</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0"?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--schema文档本身就是xml文档--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xsd:schema</span> <span class="attr">xmlns</span>=<span class="string">"http://www.itcast.cn/xml"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsd</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">targetNamespace</span>=<span class="string">"http://www.itcast.cn/xml"</span> <span class="attr">elementFormDefault</span>=<span class="string">"qualified"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    定义元素，名字叫做students;元素的类型为studentsType ，自定义的studentsType需要在下面声明--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"students"</span> <span class="attr">type</span>=<span class="string">"studentsType"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    声明类型studentsType    complex：组合类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"studentsType"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        sequence表示按顺序出现 student元素  为studentType类型  最少出现0次   最多出现（未绑定）无数次--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"student"</span> <span class="attr">type</span>=<span class="string">"studentType"</span> <span class="attr">minOccurs</span>=<span class="string">"0"</span> <span class="attr">maxOccurs</span>=<span class="string">"unbounded"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--    声明类型studentType  complex：组合类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:complexType</span> <span class="attr">name</span>=<span class="string">"studentType"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        按顺序出现里面声明的标签--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"xsd:string"</span>/&gt;</span> <span class="comment">&lt;!--字符串--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">type</span>=<span class="string">"ageType"</span> /&gt;</span> <span class="comment">&lt;!--自定义类型--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:element</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">type</span>=<span class="string">"sexType"</span> /&gt;</span><span class="comment">&lt;!--自定义类型--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:sequence</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        属性名为number，类型为自定义类型numberType，必须出现--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:attribute</span> <span class="attr">name</span>=<span class="string">"number"</span> <span class="attr">type</span>=<span class="string">"numberType"</span> <span class="attr">use</span>=<span class="string">"required"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:complexType</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--           声明sex类型   simple：简单类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:simpleType</span> <span class="attr">name</span>=<span class="string">"sexType"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        类型为String--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:restriction</span> <span class="attr">base</span>=<span class="string">"xsd:string"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            必须二选一--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:enumeration</span> <span class="attr">value</span>=<span class="string">"male"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:enumeration</span> <span class="attr">value</span>=<span class="string">"female"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--           声明age类型   simple：简单类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:simpleType</span> <span class="attr">name</span>=<span class="string">"ageType"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:restriction</span> <span class="attr">base</span>=<span class="string">"xsd:integer"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            最小值为0--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:minInclusive</span> <span class="attr">value</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            最大值为256--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:maxInclusive</span> <span class="attr">value</span>=<span class="string">"256"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--           声明number类型   simple：简单类型--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">xsd:simpleType</span> <span class="attr">name</span>=<span class="string">"numberType"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        类型为String--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">xsd:restriction</span> <span class="attr">base</span>=<span class="string">"xsd:string"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            命名规则--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">xsd:pattern</span> <span class="attr">value</span>=<span class="string">"xml_\d&#123;4&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">xsd:restriction</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">xsd:simpleType</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xsd:schema</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="引入schema文档"><a href="#引入schema文档" class="headerlink" title="引入schema文档"></a>引入schema文档</h3><p>1.填写xml文档的根元素<br>2.引入xsi前缀.  xmlns:xsi=”<a href="http://www.w3.org/2001/XMLSchema-instance&quot;" target="_blank" rel="noopener">http://www.w3.org/2001/XMLSchema-instance&quot;</a><br>3.引入xsd文件命名空间.  xsi:schemaLocation=”<a href="http://www.itcast.cn/xml" target="_blank" rel="noopener">http://www.itcast.cn/xml</a>  student.xsd”<br>4.为每一个xsd约束声明一个前缀,作为标识  xmlns=”<a href="http://www.itcast.cn/xml&quot;" target="_blank" rel="noopener">http://www.itcast.cn/xml&quot;</a> </p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><pre><code>这是一个只有一个约束文档的实例</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">students</span>   <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns</span>=<span class="string">"http://www.itcast.cn/xml"</span> </span></span><br><span class="line"><span class="tag"> </span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.itcast.cn/xml  student.xsd"</span></span></span><br><span class="line"><span class="tag">     &gt;</span> </span><br><span class="line">     <span class="comment">&lt;!-- 当有多个约束文档时可加前缀  xmlns：a(前缀)--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">student</span> <span class="attr">number</span>=<span class="string">"heima_0001"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">name</span>&gt;</span>tom<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">age</span>&gt;</span>18<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">sex</span>&gt;</span>male<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br></pre></td></tr></table></figure><pre><code>以下是多个约束文档的实例（spring框架的配置文件）</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.cisol.mvcdemo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/resources/**"</span> <span class="attr">location</span>=<span class="string">"/resources/"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.ContentNegotiatingViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"order"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mediaTypes"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"json"</span> <span class="attr">value</span>=<span class="string">"application/json"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"xml"</span> <span class="attr">value</span>=<span class="string">"application/xml"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"htm"</span> <span class="attr">value</span>=<span class="string">"text/html"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultViews"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                </span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.json.MappingJackson2JsonView"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ignoreAcceptHeader"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.JstlView"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsps/"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"209715200"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"resolveLazily"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> xml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>来看看XML到底是个啥--xml快速入门</title>
      <link href="/2020/08/11/%E6%9D%A5%E7%9C%8B%E7%9C%8BXML%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5--xml%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2020/08/11/%E6%9D%A5%E7%9C%8B%E7%9C%8BXML%E5%88%B0%E5%BA%95%E6%98%AF%E4%B8%AA%E5%95%A5--xml%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/2020081118012415.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="xml"></p><h1 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h1><pre><code>以前为了代替语法松散的html而诞生。最后竞争不赢，就发展自己的优势，与properties配置文件竞争。（xml 存数据比properties厉害，标签存数据特别的结构化）。</code></pre>  <a id="more"></a><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><pre><code>Extensib Markup language 可扩展标记语言*可扩展：标签都是自定义的。如 &lt;suer&gt; &lt; student&gt;</code></pre><h2 id="功能：存储数据"><a href="#功能：存储数据" class="headerlink" title="功能：存储数据"></a>功能：存储数据</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><pre><code>简单的配置文件用properties文件复杂的配置文件用xml文件</code></pre><h3 id="在网络中传输"><a href="#在网络中传输" class="headerlink" title="在网络中传输"></a>在网络中传输</h3><pre><code>因为xml是纯文本的，所以可以跨平台传输。</code></pre><h2 id="xml与html的-区别"><a href="#xml与html的-区别" class="headerlink" title="xml与html的    区别"></a>xml与html的    区别</h2><ul><li>xml标签是自定义的，html标签是预定义的</li><li>xml的语法严格，html语法松散</li><li>xml是存储数据，html是展示数据<h1 id="语法：快速入门"><a href="#语法：快速入门" class="headerlink" title="语法：快速入门"></a>语法：快速入门</h1><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2> 1.xml文档后缀名必须为.xml</li></ul><p><img src="https://img-blog.csdnimg.cn/20200811101456282.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="后缀"></p><ol start="2"><li>xml第一行必须定义为文档声明</li></ol><p><img src="https://img-blog.csdnimg.cn/20200811102811260.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="声明"></p><p>-判断是否书写正确，将文档直接拉入浏览器，如不报错。就说明书写正确。</p><p><img src="https://img-blog.csdnimg.cn/20200811102852177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="书写正确"></p><p> 3.xml文档中有且只有一个根标签<br> 4.属性值必须用引号包裹（单双都可以）</p><pre><code>例如第一行的版本属性值，标签的id值 </code></pre><p>5.标签必须正确的关闭<br>6.标签名称区分大小写</p><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version = '1.0' ?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">users</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span> = <span class="string">'1'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>huangzhong<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>23<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">gender</span>&gt;</span>male<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">user</span> <span class="attr">id</span> = <span class="string">'2'</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>zhaoyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>20<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">gender</span>&gt;</span>male<span class="tag">&lt;/<span class="name">gender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">users</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h2><h3 id="文档申明"><a href="#文档申明" class="headerlink" title="文档申明"></a>文档申明</h3><p> 1.格式</p><pre><code>&lt;?xml 属性列表 ?&gt;*尖括号与问号之间不能有空格、问号与xml之间不能有问号</code></pre><p>2.属性列表</p><pre><code>version  ：版本号 ，必须的属性（不存在就报错）encoding   ：  编码方式。告知解析引擎当前文档使用的字符集。默认值：ISO-8859-1standalone  ： 是否独立      取值：          yes：不依赖其他文件          no:依赖其他文件</code></pre><h3 id="指令（已经不这么使用了，了解即可）"><a href="#指令（已经不这么使用了，了解即可）" class="headerlink" title="指令（已经不这么使用了，了解即可）"></a>指令（已经不这么使用了，了解即可）</h3><pre><code>结合css控制标签样式。</code></pre><p><img src="https://img-blog.csdnimg.cn/20200811105704538.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="css样式"><br><img src="https://img-blog.csdnimg.cn/20200811105929318.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="引入css"></p><p><img src="https://img-blog.csdnimg.cn/20200811105756459.png" alt="数据的展示"></p><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><pre><code>标签名称自定义的</code></pre><p>规则</p><pre><code>名称可以含字母、数字以及其他的字符名称不能以数字或者标点符号开始名称不能以字符 “xml”（或者 XML、Xml）开始名称不能包含空格可使用任何名称，没有保留的字词。</code></pre><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><pre><code>id属性值唯一</code></pre><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><pre><code>CDATA区：该区域中的数据会被原样展示格式：&lt;![CDATA[数据]]&gt;   例如：展示代码</code></pre><p><img src="https://img-blog.csdnimg.cn/20200811111253632.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="代码"></p><p>效果：<br><img src="https://img-blog.csdnimg.cn/20200811111349436.png" alt="展示效果"></p><p><strong>约束部分在下一篇文章，不然一篇文章太长了！</strong></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快速入门 </tag>
            
            <tag> Java </tag>
            
            <tag> xml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿哲学了就来聊——Java反射</title>
      <link href="/2020/08/09/%E9%98%BF%E5%93%B2%E5%AD%A6%E4%BA%86%E5%B0%B1%E6%9D%A5%E8%81%8A%E2%80%94%E2%80%94Java%E5%8F%8D%E5%B0%84/"/>
      <url>/2020/08/09/%E9%98%BF%E5%93%B2%E5%AD%A6%E4%BA%86%E5%B0%B1%E6%9D%A5%E8%81%8A%E2%80%94%E2%80%94Java%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p><img src="https://img-blog.csdnimg.cn/20200811180620383.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="反射"></p><pre><code>reflect 反射 ，反转 权力的转让类中有很多的方法和属性，方法的调用权限，属性的赋值权限，属于对象的。让对象把这些权力交出来，交给Class和其它反射类（Field,Method,Contructor）管理。</code></pre><a id="more"></a><p>Class类 的范围就是天下所有的字节码文件，每一个类被编译成字节码文件后，都可以看成是Class类的对象</p><p><img src="https://img-blog.csdnimg.cn/20200808124514232.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="反射"></p><ul><li>与Java反射相关的类如下：</li></ul><table><thead><tr><th>类名</th><th>用途</th></tr></thead><tbody><tr><td>Class类</td><td>代表类的实体，在运行的Java程序中表示类和接口</td></tr><tr><td>Field类</td><td>代表成员变量（成员变量也成为属性）</td></tr><tr><td>Mehod</td><td>代表类的方法</td></tr><tr><td>Construtor类</td><td>代表类的构造方法</td></tr></tbody></table><h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><p>Class类代表实体，在运行Java应用程序中表示类和接口。这个类中提供了很多有用的方法，这里对他们的分类进行简单介绍。</p><h3 id="获得类的相关方法"><a href="#获得类的相关方法" class="headerlink" title="获得类的相关方法"></a>获得类的相关方法</h3><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>asSubclass(Class<U>  class)</td><td>把传递的类和对象转换成代表其子类的对象</td></tr><tr><td>Cast</td><td>把对象转换成代表类或是接口对象</td></tr><tr><td>getClassLoader()</td><td>获得类的加载器</td></tr><tr><td>getClasses()</td><td>返回一个数组，该数组中含该类中有所有的公共类和接口类的对象</td></tr><tr><td>getDeclaredClasses</td><td>返回一个数组，该数组中包含该类所有的类和接口对象</td></tr><tr><td>forName(String className)</td><td>根据类返回类的对象</td></tr><tr><td>getName()</td><td>获得类的完整路径名字</td></tr><tr><td>newInstance()</td><td>创建类的实例</td></tr><tr><td>getPackage()</td><td>获得类的包</td></tr><tr><td>getSimpleName()</td><td>获得类的名字</td></tr><tr><td>getSuperclass()</td><td>获得当前类继承的父类的名字</td></tr><tr><td>getInterfaces()</td><td>获得当前实现的类或者是接口</td></tr></tbody></table><h3 id="获得类中属性相关的方法"><a href="#获得类中属性相关的方法" class="headerlink" title="获得类中属性相关的方法"></a>获得类中属性相关的方法</h3><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>getFiled(String name)</td><td>获得某个共有的属性对象</td></tr><tr><td>getDFileds()</td><td>获得所有的共有属性对象</td></tr><tr><td>getDeclaredFiled ( String name )</td><td>获得某个属性对象</td></tr><tr><td>getDeclaredFileds ( String name )</td><td>获得所有属性对象</td></tr></tbody></table><h3 id="获得类中构造器的相关方法"><a href="#获得类中构造器的相关方法" class="headerlink" title="获得类中构造器的相关方法"></a>获得类中构造器的相关方法</h3><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>getMethod(String name, Class…&lt;?&gt; parameterTypes)</td><td>获得该类某个公有的方法</td></tr><tr><td>getMethods()</td><td>获得该类所有公有的方法</td></tr><tr><td>getDeclaredMethod(String name, Class…&lt;?&gt; parameterTypes)</td><td>获得该类某个方法</td></tr><tr><td>getDeclaredMethods()</td><td>获得该类所有方法</td></tr></tbody></table><h2 id="Field"><a href="#Field" class="headerlink" title="Field"></a>Field</h2><p><a href="https://developer.android.google.cn/reference/java/lang/reflect/Field" target="_blank" rel="noopener">Field</a>代表类的成员变量（成员变量也称为类的属性）。</p><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>equals(Object obj)</td><td>属性与obj相等则返回true</td></tr><tr><td>get(Object obj)</td><td>获得obj中对应的属性值</td></tr><tr><td>set(Object obj, Object value)</td><td>设置obj中对应属性值</td></tr></tbody></table><h2 id="Method类"><a href="#Method类" class="headerlink" title="Method类"></a>Method类</h2><p><a href="https://developer.android.google.cn/reference/java/lang/reflect/Method" target="_blank" rel="noopener">Method</a>代表类的方法。</p><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>invoke(Object obj, Object… args)</td><td>传递object对象及参数调用该对象对应的方法</td></tr></tbody></table><h2 id="Constructor类"><a href="#Constructor类" class="headerlink" title="Constructor类"></a>Constructor类</h2><p><a href="https://developer.android.google.cn/reference/java/lang/reflect/Constructor" target="_blank" rel="noopener">Constructor</a>代表类的构造方法。</p><table><thead><tr><th>方法</th><th>用途</th></tr></thead><tbody><tr><td>newInstance(Object… initargs)</td><td>根据传递的参数创建类的对象</td></tr></tbody></table><h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><ul><li>获取Class对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public <span class="keyword">void</span> test1()&#123;</span><br><span class="line">    <span class="comment">// 1.获取某个类的实体类对象：三种方式</span></span><br><span class="line">    Class&lt;Emps&gt; c1 = Emps.class;</span><br><span class="line">    Class&lt;?extends Emps&gt; c2 = <span class="keyword">new</span> Emps().getClass();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class&lt;?&gt; c3 = Class.forName(<span class="string">"com.web.pojo.Emps"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.分别对实体类的成员（属性，方法，构造方法）进行托管</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Test<span class="comment">//使用构造器管理实体类中的构造方法</span></span><br><span class="line">    public <span class="keyword">void</span> test2() throws Exception &#123;</span><br><span class="line">        <span class="comment">// 1.获取class对象对象：三种方式</span></span><br><span class="line">        Class&lt;Emps&gt; c1 = Emps.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取构造方法的管理类</span></span><br><span class="line">            <span class="comment">//2.1托管无参构造</span></span><br><span class="line">            Emps emps =  c1.newInstance();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//2.2托管有参构造</span></span><br><span class="line">        Constructor&lt;Emps&gt; Constructor = c1.getDeclaredConstructor(Integer.class, <span class="built_in">String</span>.class);</span><br><span class="line">        Emps emps1 = Constructor.newInstance(<span class="number">1</span>, <span class="string">"元歌"</span>);</span><br><span class="line">        System.out.println(emps);</span><br><span class="line">        System.out.println(emps1);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="普通方法"><a href="#普通方法" class="headerlink" title="普通方法"></a>普通方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@Test<span class="comment">//使用Method类，来管理实体类中的某个方法</span></span><br><span class="line">public <span class="keyword">void</span> test4() throws Exception &#123;</span><br><span class="line">    <span class="comment">// 1.获取class对象对象</span></span><br><span class="line">    Class&lt;Emps&gt; c1 = Emps.class;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.获取某个方法的管理类Method</span></span><br><span class="line">    Method method = c1.getDeclaredMethod(<span class="string">"setName"</span>, <span class="built_in">String</span>.class);</span><br><span class="line">    Emps emps = c1.newInstance();</span><br><span class="line">    System.out.println(emps);</span><br><span class="line">    method.invoke(emps,<span class="string">"韩信"</span>);</span><br><span class="line">    System.out.println(emps);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"--------调用toString------"</span>);</span><br><span class="line">    Method method1 = c1.getDeclaredMethod(<span class="string">"toString"</span>);</span><br><span class="line">    <span class="built_in">Object</span> invoke = method1.invoke(emps);</span><br><span class="line">    System.out.println(invoke);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@Test<span class="comment">//使用field类，来管理实体类中的某个属性</span></span><br><span class="line">public <span class="keyword">void</span> test3() throws Exception &#123;</span><br><span class="line">    <span class="comment">// 1.获取class对象对象：三种方式</span></span><br><span class="line">    Class&lt;Emps&gt; c1 = Emps.class;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.获取某个属性的管理类Field</span></span><br><span class="line">    Field f1 = c1.getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line">    Field f2 = c1.getDeclaredField(<span class="string">"age"</span>);</span><br><span class="line">    Emps emps = c1.newInstance();</span><br><span class="line">    <span class="comment">//3.开启私有属性的操作权限</span></span><br><span class="line">    f1.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    f2.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    System.out.println(emps);</span><br><span class="line">    f1.set(emps,<span class="string">"孙尚香"</span>);</span><br><span class="line">    f2.set(emps,<span class="number">18</span>);</span><br><span class="line">    System.out.println(emps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="反射案例"><a href="#反射案例" class="headerlink" title="反射案例"></a>反射案例</h1><h2 id="实现DBUtils工具类"><a href="#实现DBUtils工具类" class="headerlink" title="实现DBUtils工具类"></a>实现DBUtils工具类</h2><pre><code>封装查询结果集的原理实用多个数据表格的通用查询</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">package com.web.jdbc;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">JdbcUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">//封装结果集的通用方法</span></span><br><span class="line">    public <span class="keyword">static</span> &lt;T&gt; List&lt;T&gt; rsToList(<span class="built_in">String</span> sql,Class&lt;T&gt; c)&#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;T&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//加载驱动，获取连接对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//加载驱动，获取连接对象</span></span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">            Connection con = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/wuhanhb?useSSL=false"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line">            <span class="comment">//获取执行sql对象,执行sql，返回结果集rs</span></span><br><span class="line">            PreparedStatement psmt = con.prepareStatement(sql);</span><br><span class="line">            ResultSet rs = psmt.executeQuery(sql);</span><br><span class="line">            <span class="comment">//3.遍历rs</span></span><br><span class="line">               <span class="comment">//3.1借助元数据，获取列名和总列数</span></span><br><span class="line">            ResultSetMetaData md = rs.getMetaData();</span><br><span class="line">            int conut = md.getColumnCount();</span><br><span class="line">            <span class="keyword">while</span> (rs.next())&#123;</span><br><span class="line">                <span class="comment">//循环一次获取一行数据，调用一次Object获取一个单元格的数据</span></span><br><span class="line">                T t = c.newInstance();</span><br><span class="line">                <span class="keyword">for</span> (int i=<span class="number">1</span>;i&lt;=conut;i++) &#123;</span><br><span class="line">                    <span class="built_in">Object</span> value = rs.getObject(i);</span><br><span class="line">                        <span class="comment">//每一列的列名充当T中的属性名，获取对应的属性管理对象f</span></span><br><span class="line">                    Field f = c.getDeclaredField(md.getColumnName(i));</span><br><span class="line">                    f.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="comment">//为私有属性赋值</span></span><br><span class="line">                    f.set(t,value);</span><br><span class="line">                &#125;</span><br><span class="line">                list.add(t);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><h3 id="查询emps数据表"><a href="#查询emps数据表" class="headerlink" title="查询emps数据表"></a>查询emps数据表</h3><ul><li><p>这是数据库中的数据<br><img src="https://img-blog.csdnimg.cn/20200809134612880.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="数据库中的数据"></p></li><li><p>这是测试类代码(<em>Emps实体类不单独贴出</em>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public <span class="keyword">void</span> test5()&#123;</span><br><span class="line">    <span class="comment">//测试jdbc工具类</span></span><br><span class="line">    List&lt;Emps&gt; emps = JdbcUtil.rsToList(<span class="string">"select * from emps"</span>, Emps.class);</span><br><span class="line">    System.out.println(emps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>查询结果<br><img src="https://img-blog.csdnimg.cn/20200809134947476.png" alt="查询emps表"></p><h3 id="查询dept数据表"><a href="#查询dept数据表" class="headerlink" title="查询dept数据表"></a>查询dept数据表</h3></li><li><p>这是数据库中的数据<br><img src="https://img-blog.csdnimg.cn/20200809135144525.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="dept数据"></p></li><li><p>这是测试类代码(<em>Emps实体类不单独贴出</em>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public <span class="keyword">void</span> test5()&#123;</span><br><span class="line">    <span class="comment">//测试jdbc工具类</span></span><br><span class="line">    List&lt;Dept&gt; dept = JdbcUtil.rsToList(<span class="string">"select * from dept"</span>, Dept.class);</span><br><span class="line">    System.out.println(dept);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>D</p></li><li><p>查询结果<br><img src="https://img-blog.csdnimg.cn/20200809135555587.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="dept表查询结果"></p></li></ul><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p><a href="https://github.com/OldAZ/case_1/tree/master/2.case_redis%E4%BC%98%E5%8C%96%E6%A1%88%E4%BE%8B" target="_blank" rel="noopener">点击获取源码</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础_1</title>
      <link href="/2020/05/30/JavaScript%E5%9F%BA%E7%A1%80_1/"/>
      <url>/2020/05/30/JavaScript%E5%9F%BA%E7%A1%80_1/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200530215426605.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="Javascript基础_1"></p><h1 id="JS-简介"><a href="#JS-简介" class="headerlink" title="JS 简介"></a>JS 简介</h1><pre><code>JavaScript 是属于 HTML 和 Web 的编程语言。编程令计算机完成您需要它们做的工作。JavaScript 很容易学习。</code></pre><h2 id="为何学习-JavaScript？"><a href="#为何学习-JavaScript？" class="headerlink" title="为何学习 JavaScript？"></a>为何学习 JavaScript？</h2><p>JavaScript 是 web 开发者必学的三种语言之一：</p><ul><li>HTML 定义网页的内容</li><li>CSS 规定网页的布局</li><li>JavaScript 对网页行为进行编程</li></ul><a id="more"></a><h2 id="JavaScript-简介"><a href="#JavaScript-简介" class="headerlink" title="JavaScript 简介"></a>JavaScript 简介</h2><pre><code>JavaScript 能够改变 HTML 内容getElementById() 是多个 JavaScript HTML 方法之一。</code></pre><p>本例使用该方法来“查找” id=”demo” 的 HTML 元素，并把元素内容（innerHTML）更改为 “Hello JavaScript”：</p><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = <span class="string">"Hello JavaScript"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = <span class="string">'Hello JavaScript'</span>;</span><br></pre></td></tr></table></figure><ol><li><p>JavaScript 能够改变 HTML 属性</p><p> 通过改变 <img> 标签的 src 属性（source）来改变一张 HTML 图像<br> JavaScript 能够改变 HTML 样式 (CSS)<br>改变 HTML 元素的样式，是改变 HTML 属性的一种变种：</p></li></ol><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).style.fontSize = <span class="string">"25px"</span>;</span><br></pre></td></tr></table></figure><ol start="2"><li>JavaScript 能够隐藏 HTML 元素<br>可通过改变 display 样式来隐藏 HTML 元素：</li></ol><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).style.display=<span class="string">"none"</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>JavaScript 能够显示 HTML 元素<br>可通过改变 display 样式来显示隐藏的 HTML 元素：</li></ol><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).style.display=<span class="string">"block"</span>;</span><br></pre></td></tr></table></figure><h1 id="JavaScript-使用"><a href="#JavaScript-使用" class="headerlink" title="JavaScript 使用"></a>JavaScript 使用</h1><h2 id="JS-输出"><a href="#JS-输出" class="headerlink" title="JS 输出"></a>JS 输出</h2><h3 id="60-script-gt-标签"><a href="#60-script-gt-标签" class="headerlink" title="&#60;script&gt; 标签"></a>&#60;script&gt; 标签</h3><p>在 HTML 中，JavaScript 代码必须位于 &#60;script&gt; 与 &#60;/script&gt; 标签之间。</p><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = <span class="string">"我的第一段 JavaScript"</span>;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>注释：旧的 JavaScript 例子也许会使用 type 属性：&#60;script type=”text/javascript”&gt;。<br>注释：type 属性不是必需的。JavaScript 是 HTML 中的默认脚本语言。</p><ol><li><p>&#60;head&gt; 或&#60;body&gt; 中的 JavaScript</p><p> 您能够在 HTML 文档中放置任意数量的脚本。<br> 脚本可被放置与 HTML 页面的 <body> 或 <head> 部分中，或兼而有之。</p></li><li><p>&#60;head&gt; 中的 JavaScript<br>在本例中，JavaScript 函数被放置于 HTML 页面的 &#60;head&gt; 部分。<br>该函数会在按钮被点击时调用：</p></li></ol><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = <span class="string">"段落被更改。"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;一张网页&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;p id="demo"&gt;一个段落&lt;/</span>p&gt;</span><br><span class="line">&lt;button type=<span class="string">"button"</span> onclick=<span class="string">"myFunction()"</span>&gt;试一试&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p>提示：把脚本置于 <body> 元素的底部，可改善显示速度，因为脚本编译会拖慢显示。</p><h1 id="外部脚本"><a href="#外部脚本" class="headerlink" title="外部脚本"></a>外部脚本</h1><p>脚本可放置与外部文件中：<br>外部文件：myScript.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = <span class="string">"段落被更改。"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>外部脚本很实用，如果相同的脚本被用于许多不同的网页。<br>JavaScript 文件的文件扩展名是 .js。</p><p>如需使用外部脚本，请在 &#60;script&gt; 标签的 src (source) 属性中设置脚本的名称：</p><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"myScript.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><pre><code>您可以在 &amp;#60;head&gt; 或 &amp;#60;body&gt; 中放置外部脚本引用。该脚本的表现与它被置于 &amp;#60;script&gt; 标签中是一样的。</code></pre><p>注释：外部脚本不能包含 &#60;script&gt; 标签。</p><h1 id="外部-JavaScript-的优势"><a href="#外部-JavaScript-的优势" class="headerlink" title="外部 JavaScript 的优势"></a>外部 JavaScript 的优势</h1><p>在外部文件中放置脚本有如下优势：</p><ul><li>分离了 HTML 和代码</li><li>使 HTML 和 JavaScript 更易于阅读和维护</li><li>已缓存的 JavaScript 文件可加速页面加载</li></ul><p>如需向一张页面添加多个脚本文件 - 请使用多个 script 标签：</p><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"myScript1.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="myScript2.js"&gt;&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h2 id="外部引用"><a href="#外部引用" class="headerlink" title="外部引用"></a>外部引用</h2><p>可通过完整的 URL 或相对于当前网页的路径引用外部脚本</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://www.xxxx.com/js/myScript1.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h1 id="JavaScript-输出"><a href="#JavaScript-输出" class="headerlink" title="JavaScript 输出"></a>JavaScript 输出</h1><pre><code>JavaScript 不提供任何内建的打印或显示函数。</code></pre><h2 id="JavaScript-显示方案"><a href="#JavaScript-显示方案" class="headerlink" title="JavaScript 显示方案"></a>JavaScript 显示方案</h2><p>JavaScript 能够以不同方式“显示”数据：</p><ul><li>使用 window.alert() 写入警告框</li><li>使用 document.write() 写入 HTML 输出</li><li>使用 innerHTML 写入 HTML 元素</li><li>使用 console.log() 写入浏览器控制台</li></ul><h3 id="使用-innerHTML"><a href="#使用-innerHTML" class="headerlink" title="使用 innerHTML"></a>使用 innerHTML</h3><pre><code>如需访问 HTML 元素，JavaScript 可使用 document.getElementById(id) 方法。</code></pre><p>id 属性定义 HTML 元素。innerHTML 属性定义 HTML 内容：</p><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;我的第一张网页&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;p&gt;我的第一个段落&lt;/</span>p&gt;</span><br><span class="line"></span><br><span class="line">&lt;p id=<span class="string">"demo"</span>&gt;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp"> document.getElementById("demo").innerHTML = 5 + 6;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><p>提示：更改 HTML 元素的 innerHTML 属性是在 HTML 中显示数据的常用方法。</p><h3 id="使用-document-write"><a href="#使用-document-write" class="headerlink" title="使用 document.write()"></a>使用 document.write()</h3><pre><code>出于测试目的，使用 document.write() 比较方便：</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;我的第一张网页&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;p&gt;我的第一个段落&lt;/</span>p&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">document</span>.write(<span class="number">5</span> + <span class="number">6</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p>注意：在 HTML 文档完全加载后使用 document.write() 将删除所有已有的 HTML ：</p><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;我的第一张网页&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;p&gt;我的第一个段落&lt;/</span>p&gt;</span><br><span class="line"></span><br><span class="line">&lt;button onclick=<span class="string">"document.write(5 + 6)"</span>&gt;试一试&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p>提示：document.write() 方法仅用于测试。</p><h3 id="使用-window-alert"><a href="#使用-window-alert" class="headerlink" title="使用 window.alert()"></a>使用 window.alert()</h3><pre><code>您能够使用警告框来显示数据：</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;我的第一张网页&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;p&gt;我的第一个段落&lt;/</span>p&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">window</span>.alert(<span class="number">5</span> + <span class="number">6</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用-console-log"><a href="#使用-console-log" class="headerlink" title="使用 console.log()"></a>使用 console.log()</h3><pre><code>在浏览器中，您可使用 console.log() 方法来显示数据。请通过 F12 来激活浏览器控制台，并在菜单中选择“控制台”。</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;我的第一张网页&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;p&gt;我的第一个段落&lt;/</span>p&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span> + <span class="number">6</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><h1 id="JavaScript-语句"><a href="#JavaScript-语句" class="headerlink" title="JavaScript 语句"></a>JavaScript 语句</h1><pre><code>在 HTML 中，JavaScript 语句是由 web 浏览器“执行”的“指令”。</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x, y, z;<span class="comment">// 语句 1</span></span><br><span class="line">x = <span class="number">22</span>;<span class="comment">// 语句 2</span></span><br><span class="line">y = <span class="number">11</span>;<span class="comment">// 语句 3</span></span><br><span class="line">z = x + y;<span class="comment">// 语句 4</span></span><br></pre></td></tr></table></figure><h2 id="JavaScript-程序"><a href="#JavaScript-程序" class="headerlink" title="JavaScript 程序"></a>JavaScript 程序</h2><ul><li>计算机程序是由计算机“执行”的一系列“指令”。</li><li>在编程语言中，这些编程指令被称为语句。</li><li>JavaScript 程序就是一系列的编程语句。</li></ul><p>注释：在 HTML 中，JavaScript 程序由 web 浏览器执行。</p><h2 id="JavaScript-语句-1"><a href="#JavaScript-语句-1" class="headerlink" title="JavaScript 语句"></a>JavaScript 语句</h2><pre><code>JavaScript 语句由以下构成：          值、运算符、表达式、关键词和注释。</code></pre><p>这条语句告诉浏览器在 id=”demo” 的 HTML 元素中输出 “Hello Kitty.”：</p><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = <span class="string">"Hello Kitty."</span>;</span><br></pre></td></tr></table></figure><pre><code>大多数 JavaScript 程序都包含许多 JavaScript 语句。这些语句会按照它们被编写的顺序逐一执行。</code></pre><p>注释：JavaScript 程序（以及 JavaScript 语句）常被称为 JavaScript 代码。</p><h2 id="分号"><a href="#分号" class="headerlink" title="分号( ; )"></a>分号( ; )</h2><pre><code>分号分隔 JavaScript 语句。</code></pre><p>请在每条可执行的语句之后添加分号：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">5</span>;</span><br><span class="line">b = <span class="number">6</span>;</span><br><span class="line">c = a + b;</span><br></pre></td></tr></table></figure><p>如果有分号分隔，允许在同一行写多条语句：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">5</span>; b = <span class="number">6</span>; c = a + b;</span><br></pre></td></tr></table></figure><pre><code>可能在网上看到不带分号的例子。</code></pre><p>提示：以分号结束语句不是必需的，但我们仍然强烈建议您这么做。</p><h2 id="JavaScript-空白字符"><a href="#JavaScript-空白字符" class="headerlink" title="JavaScript 空白字符"></a>JavaScript 空白字符</h2><pre><code>JavaScript 会忽略多个空格。您可以向脚本添加空格，以增强可读性。</code></pre><p>下面这两行是相等的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="string">"Bill"</span>;</span><br><span class="line"><span class="keyword">var</span> person=<span class="string">"Bill"</span>;</span><br></pre></td></tr></table></figure><pre><code>在运算符旁边（ = + - * / ）添加空格是个好习惯：</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = y + z;</span><br></pre></td></tr></table></figure><h2 id="JavaScript-行长度和折行"><a href="#JavaScript-行长度和折行" class="headerlink" title="JavaScript 行长度和折行"></a>JavaScript 行长度和折行</h2><pre><code>为了达到最佳的可读性，程序员们常常喜欢把代码行控制在 80 个字符以内。如果 JavaScript 语句太长，对其进行折行的最佳位置是某个运算符：</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML =</span><br><span class="line"> <span class="string">"Hello Kitty."</span>;</span><br></pre></td></tr></table></figure><h2 id="JavaScript-代码块"><a href="#JavaScript-代码块" class="headerlink" title="JavaScript 代码块"></a>JavaScript 代码块</h2><pre><code>JavaScript 语句可以用花括号（{...}）组合在代码块中。代码块的作用是定义一同执行的语句。</code></pre><p>您会在 JavaScript 中看到成块组合在一起的语句：</p><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = <span class="string">"Hello Kitty."</span>;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"myDIV"</span>).innerHTML = <span class="string">"How are you?"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释：在本教程中我们为代码块用了 4 个空格的缩进。</p><h2 id="JavaScript-关键词"><a href="#JavaScript-关键词" class="headerlink" title="JavaScript 关键词"></a>JavaScript 关键词</h2><pre><code>JavaScript 语句常常通过某个关键词来标识需要执行的 JavaScript 动作。</code></pre><p>下面的表格列出了一部分将在教程中学到的关键词：</p><table><thead><tr><th>关键词</th><th>描述</th></tr></thead><tbody><tr><td>break</td><td>终止 switch 或循环。</td></tr><tr><td>continue</td><td>跳出循环并在顶端开始。</td></tr><tr><td>debugger</td><td>停止执行 JavaScript，并调用调试函数（如果可用）。</td></tr><tr><td>do … while</td><td>执行语句块，并在条件为真时重复代码块。</td></tr><tr><td>for</td><td>标记需被执行的语句块，只要条件为真。</td></tr><tr><td>function</td><td>声明函数。</td></tr><tr><td>if … else</td><td>标记需被执行的语句块，根据某个条件。</td></tr><tr><td>return</td><td>退出函数。</td></tr><tr><td>switch</td><td>标记需被执行的语句块，根据不同的情况。</td></tr><tr><td>try … catch</td><td>对语句块实现错误处理。</td></tr><tr><td>var</td><td>声明变量。</td></tr><tr><td>注释：JavaScript 关键词指的是保留的单词。保留词无法用作变量名。</td><td></td></tr></tbody></table><h1 id="JavaScript-语法"><a href="#JavaScript-语法" class="headerlink" title="JavaScript 语法"></a>JavaScript 语法</h1><pre><code>JavaScript 语法是一套规则，它定义了 JavaScript 的语言结构。</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x, y;<span class="comment">// 如何声明变量</span></span><br><span class="line">x = <span class="number">7</span>; y = <span class="number">8</span>;<span class="comment">// 如何赋值</span></span><br><span class="line">z = x + y;<span class="comment">// 如何计算值</span></span><br></pre></td></tr></table></figure><h1 id="JavaScript-值"><a href="#JavaScript-值" class="headerlink" title="JavaScript 值"></a>JavaScript 值</h1><pre><code>JavaScript 语句定义两种类型的值：混合值和变量值。混合值被称为字面量（literal）。变量值被称为变量。</code></pre><h1 id="JavaScript-字面量"><a href="#JavaScript-字面量" class="headerlink" title="JavaScript 字面量"></a>JavaScript 字面量</h1><ul><li><p>书写混合值最重要的规则是：<br>  写数值有无小数点均可：</p><p>  15.90</p><p>  10011</p></li></ul><ul><li><p>字符串是文本，由双引号或单引号包围：</p><pre><code>&quot;Bill Gates&quot;&apos;Bill Gates&apos; </code></pre></li></ul><h1 id="JavaScript-变量"><a href="#JavaScript-变量" class="headerlink" title="JavaScript 变量"></a>JavaScript 变量</h1><pre><code>在编程语言中，变量用于存储数据值。JavaScript 使用 var 关键词来声明变量。</code></pre><p>= 号用于为变量赋值。</p><p>在本例中，x 被定义为变量。然后，x 被赋的值是 7：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x;</span><br><span class="line"></span><br><span class="line">x = <span class="number">7</span>;</span><br></pre></td></tr></table></figure><h1 id="JavaScript-运算符"><a href="#JavaScript-运算符" class="headerlink" title="JavaScript 运算符"></a>JavaScript 运算符</h1><p>JavaScript 使用算数运算符（+ - * /）来计算值：</p><p>(7 + 8) * 10</p><p>JavaScript 使用赋值运算符（=）向变量赋值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x, y;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">var</span> y = <span class="number">8</span>;</span><br></pre></td></tr></table></figure><p>值可以是多种类型，比如数值和字符串。</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"Bill"</span> + <span class="string">" "</span> + <span class="string">"Gates"</span>，计算为 <span class="string">"Bill Gates"</span>：</span><br><span class="line"></span><br><span class="line"><span class="string">"Bill"</span> + <span class="string">" "</span> + <span class="string">"Gates"</span></span><br></pre></td></tr></table></figure><h1 id="JavaScript-关键词-1"><a href="#JavaScript-关键词-1" class="headerlink" title="JavaScript 关键词"></a>JavaScript 关键词</h1><pre><code>JavaScript 关键词用于标识被执行的动作。</code></pre><p>var 关键词告知浏览器创建新的变量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">7</span> + <span class="number">8</span>;</span><br><span class="line"><span class="keyword">var</span> y = x * <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h1 id="JavaScript-注释"><a href="#JavaScript-注释" class="headerlink" title="JavaScript 注释"></a>JavaScript 注释</h1><pre><code>并非所有 JavaScript 语句都被“执行”。双斜杠 // 或 /* 与 */ 之间的代码被视为注释。</code></pre><p>注释会被忽略，不会被执行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">7</span>;   <span class="comment">// 会执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// var x = 8;   不会执行</span></span><br></pre></td></tr></table></figure><h1 id="JavaScript-标识符"><a href="#JavaScript-标识符" class="headerlink" title="JavaScript 标识符"></a>JavaScript 标识符</h1><pre><code>标识符是名称。</code></pre><ul><li><p>在 JavaScript 中，标识符用于命名变量（以及关键词、函数和标签）。</p></li><li><p>在大多数编程语言中，合法名称的规则大多相同。</p></li><li><p>在 JavaScript 中，首字符必须是字母、下划线（-）或美元符号（$）。</p></li><li><p>连串的字符可以是字母、数字、下划线或美元符号。</p></li></ul><p>提示：数值不可以作为首字符。这样，JavaScript 就能轻松区分标识符和数值。</p><h2 id="JavaScript-对大小写敏感"><a href="#JavaScript-对大小写敏感" class="headerlink" title="JavaScript 对大小写敏感"></a>JavaScript 对大小写敏感</h2><pre><code>所有 JavaScript 标识符对大小写敏感。变量 lastName 和 lastname，是两个不同的变量。</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lastName = <span class="string">"Gates"</span>;</span><br><span class="line">lastname = <span class="string">"Jobs"</span>;</span><br></pre></td></tr></table></figure><p><strong>JavaScript 不会把 VAR 或 Var 译作关键词 var。</strong></p><h2 id="JavaScript-与驼峰式大小写"><a href="#JavaScript-与驼峰式大小写" class="headerlink" title="JavaScript 与驼峰式大小写"></a>JavaScript 与驼峰式大小写</h2><pre><code>历史上，程序员曾使用三种把多个单词连接为一个变量名的方法：</code></pre><p>连字符：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">first-name, last-name, master-card, inter-city.</span><br></pre></td></tr></table></figure><p>注释：JavaScript 中不能使用连字符。它是为减法预留的。</p><p>下划线：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">first_name, last_name, master_card, inter_city.</span><br></pre></td></tr></table></figure><p>驼峰式大小写（Camel Case）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FirstName, LastName, MasterCard, InterCity.</span><br></pre></td></tr></table></figure><p>JavaScript 程序员倾向于使用以小写字母开头的驼峰大小写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firstName, lastName, masterCard, interCity</span><br></pre></td></tr></table></figure><h1 id="JavaScript-字符集"><a href="#JavaScript-字符集" class="headerlink" title="JavaScript 字符集"></a>JavaScript 字符集</h1><pre><code>JavaScript 使用 Unicode 字符集。Unicode 覆盖世界上几乎所有的字符、标点和符号。</code></pre><h1 id="JavaScript-注释（2）"><a href="#JavaScript-注释（2）" class="headerlink" title="JavaScript 注释（2）"></a>JavaScript 注释（2）</h1><pre><code>JavaScript 注释用于解释 JavaScript 代码，增强其可读性。JavaScript 注释也可以用于在测试替代代码时阻止执行。</code></pre><h2 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h2><pre><code>单行注释以 // 开头。任何位于 // 与行末之间的文本都会被 JavaScript 忽略（不会执行）。</code></pre><p>本例在每条代码行之前使用单行注释：</p><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 改变标题：</span></span><br><span class="line"> <span class="built_in">document</span>.getElementById(<span class="string">"myH"</span>).innerHTML = <span class="string">"我的第一张页面"</span>;</span><br><span class="line"><span class="comment">// 改变段落：</span></span><br><span class="line"> <span class="built_in">document</span>.getElementById(<span class="string">"myP"</span>).innerHTML = <span class="string">"我的第一个段落。"</span>;</span><br></pre></td></tr></table></figure><p> 本例在每行结尾处使用了单行注释来解释代码：</p><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">5</span>;      <span class="comment">// 声明 x，为其赋值 5</span></span><br><span class="line"><span class="keyword">var</span> y = x + <span class="number">2</span>;  <span class="comment">// 声明 y，为其赋值 x + 2</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML基础_14</title>
      <link href="/2020/05/29/HTML%E5%9F%BA%E7%A1%80_14/"/>
      <url>/2020/05/29/HTML%E5%9F%BA%E7%A1%80_14/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200529000957933.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="HTML基础_14"></p><h1 id="HTML-Web-Workers"><a href="#HTML-Web-Workers" class="headerlink" title="HTML Web Workers"></a>HTML Web Workers</h1><pre><code>Web worker 是运行在后台的 JavaScript，不会影响页面的性能。</code></pre><h2 id="什么是-Web-Worker？"><a href="#什么是-Web-Worker？" class="headerlink" title="什么是 Web Worker？"></a>什么是 Web Worker？</h2><pre><code>当在 HTML 页面中执行脚本时，页面是不可响应的，直到脚本已完成。</code></pre><a id="more"></a><pre><code>Web worker 是运行在后台的 JavaScript，独立于其他脚本，不会影响页面的性能。您可以继续做任何愿意做的事情：点击、选取内容等等，而此时 web worker 运行在后台。</code></pre><h2 id="检测-Web-Worker-支持"><a href="#检测-Web-Worker-支持" class="headerlink" title="检测 Web Worker 支持"></a>检测 Web Worker 支持</h2><pre><code>在创建 web worker 之前，请检测用户浏览器是否支持它：</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span>(Worker) !== <span class="string">"undefined"</span>) &#123;</span><br><span class="line">       <span class="comment">// 是的！支持 Web worker！</span></span><br><span class="line">       <span class="comment">// 一些代码.....</span></span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">// 抱歉！不支持 Web Worker！</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="创建-Web-Worker-文件"><a href="#创建-Web-Worker-文件" class="headerlink" title="创建 Web Worker 文件"></a>创建 Web Worker 文件</h2><pre><code>现在，让我们在一个外部 JavaScript 文件中创建我们的 web worker。</code></pre><p>   在此处，我们创建了计数脚本。该脚本存储于 “demo_workers.js” 文件中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timedCount</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    i = i + <span class="number">1</span>;</span><br><span class="line">    postMessage(i);</span><br><span class="line">    setTimeout(<span class="string">"timedCount()"</span>,<span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">timedCount();</span><br></pre></td></tr></table></figure><pre><code>以上代码中重要的部分是 postMessage() 方法 - 它用于向 HTML 页面传回一段消息。</code></pre><p>   注释: web worker 通常不用于如此简单的脚本，而是用于更耗费 CPU 资源的任务。</p><h2 id="创建-Web-Worker-对象"><a href="#创建-Web-Worker-对象" class="headerlink" title="创建 Web Worker 对象"></a>创建 Web Worker 对象</h2><pre><code>现在我们已经有了 web worker 文件，我们需要从 HTML 页面调用它。</code></pre><p>   下面的代码行检测是否存在 worker，如果不存在，- 它会创建一个新的 web worker 对象，然后运行 “demo_workers.js” 中的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span>(w) == <span class="string">"undefined"</span>) &#123;</span><br><span class="line">      w = <span class="keyword">new</span> Worker(<span class="string">"demo_workers.js"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  然后我们就可以从 web worker 发生和接收消息了。</span><br><span class="line">  向 web worker 添加一个 <span class="string">"onmessage"</span> 事件监听器：</span><br><span class="line">  w.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">document</span>.getElementById(<span class="string">"result"</span>).innerHTML = event.data;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><pre><code>当 web worker 传送消息时，会执行事件监听器中的代码。来自 web worker 的数据会存储于 event.data 中。</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span>(w) == <span class="string">"undefined"</span>) &#123;</span><br><span class="line">       w = <span class="keyword">new</span> Worker(<span class="string">"demo_workers.js"</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>   然后我们就可以从 web worker 发生和接收消息了。<br>    向 web worker 添加一个 “onmessage” 事件监听器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">w.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">     <span class="built_in">document</span>.getElementById(<span class="string">"result"</span>).innerHTML = event.data;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure><p>   当 web worker 传送消息时，会执行事件监听器中的代码。来自 web worker 的数据会存储于 event.data 中。</p><h2 id="终止-Web-Worker"><a href="#终止-Web-Worker" class="headerlink" title="终止 Web Worker"></a>终止 Web Worker</h2><ul><li>当创建 web worker 后，它会继续监听消息（即使在外部脚本完成后）直到其被终止为止。</li><li>如需终止 web worker，并释放浏览器/计算机资源，请使用 terminate() 方法：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">w.terminate();</span><br></pre></td></tr></table></figure><h2 id="复用-Web-Worker"><a href="#复用-Web-Worker" class="headerlink" title="复用 Web Worker"></a>复用 Web Worker</h2><p>   如果您把 worker 变量设置为 undefined，在其被终止后，可以重复使用该代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">w = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><h1 id="Web-Worker-和-DOM"><a href="#Web-Worker-和-DOM" class="headerlink" title="Web Worker 和 DOM"></a>Web Worker 和 DOM</h1><p>   由于 web worker 位于外部文件中，它们无法访问下例 JavaScript 对象：</p><ul><li>window 对象</li><li>document 对象</li><li>parent 对象</li></ul><h1 id="HTML-Server-Sent-事件"><a href="#HTML-Server-Sent-事件" class="headerlink" title="HTML Server-Sent 事件"></a>HTML Server-Sent 事件</h1><pre><code>Server-Sent 事件允许网页从服务器获得更新。Server-Sent 事件 - One Way Messaging</code></pre><p>Server-Sent 事件指的是网页自动从服务器获得更新。<br>以前也可能做到这一点，前提是网页不得不询问是否有可用的更新。<br>通过 Server-Sent 事件，更新能够自动到达。</p><p>例如：Facebook/Twitter 更新、股价更新、新的博文、赛事结果，等等。</p><h2 id="接收-Server-Sent-事件通知"><a href="#接收-Server-Sent-事件通知" class="headerlink" title="接收 Server-Sent 事件通知"></a>接收 Server-Sent 事件通知</h2><pre><code>EventSource 对象用于接收服务器发送事件通知：</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> source = <span class="keyword">new</span> EventSource(<span class="string">"demo_sse.php"</span>);</span><br><span class="line">source.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"result"</span>).innerHTML += event.data + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>例子解释：</p><pre><code>创建一个新的 EventSource 对象，然后规定发送更新的页面的 URL（本例中是 &quot;demo_sse.php&quot;）每当接收到一次更新，就会发生 onmessage 事件当 onmessage 事件发生时，把已接收的数据推入 id 为 &quot;result&quot; 的元素中</code></pre><h2 id="检测-Server-Sent-事件支持"><a href="#检测-Server-Sent-事件支持" class="headerlink" title="检测 Server-Sent 事件支持"></a>检测 Server-Sent 事件支持</h2><p>在 TIY 实例中，我们编写了一段额外的代码来检测服务器发送事件的浏览器支持：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span>(EventSource) !== <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    <span class="comment">// 是的！支持服务器发送事件！</span></span><br><span class="line">    <span class="comment">// 一些代码.....</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 抱歉！不支持服务器发送事件！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="服务器端代码实例"><a href="#服务器端代码实例" class="headerlink" title="服务器端代码实例"></a>服务器端代码实例</h2><pre><code>为了使上例运行，您需要能够发送数据更新的服务器（比如 PHP 或 ASP）。</code></pre><p>服务器端事件流的语法非常简单。请把 “Content-Type” 报头设置为 “text/event-stream”。现在，您可以开始发送事件流了。</p><p>PHP 中的代码 (demo_sse.php)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header(<span class="string">'Content-Type: text/event-stream'</span>);</span><br><span class="line">header(<span class="string">'Cache-Control: no-cache'</span>);</span><br><span class="line"></span><br><span class="line">$time = date(<span class="string">'r'</span>);</span><br><span class="line">echo <span class="string">"data: The server time is: &#123;$time&#125;\n\n"</span>;</span><br><span class="line">flush();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>ASP 中的代码 (VB) (demo_sse.asp)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">Response.ContentType = <span class="string">"text/event-stream"</span></span><br><span class="line">Response.Expires = <span class="number">-1</span></span><br><span class="line">Response.Write(<span class="string">"data: The server time is: "</span> &amp; now())</span><br><span class="line">Response.Flush()</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>代码解释：</p><ul><li>把报头 “Content-Type” 设置为 “text/event-stream”</li><li>规定不对页面进行缓存</li><li>输出要发送的日期（始终以 “data: “ 开头）</li><li>向网页刷新输出数据</li></ul><h1 id="EventSource-对象"><a href="#EventSource-对象" class="headerlink" title="EventSource 对象"></a>EventSource 对象</h1><p>在上例中，我们使用 onmessage 事件来获取消息。不过还可以使用其他事件：</p><table><thead><tr><th>事件</th><th>描述</th></tr></thead><tbody><tr><td>onopen</td><td>当通往服务器的连接被打开</td></tr><tr><td>onmessage</td><td>当接收到消息</td></tr><tr><td>onerror</td><td>当发生错误</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML基础_13</title>
      <link href="/2020/05/28/HTML%E5%9F%BA%E7%A1%80_13/"/>
      <url>/2020/05/28/HTML%E5%9F%BA%E7%A1%80_13/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200528235355793.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="HTMLj基础_13"></p><h1 id="HTML5-地理定位"><a href="#HTML5-地理定位" class="headerlink" title="HTML5 地理定位"></a>HTML5 地理定位</h1><p>   定位用户的位置</p><h2 id="HTML5-Geolocation-API-用于获得用户的地理位置。"><a href="#HTML5-Geolocation-API-用于获得用户的地理位置。" class="headerlink" title="HTML5 Geolocation API 用于获得用户的地理位置。"></a>HTML5 Geolocation API 用于获得用户的地理位置。</h2><pre><code>鉴于该特性可能侵犯用户的隐私，除非用户同意，否则用户位置信息是不可用的。</code></pre><a id="more"></a><h2 id="HTML5-使用地理定位"><a href="#HTML5-使用地理定位" class="headerlink" title="HTML5 - 使用地理定位"></a>HTML5 - 使用地理定位</h2><pre><code>请使用 getCurrentPosition() 方法来获得用户的位置。</code></pre><p>   下例是一个简单的地理定位实例，可返回用户位置的经度和纬度。<br>    实例<br>    <script></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x=<span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>);</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getLocation</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (navigator.geolocation)</span><br><span class="line">      &#123;</span><br><span class="line">      navigator.geolocation.getCurrentPosition(showPosition);</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;x.innerHTML=<span class="string">"Geolocation is not supported by this browser."</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">showPosition</span>(<span class="params">position</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    x.innerHTML=<span class="string">"Latitude: "</span> + position.coords.latitude +</span><br><span class="line">    <span class="string">"&lt;br /&gt;Longitude: "</span> + position.coords.longitude;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>   例子解释：</p><p>   检测是否支持地理定位</p><pre><code>如果支持，则运行 getCurrentPosition() 方法。如果不支持，则向用户显示一段消息。如果getCurrentPosition()运行成功，则向参数showPosition中规定的函数返回一个coordinates对象showPosition() 函数获得并显示经度和纬度</code></pre><p>   上面的例子是一个非常基础的地理定位脚本，不含错误处理。</p><h2 id="getCurrentPosition-方法-返回数据"><a href="#getCurrentPosition-方法-返回数据" class="headerlink" title="getCurrentPosition() 方法 - 返回数据"></a>getCurrentPosition() 方法 - 返回数据</h2><pre><code>若成功，则 getCurrentPosition() 方法返回对象。始终会返回 latitude、longitude 以及 accuracy 属性。如果可用，则会返回其他下面的属性。</code></pre><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>coords.latitude</td><td>十进制数的纬度</td></tr><tr><td>coords.longitude</td><td>十进制数的经度</td></tr><tr><td>coords.accuracy</td><td>位置精度</td></tr><tr><td>coords.altitude</td><td>海拔，海平面以上以米计</td></tr><tr><td>coords.altitudeAccuracy</td><td>位置的海拔精度</td></tr><tr><td>coords.heading</td><td>方向，从正北开始以度计</td></tr><tr><td>coords.speed</td><td>速度，以米/每秒计</td></tr><tr><td>timestamp</td><td>响应的日期/时间</td></tr><tr><td>Geolocation</td><td>对象 - 其他有趣的方法</td></tr><tr><td>watchPosition()</td><td>返回用户的当前位置，并继续返回用户移动时的更新位置（就像汽车上的 GPS）。</td></tr><tr><td>clearWatch()</td><td>停止 watchPosition() 方法</td></tr></tbody></table><pre><code>下面的例子展示 watchPosition() 方法。</code></pre><p>   实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> x=<span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLocation</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (navigator.geolocation)</span><br><span class="line">    &#123;</span><br><span class="line">    navigator.geolocation.watchPosition(showPosition);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;x.innerHTML=<span class="string">"Geolocation is not supported by this browser."</span>;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showPosition</span>(<span class="params">position</span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">  x.innerHTML=<span class="string">"Latitude: "</span> + position.coords.latitude +</span><br><span class="line">  <span class="string">"&lt;br /&gt;Longitude: "</span> + position.coords.longitude;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h1 id="HTML5-拖放"><a href="#HTML5-拖放" class="headerlink" title="HTML5 拖放"></a>HTML5 拖放</h1><pre><code>拖放拖放（Drag 和 Drop）是很常见的特性。它指的是您抓取某物并拖入不同的位置。</code></pre><p>拖放是 HTML5 标准的组成部分：任何元素都是可拖放的。</p><h1 id="HTML-拖放实例"><a href="#HTML-拖放实例" class="headerlink" title="HTML 拖放实例"></a>HTML 拖放实例</h1><p>下列是关于拖放的简单例子：</p><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">allowDrop</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    ev.preventDefault();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drag</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    ev.dataTransfer.setData(<span class="string">"text"</span>, ev.target.id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drop</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    ev.preventDefault();</span><br><span class="line">    <span class="keyword">var</span> data = ev.dataTransfer.getData(<span class="string">"text"</span>);</span><br><span class="line">    ev.target.appendChild(<span class="built_in">document</span>.getElementById(data));</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">"div1"</span> ondrop=<span class="string">"drop(event)"</span> ondragover=<span class="string">"allowDrop(event)"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;img id="drag1" src="img_logo.gif" draggable="true" ondragstart="drag(event)" width="336" height="69"&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><pre><code>它也许看上去有点复杂，不过让我们研究一下拖放事件的所有不同部分。</code></pre><p>把元素设置为可拖放<br>首先：<br>为了把一个元素设置为可拖放，请把 draggable 属性设置为 true：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img draggable=<span class="string">"true"</span>&gt;</span><br></pre></td></tr></table></figure><pre><code>拖放的内容 - ondragstart 和 setData()然后，规定当元素被拖动时发生的事情。</code></pre><p>在上面的例子中，ondragstart 属性调用了一个 drag(event) 函数，规定拖动什么数据。<br>dataTransfer.setData() 方法设置被拖动数据的数据类型和值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drag</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    ev.dataTransfer.setData(<span class="string">"text"</span>, ev.target.id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在本例中，数据类型是 "text"，而值是这个可拖动元素的 id ("drag1")。</p><h2 id="拖到何处-ondragover"><a href="#拖到何处-ondragover" class="headerlink" title="拖到何处 - ondragover"></a>拖到何处 - ondragover</h2><pre><code>ondragover 事件规定被拖动的数据能够被放置到何处。默认地，数据/元素无法被放置到其他元素中。为了实现拖放，我们必须阻止元素的这种默认的处理方式。</code></pre><p>   这个任务由 ondragover 事件的 event.preventDefault() 方法完成：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">event.preventDefault()</span><br></pre></td></tr></table></figure><pre><code>进行放置 - ondrop当放开被拖数据时，会发生 drop 事件。</code></pre><p>在上面的例子中，ondrop 属性调用了一个函数，drop(event)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drop</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">    ev.preventDefault();</span><br><span class="line">    <span class="keyword">var</span> data = ev.dataTransfer.getData(<span class="string">"text"</span>);</span><br><span class="line">    ev.target.appendChild(<span class="built_in">document</span>.getElementById(data));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码解释：</p><pre><code>调用 preventDefault() 来阻止数据的浏览器默认处理方式（drop 事件的默认行为是以链接形式打开）通过 dataTransfer.getData() 方法获得被拖的数据。该方法将返回在 setData() 方法中设置为相同类型的任何数据被拖数据是被拖元素的 id (&quot;drag1&quot;)把被拖元素追加到放置元素中</code></pre><h1 id="HTML-本地存储"><a href="#HTML-本地存储" class="headerlink" title="HTML 本地存储"></a>HTML 本地存储</h1><pre><code>HTML 本地存储：优于 cookies。</code></pre><h2 id="什么是-HTML-本地存储？"><a href="#什么是-HTML-本地存储？" class="headerlink" title="什么是 HTML 本地存储？"></a>什么是 HTML 本地存储？</h2><pre><code>通过本地存储（Local Storage），web 应用程序能够在用户浏览器中对数据进行本地的存储。在 HTML5 之前，应用程序数据只能存储在 cookie 中，包括每个服务器请求。本地存储则更安全，并且可在不影响网站性能的前提下将大量数据存储于本地。与 cookie 不同，存储限制要大得多（至少5MB），并且信息不会被传输到服务器。本地存储经由起源地（origin）（经由域和协议）。所有页面，从起源地，能够存储和访问相同的数据。</code></pre><h2 id="HTML-本地存储对象"><a href="#HTML-本地存储对象" class="headerlink" title="HTML 本地存储对象"></a>HTML 本地存储对象</h2><pre><code>HTML 本地存储提供了两个在客户端存储数据的对象：</code></pre><ul><li>window.localStorage - 存储没有截止日期的数据</li><li>window.sessionStorage - 针对一个 session 来存储数据（当关闭浏览器标签页时数据会丢失）</li></ul><p>在使用本地存储时，请检测 localStorage 和 sessionStorage 的浏览器支持：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span>(Storage) !== <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    <span class="comment">// 针对 localStorage/sessionStorage 的代码</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 抱歉！不支持 Web Storage ..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="localStorage-对象"><a href="#localStorage-对象" class="headerlink" title="localStorage 对象"></a>localStorage 对象</h2><pre><code>localStorage 对象存储的是没有截止日期的数据。当浏览器被关闭时数据不会被删除，在下一天、周或年中，都是可用的。</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存储</span></span><br><span class="line">localStorage.setItem(<span class="string">"lastname"</span>, <span class="string">"Gates"</span>);</span><br><span class="line"><span class="comment">// 取回</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"result"</span>).innerHTML = localStorage.getItem(<span class="string">"lastname"</span>);</span><br></pre></td></tr></table></figure><p>实例解释：</p><pre><code>创建 localStorage 名称/值对，其中：name=&quot;lastname&quot;，value=&quot;Gates&quot;取回 &quot;lastname&quot; 的值，并把它插到 id=&quot;result&quot; 的元素中</code></pre><p>上例也可这样写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 存储</span></span><br><span class="line">localStorage.lastname = <span class="string">"Gates"</span>;</span><br><span class="line"><span class="comment">// 取回</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"result"</span>).innerHTML = localStorage.lastname;</span><br></pre></td></tr></table></figure><p>删除 "lastname" localStorage 项目的语法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localStorage.removeItem(<span class="string">"lastname"</span>);</span><br></pre></td></tr></table></figure><p>注释：名称/值对始终存储为字符串。如果需要请记得把它们转换为其他格式！</p><pre><code>下面的例子对用户点击按钮的次数进行计数。在代码中，值字符串被转换为数值，依次对计数进行递增：</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (localStorage.clickcount) &#123;</span><br><span class="line">    localStorage.clickcount = <span class="built_in">Number</span>(localStorage.clickcount) + <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    localStorage.clickcount = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"result"</span>).innerHTML = <span class="string">"您已经点击这个按钮 "</span> +</span><br><span class="line">localStorage.clickcount + <span class="string">" 次。"</span>;</span><br></pre></td></tr></table></figure><h2 id="sessionStorage-对象"><a href="#sessionStorage-对象" class="headerlink" title="sessionStorage 对象"></a>sessionStorage 对象</h2><pre><code>sessionStorage 对象等同 localStorage 对象，不同之处在于只对一个 session 存储数据。如果用户关闭具体的浏览器标签页，数据也会被删除。</code></pre><p>下例在当前 session 中对用户点击按钮进行计数：</p><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (sessionStorage.clickcount) &#123;</span><br><span class="line">    sessionStorage.clickcount = <span class="built_in">Number</span>(sessionStorage.clickcount) + <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    sessionStorage.clickcount = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"result"</span>).innerHTML = <span class="string">"在本 session 中，您已经点击这个按钮 "</span> +</span><br><span class="line">sessionStorage.clickcount + <span class="string">" 次。"</span>;</span><br></pre></td></tr></table></figure><h1 id="HTML5-应用程序缓存"><a href="#HTML5-应用程序缓存" class="headerlink" title="HTML5 应用程序缓存"></a>HTML5 应用程序缓存</h1><pre><code>使用应用程序缓存，通过创建 cache manifest 文件，可轻松创建 web 应用的离线版本。</code></pre><h2 id="什么是应用程序缓存？"><a href="#什么是应用程序缓存？" class="headerlink" title="什么是应用程序缓存？"></a>什么是应用程序缓存？</h2><pre><code>HTML5 引入了应用程序缓存（Application Cache），这意味着可对 web 应用进行缓存，并可在没有因特网连接时进行访问。</code></pre><p>应用程序缓存为应用带来三个优势：</p><ul><li>离线浏览 - 用户可在应用离线时使用它们</li><li>速度 - 已缓存资源加载得更快</li><li>减少服务器负载 - 浏览器将只从服务器下载更新过或更改过的资源</li></ul><h2 id="HTML-Cache-Manifest-实例"><a href="#HTML-Cache-Manifest-实例" class="headerlink" title="HTML Cache Manifest 实例"></a>HTML Cache Manifest 实例</h2><p>下例展示了带有 cache manifest 的 HTML 文档（供离线浏览）：</p><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html manifest=<span class="string">"demo.appcache"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">文档内容 ......</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><h2 id="Cache-Manifest-基础"><a href="#Cache-Manifest-基础" class="headerlink" title="Cache Manifest 基础"></a>Cache Manifest 基础</h2><p>如需启用应用程序缓存，请在文档的 <html> 标签中包含 manifest 属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html manifest=<span class="string">"demo.appcache"</span>&gt;</span><br><span class="line">...</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><pre><code>每个指定了 manifest 的页面在用户对其访问时都会被缓存。如果未指定 manifest 属性，则页面不会被缓存（除非在 manifest 文件中直接指定了该页面）。manifest 文件的建议文件扩展名是：&quot;.appcache&quot;。</code></pre><p>注意：manifest 文件需要设置正确的 MIME-type，即 "text/cache-manifest"。必须在 web 服务器上进行配置。</p><h1 id="Manifest-文件"><a href="#Manifest-文件" class="headerlink" title="Manifest 文件"></a>Manifest 文件</h1><pre><code>manifest 文件是简单的文本文件，它告知浏览器被缓存的内容（以及不缓存的内容）。</code></pre><h2 id="manifest-文件有三个部分："><a href="#manifest-文件有三个部分：" class="headerlink" title="manifest 文件有三个部分："></a>manifest 文件有三个部分：</h2><ul><li>CACHE MANIFEST - 在此标题下列出的文件将在首次下载后进行缓存</li><li>NETWORK - 在此标题下列出的文件需要与服务器的连接，且不会被缓存</li><li>FALLBACK - 在此标题下列出的文件规定当页面无法访问时的回退页面（比如 404 页面）</li></ul><h3 id="CACHE-MANIFEST"><a href="#CACHE-MANIFEST" class="headerlink" title="CACHE MANIFEST"></a>CACHE MANIFEST</h3><p>第一行，CACHE MANIFEST，是必需的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CACHE MANIFEST</span><br><span class="line">/theme.css</span><br><span class="line">/logo.gif</span><br><span class="line">/main.js</span><br></pre></td></tr></table></figure><p>上面的 manifest 文件列出了三个资源：</p><pre><code>一个 CSS 文件，一个 GIF 图像，以及一个 JavaScript 文件。当 manifest 文件被加载后，浏览器会从网站的根目录下载这三个文件。然后，无论用户何时与因特网断开连接，这些资源依然可用。</code></pre><h3 id="NETWORK"><a href="#NETWORK" class="headerlink" title="NETWORK"></a>NETWORK</h3><pre><code>下面的 NETWORK 部分规定文件 &quot;login.php&quot; 永远不会被缓存，且离线时是不可用的：</code></pre><h3 id="NETWORK-1"><a href="#NETWORK-1" class="headerlink" title="NETWORK:"></a>NETWORK:</h3><p>login.asp<br>可以使用星号来指示所有其他其他资源/文件都需要因特网连接：</p><h3 id="NETWORK-2"><a href="#NETWORK-2" class="headerlink" title="NETWORK:"></a>NETWORK:</h3><p>FALLBACK<br>下面的 FALLBACK 部分规定如果无法建立因特网连接，则用 "offline.html" 替代 /html/ 目录中的所有文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FALLBACK:</span><br><span class="line">/html/ <span class="regexp">/offline.html</span></span><br></pre></td></tr></table></figure><p>注释：第一个 URI 是资源，第二个是替补。</p><h2 id="更新缓存"><a href="#更新缓存" class="headerlink" title="更新缓存"></a>更新缓存</h2><p>   一旦应用被缓存，它就会保持缓存直到发生下列情况：</p><ul><li>用户清空浏览器缓存</li><li>manifest 文件被修改（参阅下面的提示）</li><li>由程序来更新应用缓存<br>实例 - 完整的 Cache Manifest 文件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CACHE MANIFEST</span><br><span class="line"></span><br><span class="line">/theme.css</span><br><span class="line">/logo.gif</span><br><span class="line">/main.js</span><br><span class="line"></span><br><span class="line">NETWORK:</span><br><span class="line">login.asp</span><br><span class="line"></span><br><span class="line">FALLBACK:</span><br><span class="line">/html/ <span class="regexp">/offline.html</span></span><br></pre></td></tr></table></figure><p>提示：以 "#" 开头的是注释行，但也可满足其他用途。应用的缓存只会在其 manifest 文件改变时被更新。如果您编辑了一幅图像，或者修改了一个 JavaScript 函数，这些改变都不会被重新缓存。更新注释行中的日期和版本号是一种使浏览器重新缓存文件的办法。</p><pre><code>关于应用程序缓存的注意事项请留心缓存的内容。一旦文件被缓存，则浏览器会继续展示已缓存的版本，即使您修改了服务器上的文件。为了确保浏览器更新缓存，您需要更新 manifest 文件。</code></pre><p>注释：浏览器对缓存数据的容量限制可能不太一样（某些浏览器的限制是每个站点 5MB）。</p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML基础_12</title>
      <link href="/2020/05/28/HTML%E5%9F%BA%E7%A1%80_12/"/>
      <url>/2020/05/28/HTML%E5%9F%BA%E7%A1%80_12/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200528000223912.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="HTML基础_12"></p><h1 id="HTML-多媒体"><a href="#HTML-多媒体" class="headerlink" title="HTML 多媒体"></a>HTML 多媒体</h1><pre><code>Web 上的多媒体指的是音效、音乐、视频和动画。现代网络浏览器已支持很多多媒体格式</code></pre><a id="more"></a><h2 id="什么是多媒体？"><a href="#什么是多媒体？" class="headerlink" title="什么是多媒体？"></a>什么是多媒体？</h2><pre><code>多媒体来自多种不同的格式。它可以是您听到或看到的任何内容，          文字、图片、音乐、音效、录音、电影、动画等等。</code></pre><p>在因特网上，您会经常发现嵌入网页中的多媒体元素，现代浏览器已支持多种多媒体格式。<br>在本篇文章中，您将了解到不同的多媒体格式，以及如何在您的网页中使用它们。</p><h2 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h2><pre><code>第一款因特网浏览器只支持文本，而且即使是对文本的支持也仅限于单一字体和单一颜色。随后诞生了支持颜色、字体和文本样式的浏览器，图片支持也被加入。不同的浏览器以不同的方式处理对音效、动画和视频的支持。某些元素能够以内联的方式处理，而某些则需要额外的插件。</code></pre><h2 id="多媒体格式"><a href="#多媒体格式" class="headerlink" title="多媒体格式"></a>多媒体格式</h2><pre><code>多媒体元素（比如视频和音频）存储于媒体文件中。确定媒体类型的最常用的方法是查看文件扩展名。当浏览器得到文件扩展名 .htm 或 .html 时，它会假定该文件是 HTML 页面。.xml 扩展名指示 XML 文件，而 .css 扩展名指示样式表。图片格式则通过 .gif 或 .jpg 来识别。多媒体元素元素也拥有带有不同扩展名的文件格式，比如 .swf、.wmv、.mp3 以及 .mp4。</code></pre><h2 id="视频格式"><a href="#视频格式" class="headerlink" title="视频格式"></a>视频格式</h2><pre><code>MP4 格式是一种新的即将普及的因特网视频格式。HTML5 、Flash 播放器以及优酷等视频网站均支持它。</code></pre><table><thead><tr><th>格式</th><th>文件</th><th>描述</th></tr></thead><tbody><tr><td>AVI</td><td>.avi</td><td>AVI (Audio Video Interleave) 格式是由微软开发的。所有运行 Windows 的计算机都支持 AVI 格式。它是因特网上很常见的格式，但非 Windows 计算机并不总是能够播放。</td></tr><tr><td>WMV</td><td>.wmv</td><td>Windows Media 格式是由微软开发的。Windows Media 在因特网上很常见，但是如果未安装额外的（免费）组件，就无法播放 Windows Media 电影。一些后期的 Windows Media 电影在所有非 Windows 计算机上都无法播放，因为没有合适的播放器。</td></tr><tr><td>MPEG</td><td>.mpg .mpeg</td><td>MPEG (Moving Pictures Expert Group) 格式是因特网上最流行的格式。它是跨平台的，得到了所有最流行的浏览器的支持。</td></tr><tr><td>QuickTime</td><td>.mov</td><td>QuickTime 格式是由苹果公司开发的。QuickTime 是因特网上常见的格式，但是 QuickTime 电影不能在没有安装额外的（免费）组件的 Windows 计算机上播放。</td></tr><tr><td>RealVideo</td><td>.rm .ram</td><td>RealVideo 格式是由 Real Media 针对因特网开发的。该格式允许低带宽条件下（在线视频、网络电视）的视频流。由于是低带宽优先的，质量常会降低。</td></tr><tr><td>Flash</td><td>.swf  .flv</td><td>Flash (Shockwave) 格式是由 Macromedia 开发的。Shockwave 格式需要额外的组件来播放。但是该组件会预装到 Firefox 或 IE 之类的浏览器上。</td></tr><tr><td>Mpeg-4</td><td>.mp4</td><td>Mpeg-4 (with H.264 video compression) 是一种针对因特网的新格式。事实上，YouTube 推荐使用 MP4。YouTube 接收多种格式，然后全部转换为 .flv 或 .mp4 以供分发。越来越多的视频发布者转到 MP4，将其作为 Flash 播放器和 HTML5 的因特网共享格式。</td></tr></tbody></table><h2 id="声音格式"><a href="#声音格式" class="headerlink" title="声音格式"></a>声音格式</h2><table><thead><tr><th>格式</th><th>文件</th><th>描述</th></tr></thead><tbody><tr><td>MIDI</td><td>.mid  .midi</td><td>MIDI (Musical Instrument Digital Interface) 是一种针对电子音乐设备（比如合成器和声卡）的格式。MIDI 文件不含有声音，但包含可被电子产品（比如声卡）播放的数字音乐指令。</td></tr><tr><td></td><td></td><td></td></tr><tr><td>RealAudio</td><td>.rm .ram</td><td>RealAudio 格式是由 Real Media 针对因特网开发的。该格式也支持视频。该格式允许低带宽条件下的音频流（在线音乐、网络音乐）。由于是低带宽优先的，质量常会降低。</td></tr><tr><td>Wave</td><td>.wav</td><td>Wave (waveform) 格式是由 IBM 和微软开发的。所有运行 Windows 的计算机和所有网络浏览器（除了 Google Chrome）都支持它。</td></tr><tr><td>WMA</td><td>.wma</td><td>WMA 格式 (Windows Media Audio)，质量优于 MP3，兼容大多数播放器，除了 iPod。WMA 文件可作为连续的数据流来传输，这使它对于网络电台或在线音乐很实用。</td></tr><tr><td>MP3</td><td>.mp3 .mpga</td><td>MP3 文件实际上是 MPEG 文件的声音部分。MPEG 格式最初是由运动图像专家组开发的。MP3 是其中最受欢迎的针对音乐的声音格式。期待未来的软件系统都支持它。</td></tr></tbody></table><h2 id="使用哪种格式？"><a href="#使用哪种格式？" class="headerlink" title="使用哪种格式？"></a>使用哪种格式？</h2><ol><li>WAVE 是因特网上最受欢迎的无压缩声音格式，所有流行的浏览器都支持它。如果您需要未经压缩的声音（音乐或演讲），那么您应该使用 WAVE 格式。</li></ol><ol start="2"><li>MP3 是最新的压缩录制音乐格式。MP3 这个术语已经成为数字音乐的代名词。如果您的网址从事录制音乐，那么 MP3 是一个选项。</li></ol><h1 id="HTML-Object-元素"><a href="#HTML-Object-元素" class="headerlink" title="HTML Object 元素"></a>HTML Object 元素</h1><pre><code>&lt;object&gt; 的作用是支持 HTML 助手（插件）。</code></pre><h2 id="HTML-助手（插件）"><a href="#HTML-助手（插件）" class="headerlink" title="HTML 助手（插件）"></a>HTML 助手（插件）</h2><ol><li>辅助应用程序（helper application）是可由浏览器启动的程序。</li><li>辅助应用程序也称为插件。</li><li>辅助程序可用于播放音频和视频（以及其他）。</li><li>辅助程序是使用 <object> 标签来加载的。</li></ol><p>使用辅助程序播放视频和音频的一个优势是，<br>您能够允许用户来控制部分或全部播放设置。<br>大多数辅助应用程序允许对音量设置和播放功能（比如后退、暂停、停止和播放）的手工（或程序的）控制。</p><h2 id="HTML-音频"><a href="#HTML-音频" class="headerlink" title="HTML 音频"></a>HTML 音频</h2><p> 在 HTML 中播放声音的方法有很多种。</p><pre><code>问题，问题，以及解决方法在 HTML 中播放音频并不容易！您需要谙熟大量技巧，以确保您的音频文件在所有浏览器中（Internet Explorer, Chrome, Firefox, Safari, Opera）和所有硬件上（PC, Mac , iPad, iPhone）都能够播放。</code></pre><h2 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h2><pre><code>浏览器插件是一种扩展浏览器标准功能的小型计算机程序。插件有很多用途：播放音乐、显示地图、验证银行账号，控制输入等等。可使用 &lt;object&gt; 或 &lt;embed&gt; 标签来将插件添加到 HTML 页面。</code></pre><p>这些标签定义资源（通常非 HTML 资源）的容器，根据类型，它们即会由浏览器显示，也会由外部插件显示。</p><h2 id="使用-60-embed-gt-元素"><a href="#使用-60-embed-gt-元素" class="headerlink" title="使用 &#60;embed&gt; 元素"></a>使用 &#60;embed&gt; 元素</h2><pre><code>&lt;embed&gt; 标签定义外部（非 HTML）内容的容器。（这是一个 HTML5 标签，在 HTML4 中是非法的，但是所有浏览器中都有效）。</code></pre><p>下面的代码片段能够显示嵌入网页中的 MP3 文件：<br>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;embed height=<span class="string">"100"</span> width=<span class="string">"100"</span> src=<span class="string">"song.mp3"</span> /&gt;</span><br></pre></td></tr></table></figure><p>问题：</p><pre><code>&lt;embed&gt; 标签在 HTML 4 中是无效的。页面无法通过 HTML 4 验证。不同的浏览器对音频格式的支持也不同。如果浏览器不支持该文件格式，没有插件的话就无法播放该音频。如果用户的计算机未安装插件，无法播放音频。如果把该文件转换为其他格式，仍然无法在所有浏览器中播放。</code></pre><p>注释：使用 &#60;!DOCTYPE html&gt; (HTML5) 解决验证问题。</p><h2 id="使用-60-object-gt-元素"><a href="#使用-60-object-gt-元素" class="headerlink" title="使用 &#60;object&gt; 元素"></a>使用 &#60;object&gt; 元素</h2><pre><code>&lt;object tag&gt; 标签也可以定义外部（非 HTML）内容的容器。</code></pre><p>   下面的代码片段能够显示嵌入网页中的 MP3 文件：<br>    实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;object height=<span class="string">"100"</span> width=<span class="string">"100"</span> data=<span class="string">"song.mp3"</span>&gt;&lt;<span class="regexp">/object&gt;</span></span><br></pre></td></tr></table></figure><p>问题：</p><pre><code>不同的浏览器对音频格式的支持也不同。如果浏览器不支持该文件格式，没有插件的话就无法播放该音频。如果用户的计算机未安装插件，无法播放音频。如果把该文件转换为其他格式，仍然无法在所有浏览器中播放。</code></pre><h2 id="使用-HTML5-元素"><a href="#使用-HTML5-元素" class="headerlink" title="使用 HTML5  元素"></a>使用 HTML5 <audio> 元素</h2><pre><code>&lt;audio&gt; 元素是一个 HTML5 元素，在 HTML 4 中是非法的，但在所有浏览器中都有效。</code></pre><p> 实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;audio controls=<span class="string">"controls"</span>&gt;</span><br><span class="line">     &lt;source src=<span class="string">"song.mp3"</span> type=<span class="string">"audio/mp3"</span> /&gt;</span><br><span class="line">     &lt;source src=<span class="string">"song.ogg"</span> type=<span class="string">"audio/ogg"</span> /&gt;</span><br><span class="line">   Your browser does not support <span class="keyword">this</span> audio format.</span><br><span class="line">   &lt;<span class="regexp">/audio&gt;</span></span><br></pre></td></tr></table></figure><p>   问题：</p><pre><code> &lt;audio&gt; 标签在 HTML 4 中是无效的。您的页面无法通过 HTML 4 验证。您必须把音频文件转换为不同的格式。 &lt;audio&gt; 元素在老式浏览器中不起作用。</code></pre><p>   注释：使用 <!DOCTYPE html> (HTML5) 解决验证问题。</p><h2 id="向网站添加音频的最简单方法"><a href="#向网站添加音频的最简单方法" class="headerlink" title="向网站添加音频的最简单方法"></a>向网站添加音频的最简单方法</h2><p><strong>向网页添加音频的最简单的方法是什么？</strong></p><pre><code>雅虎的媒体播放器绝对算其中之一。</code></pre><p> 使用雅虎媒体播放器是一个不同的途径。您只需简单地让雅虎来完成歌曲播放的工作就好了。</p><p>它能播放 mp3 以及一系列其他格式。通过一行简单的代码，您就可以把它添加到网页中，轻松地将 HTML 页面转变为专业的播放列表。</p><p><strong>雅虎媒体播放器</strong><br>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">"song.mp3"</span>&gt;Play Sound&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">" src="</span>http:<span class="comment">//mediaplayer.yahoo.com/js"&gt;</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>使用雅虎播放器是免费的。如需使用它，您需要把这段 JavaScript 插入网页底部：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"http://mediaplayer.yahoo.com/js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>然后只需简单地把 MP3 文件链接到您的 HTML 中，JavaScript 会自动地为每首歌创建播放按钮：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">"song1.mp3"</span>&gt;Play Song <span class="number">1</span>&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">&lt;a href="song2.mp3"&gt;Play Song 2&lt;/</span>a&gt;</span><br></pre></td></tr></table></figure><p>雅虎媒体播放器为您的用户提供的是一个小型的播放按钮，而不是完整的播放器。不过，当您点击该按钮，会弹出完整的播放器。<br>请注意，这个播放器始终停靠在窗框底部。只需点击它，就可将其滑出。</p><h2 id="使用超链接"><a href="#使用超链接" class="headerlink" title="使用超链接"></a>使用超链接</h2><pre><code>如果网页包含指向媒体文件的超链接，大多数浏览器会使用“辅助应用程序”来播放文件。</code></pre><p>以下代码片段显示指向 mp3 文件的链接。如果用户点击该链接，浏览器会启动“辅助应用程序”来播放该文件：</p><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">"song.mp3"</span>&gt;Play the sound&lt;<span class="regexp">/a&gt;</span></span><br></pre></td></tr></table></figure><h2 id="内联的声音"><a href="#内联的声音" class="headerlink" title="内联的声音"></a>内联的声音</h2><p>当您在网页中包含声音，或者作为网页的组成部分时，它被称为内联声音。</p><pre><code>如果您打算在 web 应用程序中使用内联声音，您需要意识到很多人都觉得内联声音令人恼火。同时请注意，用户可能已经关闭了浏览器中的内联声音选项。我们最好的建议是只在用户希望听到内联声音的地方包含它们。一个正面的例子是，在用户需要听到录音并点击某个链接时，会打开页面然后播放录音。</code></pre><h2 id="HTML-4-01-多媒体标签"><a href="#HTML-4-01-多媒体标签" class="headerlink" title="HTML 4.01 多媒体标签"></a>HTML 4.01 多媒体标签</h2><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td>&#60;applet&gt;</td><td>不赞成。定义内嵌 applet。</td></tr><tr><td>&#60;embed&gt;</td><td>HTML4 中不赞成，HTML5 中允许。定义内嵌对象。</td></tr><tr><td>&#60;object&gt;</td><td>定义内嵌对象。</td></tr><tr><td>&#60;param&gt;</td><td>定义对象的参数。</td></tr></tbody></table><h2 id="HTML-5-多媒体标签"><a href="#HTML-5-多媒体标签" class="headerlink" title="HTML 5 多媒体标签"></a>HTML 5 多媒体标签</h2><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td>&#60;audio&gt;</td><td>标签定义声音，比如音乐或其他音频流。</td></tr><tr><td>&#60;embed&gt;</td><td>标签定义嵌入的内容，比如插件。</td></tr></tbody></table><h1 id="HTML-视频"><a href="#HTML-视频" class="headerlink" title="HTML 视频"></a>HTML 视频</h1><pre><code>在 HTML 中播放视频的方法有很多种。</code></pre><h2 id="使用-60-embed-gt-标签"><a href="#使用-60-embed-gt-标签" class="headerlink" title="使用 &#60;embed&gt; 标签"></a>使用 &#60;embed&gt; 标签</h2><pre><code>&lt;embed&gt; 标签的作用是在 HTML 页面中嵌入多媒体元素。下面的 HTML 代码显示嵌入网页的 Flash 视频：</code></pre><p>   实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;embed src=<span class="string">"movie.swf"</span> height=<span class="string">"200"</span> width=<span class="string">"200"</span>/&gt;</span><br></pre></td></tr></table></figure><p>问题</p><pre><code>HTML4 无法识别 &lt;embed&gt; 标签。您的页面无法通过验证。如果浏览器不支持 Flash，那么视频将无法播放iPad 和 iPhone 不能显示 Flash 视频。如果您将视频转换为其他格式，那么它仍然不能在所有浏览器中播放。</code></pre><h2 id="使用-60-video-gt-标签"><a href="#使用-60-video-gt-标签" class="headerlink" title="使用 &#60;video&gt; 标签"></a>使用 &#60;video&gt; 标签</h2><pre><code>&lt;video&gt; 是 HTML 5 中的新标签。</code></pre><p>   &#60;video&gt; 标签的作用是在 HTML 页面中嵌入视频元素。<br>    以下 HTML 片段会显示一段嵌入网页的 ogg、mp4 或 webm 格式的视频：</p><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;video width=<span class="string">"320"</span> height=<span class="string">"240"</span> controls=<span class="string">"controls"</span>&gt;</span><br><span class="line">  &lt;source src=<span class="string">"movie.mp4"</span> type=<span class="string">"video/mp4"</span> /&gt;</span><br><span class="line">  &lt;source src=<span class="string">"movie.ogg"</span> type=<span class="string">"video/ogg"</span> /&gt;</span><br><span class="line">  &lt;source src=<span class="string">"movie.webm"</span> type=<span class="string">"video/webm"</span> /&gt;</span><br><span class="line">Your browser does not support the video tag.</span><br><span class="line">&lt;<span class="regexp">/video&gt;</span></span><br></pre></td></tr></table></figure><p>   您必须把视频转换为很多不同的格式。</p><pre><code>&lt;video&gt; 元素在老式浏览器中无效。&lt;video&gt; 元素无法通过 HTML 4 和 XHTML 验证</code></pre><h1 id="最好的-HTML-解决方法"><a href="#最好的-HTML-解决方法" class="headerlink" title="最好的 HTML 解决方法"></a>最好的 HTML 解决方法</h1><pre><code>HTML 5 + &lt;object&gt; + &lt;embed&gt;</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;video width=<span class="string">"320"</span> height=<span class="string">"240"</span> controls=<span class="string">"controls"</span>&gt;</span><br><span class="line">     &lt;source src=<span class="string">"movie.mp4"</span> type=<span class="string">"video/mp4"</span> /&gt;</span><br><span class="line">     &lt;source src=<span class="string">"movie.ogg"</span> type=<span class="string">"video/ogg"</span> /&gt;</span><br><span class="line">     &lt;source src=<span class="string">"movie.webm"</span> type=<span class="string">"video/webm"</span> /&gt;</span><br><span class="line">     &lt;object data=<span class="string">"movie.mp4"</span> width=<span class="string">"320"</span> height=<span class="string">"240"</span>&gt;</span><br><span class="line">       &lt;embed src=<span class="string">"movie.swf"</span> width=<span class="string">"320"</span> height=<span class="string">"240"</span> /&gt;</span><br><span class="line">     &lt;<span class="regexp">/object&gt;</span></span><br><span class="line"><span class="regexp">   &lt;/</span>video&gt;</span><br></pre></td></tr></table></figure><pre><code>上例中使用了 4 中不同的视频格式。HTML 5 &lt;video&gt; 元素会尝试播放以 mp4、ogg 或 webm 格式中的一种来播放视频。如果均失败，则回退到 &lt;embed&gt; 元素。</code></pre><p>问题:</p><pre><code>您必须把视频转换为很多不同的格式&lt;video&gt; 元素无法通过 HTML 4 和 XHTML 验证。&lt;embed&gt; 元素无法通过 HTML 4 和 XHTML 验证。</code></pre><p>注释：使用 &#60;!DOCTYPE html&gt; (HTML5) 解决验证问题。</p><h2 id="优酷解决方案"><a href="#优酷解决方案" class="headerlink" title="优酷解决方案"></a>优酷解决方案</h2><pre><code>在 HTML 中显示视频的最简单的方法是使用优酷等视频网站。</code></pre><p> 如果您希望在网页中播放视频，那么您可以把视频上传到优酷等视频网站，然后在您的网页中插入 HTML 代码即可播放视频：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;embed src=<span class="string">"http://player.youku.com/player.php/sid/XMzI2NTc4NTMy/v.swf"</span> </span><br><span class="line">  width=<span class="string">"480"</span> height=<span class="string">"400"</span> </span><br><span class="line">  type=<span class="string">"application/x-shockwave-flash"</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/embed&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用超链接-1"><a href="#使用超链接-1" class="headerlink" title="使用超链接"></a>使用超链接</h2><pre><code>如果网页包含指向媒体文件的超链接，大多数浏览器会使用“辅助应用程序”来播放文件。以下代码片段显示指向 AVI 文件的链接。如果用户点击该链接，浏览器会启动“辅助应用程序”，比如 Windows Media Player 来播放这个 AVI 文件：</code></pre><p>   实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">"movie.swf"</span>&gt;Play a video file&lt;<span class="regexp">/a&gt;</span></span><br></pre></td></tr></table></figure><h2 id="关于内联视频的一段注释"><a href="#关于内联视频的一段注释" class="headerlink" title="关于内联视频的一段注释"></a>关于内联视频的一段注释</h2><pre><code>当视频被包含在网页中时，它被称为内联视频。 如果您打算在 web 应用程序中使用内联视频， 您需要意识到很多人都觉得内联视频令人恼火。</code></pre><p>   同时请注意，用户可能已经关闭了浏览器中的内联视频选项。<br>    我们最好的建议是只在用户希望看到内联视频的地方包含它们。<br>    一个正面的例子是，在用户需要看到视频并点击某个链接时，<br>    会打开页面然后播放视频。</p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML基础_11</title>
      <link href="/2020/05/27/HTML%E5%9F%BA%E7%A1%80_11/"/>
      <url>/2020/05/27/HTML%E5%9F%BA%E7%A1%80_11/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200527232415485.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="HTML基础_11"></p><h1 id="HTML5-Canvas"><a href="#HTML5-Canvas" class="headerlink" title="HTML5 Canvas"></a>HTML5 Canvas</h1><pre><code>canvas 元素用于在网页上绘制图形。</code></pre><h2 id="什么是-Canvas？"><a href="#什么是-Canvas？" class="headerlink" title="什么是 Canvas？"></a>什么是 Canvas？</h2><pre><code>HTML5 的 canvas 元素使用 JavaScript 在网页上绘制图像。画布是一个矩形区域，您可以控制其每一像素。canvas 拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。</code></pre><a id="more"></a><h2 id="创建-Canvas-元素"><a href="#创建-Canvas-元素" class="headerlink" title="创建 Canvas 元素"></a>创建 Canvas 元素</h2><pre><code>向 HTML5 页面添加 canvas 元素。规定元素的 id、宽度和高度：</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;canvas id=<span class="string">"myCanvas"</span> width=<span class="string">"200"</span> height=<span class="string">"100"</span>&gt;&lt;<span class="regexp">/canvas&gt;</span></span><br></pre></td></tr></table></figure><h2 id="通过-JavaScript-来绘制"><a href="#通过-JavaScript-来绘制" class="headerlink" title="通过 JavaScript 来绘制"></a>通过 JavaScript 来绘制</h2><pre><code>canvas 元素本身是没有绘图能力的。所有的绘制工作必须在 JavaScript 内部完成：</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">var</span> c=<span class="built_in">document</span>.getElementById(<span class="string">"myCanvas"</span>);</span><br><span class="line"><span class="keyword">var</span> cxt=c.getContext(<span class="string">"2d"</span>);</span><br><span class="line">cxt.fillStyle=<span class="string">"#FF0000"</span>;</span><br><span class="line">cxt.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">150</span>,<span class="number">75</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JavaScript-使用-id-来寻找-canvas-元素："><a href="#JavaScript-使用-id-来寻找-canvas-元素：" class="headerlink" title="JavaScript 使用 id 来寻找 canvas 元素："></a>JavaScript 使用 id 来寻找 canvas 元素：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c=<span class="built_in">document</span>.getElementById(<span class="string">"myCanvas"</span>);</span><br></pre></td></tr></table></figure><p>然后，创建 context 对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cxt=c.getContext(<span class="string">"2d"</span>);</span><br></pre></td></tr></table></figure><pre><code>getContext(&quot;2d&quot;) 对象是内建的 HTML5 对象，拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。</code></pre><p>下面的两行代码绘制一个红色的矩形：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cxt.fillStyle=<span class="string">"#FF0000"</span>;</span><br><span class="line">cxt.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">150</span>,<span class="number">75</span>);</span><br></pre></td></tr></table></figure><p>   fillStyle 方法将其染成红色，fillRect 方法规定了形状、位置和尺寸。</p><h1 id="HTML5-内联-SVG"><a href="#HTML5-内联-SVG" class="headerlink" title="HTML5 内联 SVG"></a>HTML5 内联 SVG</h1><h2 id="什么是SVG？"><a href="#什么是SVG？" class="headerlink" title="什么是SVG？"></a>什么是SVG？</h2><pre><code>SVG 指可伸缩矢量图形 (Scalable Vector Graphics)SVG 用于定义用于网络的基于矢量的图形SVG 使用 XML 格式定义图形SVG 图像在放大或改变尺寸的情况下其图形质量不会有损失SVG 是万维网联盟的标准</code></pre><h2 id="SVG-的优势"><a href="#SVG-的优势" class="headerlink" title="SVG 的优势"></a>SVG 的优势</h2><p>与其他图像格式相比（比如 JPEG 和 GIF），使用 SVG 的优势在于：</p><pre><code>SVG 图像可通过文本编辑器来创建和修改SVG 图像可被搜索、索引、脚本化或压缩SVG 是可伸缩的SVG 图像可在任何的分辨率下被高质量地打印SVG 可在图像质量不下降的情况下被放大</code></pre><h2 id="把-SVG-直接嵌入-HTML-页面"><a href="#把-SVG-直接嵌入-HTML-页面" class="headerlink" title="把 SVG 直接嵌入 HTML 页面"></a>把 SVG 直接嵌入 HTML 页面</h2><p>在 HTML5 中，您能够将 SVG 元素直接嵌入 HTML 页面中：</p><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;svg xmlns=<span class="string">"http://XXXXXXX"</span> version=<span class="string">"1.1"</span> height=<span class="string">"190"</span>&gt;</span><br><span class="line">  &lt;polygon points=<span class="string">"100,10 40,180 190,60 10,60 160,180"</span></span><br><span class="line">  style=<span class="string">"fill:lime;stroke:purple;stroke-width:5;fill-rule:evenodd;"</span> /&gt;</span><br><span class="line">&lt;<span class="regexp">/svg&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><h1 id="HTML-5-Canvas-vs-SVG"><a href="#HTML-5-Canvas-vs-SVG" class="headerlink" title="HTML 5 Canvas vs SVG"></a>HTML 5 Canvas vs SVG</h1><p>Canvas 和 SVG 都允许您在浏览器中创建图形，但是它们在根本上是不同的。</p><h2 id="SVG"><a href="#SVG" class="headerlink" title="SVG"></a>SVG</h2><pre><code>SVG 是一种使用 XML 描述 2D 图形的语言。SVG 基于 XML，这意味着 SVG DOM 中的每个元素都是可用的。您可以为某个元素附加 JavaScript 事件处理器。在 SVG 中，每个被绘制的图形均被视为对象。如果 SVG 对象的属性发生变化，那么浏览器能够自动重现图形。</code></pre><h2 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h2><pre><code>Canvas 通过 JavaScript 来绘制 2D 图形。Canvas 是逐像素进行渲染的。</code></pre><p>在 canvas 中，一旦图形被绘制完成，它就不会继续得到浏览器的关注。如果其位置发生变化，那么整个场景也需要重新绘制，包括任何或许已被图形覆盖的对象。</p><h2 id="Canvas-与-SVG-的比较"><a href="#Canvas-与-SVG-的比较" class="headerlink" title="Canvas 与 SVG 的比较"></a>Canvas 与 SVG 的比较</h2><p>下表列出了 canvas 与 SVG 之间的一些不同之处。</p><pre><code>Canvas:依赖分辨率不支持事件处理器弱的文本渲染能力能够以 .png 或 .jpg 格式保存结果图像最适合图像密集型的游戏，其中的许多对象会被频繁重绘SVG不依赖分辨率支持事件处理器最适合带有大型渲染区域的应用程序（比如谷歌地图）复杂度高会减慢渲染速度（任何过度使用 DOM 的应用都不快）不适合游戏应用</code></pre>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML基础_10</title>
      <link href="/2020/05/27/HTML%E5%9F%BA%E7%A1%80_10/"/>
      <url>/2020/05/27/HTML%E5%9F%BA%E7%A1%80_10/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200527000221860.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="HTML基础_10"><br>本篇文章主要介绍了HTML书写规范及其小部分标签。</p><h1 id="HTML5-语义元素"><a href="#HTML5-语义元素" class="headerlink" title="HTML5 语义元素"></a>HTML5 语义元素</h1><h2 id="什么是语义元素？"><a href="#什么是语义元素？" class="headerlink" title="什么是语义元素？"></a>什么是语义元素？</h2><pre><code>语义元素清楚地向浏览器和开发者描述其意义。非语义元素的例子：&lt;div&gt; 和 &lt;span&gt; - 无法提供关于其内容的信息。语义元素的例子：&lt;form&gt;、&lt;table&gt; 以及 &lt;img&gt; - 清晰地定义其内容</code></pre><p>所有现代浏览器均支持 HTML5 语义元素。<br>此外，您可以“帮助”老式浏览器处理“未知元素”。</p><a id="more"></a><h2 id="HTML5-中新的语义元素"><a href="#HTML5-中新的语义元素" class="headerlink" title="HTML5 中新的语义元素"></a>HTML5 中新的语义元素</h2><pre><code>许多网站包含了指示导航、页眉以及页脚的 HTML 代码，例如这些：&lt;div id=&quot;nav&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;div id=&quot;footer&quot;&gt;。</code></pre><p>HTML5 提供了定义页面不同部分的新语义元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;article&gt;</span><br><span class="line">&lt;aside&gt;</span><br><span class="line">&lt;details&gt;</span><br><span class="line">&lt;figcaption&gt;</span><br><span class="line">&lt;figure&gt;</span><br><span class="line">&lt;footer&gt;</span><br><span class="line">&lt;header&gt;</span><br><span class="line">&lt;main&gt;</span><br><span class="line">&lt;mark&gt;</span><br><span class="line">&lt;nav&gt;</span><br><span class="line">&lt;section&gt;</span><br><span class="line">&lt;summary&gt;</span><br><span class="line">&lt;time&gt;</span><br></pre></td></tr></table></figure><h1 id="HTML5-语义元素-1"><a href="#HTML5-语义元素-1" class="headerlink" title="HTML5 语义元素"></a>HTML5 语义元素</h1><h2 id="HTML5-60-section-gt-元素"><a href="#HTML5-60-section-gt-元素" class="headerlink" title="HTML5 &#60;section&gt; 元素"></a>HTML5 &#60;section&gt; 元素</h2><pre><code>&lt;section&gt; 元素定义文档中的节。可以将网站首页划分为简介、内容、联系信息等节。</code></pre><h2 id="HTML5-60-article-gt-元素"><a href="#HTML5-60-article-gt-元素" class="headerlink" title="HTML5 &#60;article&gt; 元素"></a>HTML5 &#60;article&gt; 元素</h2><pre><code>&lt;article&gt; 元素规定独立的自包含内容。文档有其自身的意义，并且可以独立于网站其他内容进行阅读。&lt;article&gt; 元素的应用场景：1.论坛2.博客3.新闻</code></pre><h2 id="嵌套语义元素"><a href="#嵌套语义元素" class="headerlink" title="嵌套语义元素"></a>嵌套语义元素</h2><pre><code>在 HTML5 标准中，&lt;article&gt; 元素定义完整的相关元素自包含块。&lt;section&gt; 元素被定义为相关元素块。     我们能够使用该定义来决定如何嵌套元素吗？不，我们不能！ 在因特网上，您会发现 &lt;section&gt; 元素包含 &lt;article&gt; 元素的 HTML 页面，还有 &lt;article&gt; 元素包含 &lt;sections&gt; 元素的页面。您还会发现 &lt;section&gt; 元素包含 &lt;section&gt; 元素，同时 &lt;article&gt; 元素包含 &lt;article&gt; 元素</code></pre><h1 id="HTML5-60-footer-gt-元素"><a href="#HTML5-60-footer-gt-元素" class="headerlink" title="HTML5 &#60;footer&gt; 元素"></a>HTML5 &#60;footer&gt; 元素</h1><pre><code>&lt;footer&gt; 元素为文档或节规定页脚。&lt;footer&gt; 元素应该提供有关其包含元素的信息。页脚通常包含文档的作者、版权信息、使用条款链接、联系信息等等。您可以在一个文档中使用多个 &lt;footer&gt; 元素。</code></pre><h1 id="HTML5-60-nav-gt-元素"><a href="#HTML5-60-nav-gt-元素" class="headerlink" title="HTML5&#60;nav&gt; 元素"></a>HTML5&#60;nav&gt; 元素</h1><pre><code>&lt;nav&gt; 元素定义导航链接集合。    &lt;nav&gt; 元素旨在定义大型的导航链接块。不过，并非文档中所有链接都应该位于&lt;nav&gt; 元素中！</code></pre><h1 id="HTML5-60-aside-gt-元素"><a href="#HTML5-60-aside-gt-元素" class="headerlink" title="HTML5 &#60;aside&gt; 元素"></a>HTML5 &#60;aside&gt; 元素</h1><pre><code>&lt;aside&gt; 元素页面主内容之外的某些内容（比如侧栏）。aside 内容应该与周围内容相关。&lt;img&gt; 元素定义图像，&lt;figcaption&gt; 元素定义标题。</code></pre><h1 id="为何使用-HTML5-元素？"><a href="#为何使用-HTML5-元素？" class="headerlink" title="为何使用 HTML5 元素？"></a>为何使用 HTML5 元素？</h1><pre><code>如果使用 HTML4 的话，开发者会使用他们喜爱的属性名来设置页面元素的样式：header, top, bottom, footer, menu, navigation, main, container, content, article, sidebar, topnav, ...如此，浏览器便无法识别正确的网页内容。而通过 HTML5 元素，比如：&lt;header&gt; &lt;footer&gt; &lt;nav&gt; &lt;section&gt; &lt;article&gt;，此问题迎刃而解。根据 W3C，语义网：“允许跨应用程序、企业和团体对数据进行分享和重用。”</code></pre><h1 id="HTML5-中的语义元素"><a href="#HTML5-中的语义元素" class="headerlink" title="HTML5 中的语义元素"></a>HTML5 中的语义元素</h1><pre><code>下面列出了以字母顺序排列的 HTML5 新语义元素。</code></pre><p>这些链接指向完整的 HTML 参考手册。</p><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td>&#60;article&gt;</td><td>定义文章。</td></tr><tr><td>&#60;aside&gt;</td><td>定义页面内容以外的内容。</td></tr><tr><td>&#60;details&gt;</td><td>定义用户能够查看或隐藏的额外细节。</td></tr><tr><td>&#60;figcaption&gt;</td><td>定义 &#60;figure&gt; 元素的标题。</td></tr><tr><td>&#60;figure&gt;</td><td>规定自包含内容，比如图示、图表、照片、代码清单等。</td></tr><tr><td>&#60;footer&gt;</td><td>定义文档或节的页脚。</td></tr><tr><td>&#60;header&gt;</td><td>规定文档或节的页眉。</td></tr><tr><td>&#60;main&gt;</td><td>规定文档的主内容。</td></tr><tr><td>&#60;mark&gt;</td><td>定义重要的或强调的文本。</td></tr><tr><td>&#60;nav&gt;</td><td>定义导航链接。</td></tr><tr><td>&#60;section&gt;</td><td>定义文档中的节。</td></tr><tr><td>&#60;summary&gt;</td><td>定义 &#60;details&gt; 元素的可见标题。</td></tr><tr><td>&#60;time&gt;</td><td>定义日期/时间。</td></tr></tbody></table><h1 id="从-HTML4-迁移至-HTML5"><a href="#从-HTML4-迁移至-HTML5" class="headerlink" title="从 HTML4 迁移至 HTML5"></a>从 HTML4 迁移至 HTML5</h1><p>   讲解如何从一张典型的 HTML4 页面迁移至典型的 HTML5。<br>   本章演示如何把一张已有的 HTML4 页面转换为 HTML5 页面，在不破坏如何原始内容和结构的情况下。<br>    注释：您可以使用相同的技巧从 HTML4 以及 XHTML 迁移至 HTML5。</p><h1 id="典型的-HTML4-典型的-HTML5"><a href="#典型的-HTML4-典型的-HTML5" class="headerlink" title="典型的 HTML4    典型的 HTML5"></a>典型的 HTML4    典型的 HTML5</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"header"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span></span><br><span class="line"> &lt;div id="menu"&gt;&lt;nav&gt;</span><br><span class="line"> &lt;div id="content"&gt;&lt;section&gt;</span><br><span class="line"> &lt;div id="post"&gt;&lt;article&gt;</span><br><span class="line"> &lt;div id="footer"&gt;&lt;footer&gt;</span><br></pre></td></tr></table></figure><h2 id="60-article-gt-60-section-gt-与-60-div-gt-之间的差异"><a href="#60-article-gt-60-section-gt-与-60-div-gt-之间的差异" class="headerlink" title="&#60;article&gt; &#60;section&gt; 与 &#60;div&gt; 之间的差异"></a>&#60;article&gt; &#60;section&gt; 与 &#60;div&gt; 之间的差异</h2><pre><code>在 HTML5 标准中，&lt;article&gt; &lt;section&gt; 与 &lt;div&gt; 之间的差异很小，令人困惑。在 HTML5 标准中，&lt;section&gt; 元素被定位为相关元素的块。</code></pre><table><thead><tr><th>元素</th><th>属性</th></tr></thead><tbody><tr><td>&#60;article&gt;</td><td>元素被定义为相关元素的完整的自包含块。</td></tr><tr><td>&#60;div&gt;</td><td>元素被定义为子元素的块。</td></tr></tbody></table><pre><code>如何理解呢？       在上面的例子中，我们曾使用 &lt;section&gt; 作为相关 &lt;articles&gt; 的容器。  但是，我们也能够把 &lt;article&gt; 用作文章的容器。</code></pre><h1 id="HTML-5-样式指南和代码约定"><a href="#HTML-5-样式指南和代码约定" class="headerlink" title="HTML(5) 样式指南和代码约定"></a>HTML(5) 样式指南和代码约定</h1><pre><code>web 开发者常常不确定在 HTML 中使用的代码样式和语法。在 2000 年至 2010 年之间，许多 web 开发者从 HTML 转换为 XHTML。通过 XHTML，开发者不得不编写有效的“格式良好的”代码。</code></pre><p>   HTML5 在代码验证时会更宽松一点。</p><pre><code>  通过 HTML5，您必须创建属于自己的最佳实践、样式指南和代码约定。智能且有未来保证对样式的合乎逻辑的使用，可以令其他人更容易理解和使用您的 HTML。在未来，诸如 XML 阅读器之类的程序，也许需要阅读您的 HTML。使用格式良好的“近似 XHTML 的”语法，能够更智能。</code></pre><p>注释：请始终保持您的样式智能、整洁、纯净、格式良好</p><h2 id="请使用小写元素名"><a href="#请使用小写元素名" class="headerlink" title="请使用小写元素名"></a>请使用小写元素名</h2><pre><code>HTML5 允许在元素名中使用混合大小写字母。我们推荐使用小写元素名：混合大小写名称并不好开发者习惯使用小写名（比如在 XHTML 中）小写更起来更纯净小写更易书写</code></pre><h2 id="关闭所有-HTML-元素"><a href="#关闭所有-HTML-元素" class="headerlink" title="关闭所有 HTML 元素"></a>关闭所有 HTML 元素</h2><pre><code>在 HTML5 中，您不必关闭所有元素（例如 &lt;p&gt; 元素）。我们建议关闭所有 HTML 元素（可以不关闭，但是没必要！！！）</code></pre><h2 id="关闭空的-HTML-元素"><a href="#关闭空的-HTML-元素" class="headerlink" title="关闭空的 HTML 元素"></a>关闭空的 HTML 元素</h2><pre><code>在 HTML5 中，关闭空元素是可选的。斜杠（/）在 XHTML 和 XML 中是必需的。如果您期望 XML 软件来访问您的页面，保持这个习惯是个好主意。</code></pre><h2 id="使用小写属性名"><a href="#使用小写属性名" class="headerlink" title="使用小写属性名"></a>使用小写属性名</h2><pre><code>HTML5 允许大小写混合的属性名。</code></pre><p>我们建议使用小写属性名：</p><pre><code>混合属性名并不好开发者习惯于使用小写属性名（比如在 XHTML 中）小写属性名看情况更纯净小写属性名更易书写</code></pre><h2 id="属性值加引号"><a href="#属性值加引号" class="headerlink" title="属性值加引号"></a>属性值加引号</h2><pre><code>HTML5 允许不加引号的属性值。我们推荐属性值加引号：如果属性值包含值，则必须使用引号混合样式绝对不好加引号的值更易阅读</code></pre><h2 id="必需的属性"><a href="#必需的属性" class="headerlink" title="必需的属性"></a>必需的属性</h2><pre><code>请始终对图像使用 alt 属性。当图像无法显示时该属性很重要。请始终定义图像尺寸。这样做会减少闪烁，因为浏览器会在图像加载之前为图像预留空间。</code></pre><h2 id="空格和等号（不加为好）"><a href="#空格和等号（不加为好）" class="headerlink" title="空格和等号（不加为好）"></a>空格和等号（不加为好）</h2><pre><code>等号两边的空格是合法的：但是精简空格更易阅读</code></pre><h2 id="避免长代码行"><a href="#避免长代码行" class="headerlink" title="避免长代码行"></a>避免长代码行</h2><pre><code>当使用 HTML 编辑器时，通过左右滚动来阅读 HTML 代码很不方便。请尽量避免代码行超过 80 个字符。</code></pre><h2 id="空行和缩进"><a href="#空行和缩进" class="headerlink" title="空行和缩进"></a>空行和缩进</h2><pre><code>请勿毫无理由地增加空行。为了提高可读性，请增加空行来分隔大型或逻辑代码块。为了提高可读性，请增加两个空格的缩进。请勿使用 TAB。请勿使用没有必要的空行和缩进。没有必要在短的和相关项目之间使用空行，也没有必要缩进每个元素：</code></pre><h1 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h1><p>&#60;title&gt; 元素在 HTML5 中是必需的。请尽可能制作有意义的标题。</p><pre><code>为了确保恰当的解释，以及正确的搜索引擎索引，在文档中对语言和字符编码的定义越早越好：</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line"> &lt;html lang=<span class="string">"en-US"</span>&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line">   &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">   &lt;title&gt;HTML5 Syntax and Coding Style&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp"> &lt;/</span>head&gt;</span><br></pre></td></tr></table></figure><h1 id="HTML-注释"><a href="#HTML-注释" class="headerlink" title="HTML 注释"></a>HTML 注释</h1><pre><code>短注释应该在单行中书写，并在 &lt;!-- 之后增加一个空格，在 &lt;!-- 之前增加一个空格：多行书写记得换行</code></pre><h1 id="样式表"><a href="#样式表" class="headerlink" title="样式表"></a>样式表</h1><pre><code>请使用简单的语法来链接样式表（type 属性不是必需的）短规则可以压缩为一行，长规则应该分为多行。开括号与选择器位于同一行在开括号之前用一个空格使用两个字符的缩进在每个属性与其值之间使用冒号加一个空格在每个逗号或分号之后使用空格在每个属性值对（包括最后一个）之后使用分号只在值包含空格时使用引号来包围值把闭括号放在新的一行，之前不用空格避免每行超过 80 个字符</code></pre><p>注释：在逗号或分号之后添加空格，是所有书写类型的通用规则</p><h1 id="在-HTML-中加载-JavaScript"><a href="#在-HTML-中加载-JavaScript" class="headerlink" title="在 HTML 中加载 JavaScript"></a>在 HTML 中加载 JavaScript</h1><p>请使用简单的语法来加载外部脚本（type 属性不是必需的）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"myscript.js"</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="通过-JavaScript-访问-HTML-元素"><a href="#通过-JavaScript-访问-HTML-元素" class="headerlink" title="通过 JavaScript 访问 HTML 元素"></a>通过 JavaScript 访问 HTML 元素</h2><p>使用“不整洁”的 HTML 样式的后果，是可能会导致 JavaScript 错误。<br>这两个 JavaScript 语句会产生不同的结果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;p id=<span class="string">"Demo"</span>&gt;This is paragraph <span class="number">1.</span>&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;p id="demo"&gt;This is paragraph 2.&lt;/</span>p&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// Only parapraph 2 will be overwritten</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = <span class="string">"HELLO."</span>;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p>如果可能，请在 HTML 中使用（与 JavaScript）相同的命名约定。</p><h2 id="使用小写文件名"><a href="#使用小写文件名" class="headerlink" title="使用小写文件名"></a>使用小写文件名</h2><pre><code>大多数 web 服务器（Apache、Unix）对文件名的大小写敏感：不能以 london.jpg 访问 London.jpg。其他 web 服务器（微软，IIS）对大小写不敏感：能够以 london.jpg 或 London.jpg 访问 London.jpg。如果使用混合大小写，那么您必须保持高度的一致性。如果您从对大小写不敏感的服务器转到一台对大小写敏感的服务器上，这些小错误将破坏您的网站。</code></pre><p>为了避免这些问题，请始终使用小写文件名（如果可以的话）。</p><h1 id="文件扩展名"><a href="#文件扩展名" class="headerlink" title="文件扩展名"></a>文件扩展名</h1><pre><code>HTML 文件名应该使用扩展名 .html（而不是 .htm）。CSS 文件应该使用扩展名 .css。JavaScript 文件应该使用扩展名 .js。</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML基础_9</title>
      <link href="/2020/05/26/HTML%E5%9F%BA%E7%A1%80_9/"/>
      <url>/2020/05/26/HTML%E5%9F%BA%E7%A1%80_9/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200526232306469.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="HTML基础_9"><br>本篇幅主要介绍HTML的部分元素，输入类型以及图像等等</p><a id="more"></a><h1 id="HTML5-简介"><a href="#HTML5-简介" class="headerlink" title="HTML5 简介"></a>HTML5 简介</h1><h2 id="什么是-HTML5？"><a href="#什么是-HTML5？" class="headerlink" title="什么是 HTML5？"></a>什么是 HTML5？</h2><pre><code>HTML5 是最新的 HTML 标准。HTML5 是专门为承载丰富的 web 内容而设计的，并且无需额外插件。HTML5 拥有新的语义、图形以及多媒体元素。HTML5 提供的新元素和新的 API 简化了 web 应用程序的搭建。HTML5 是跨平台的，被设计为在不同类型的硬件             （PC、平板、手机、电视机等等）之上运行。HTML5 中默认的字符编码是 UTF-8。</code></pre><h2 id="HTML5-新的属性语法"><a href="#HTML5-新的属性语法" class="headerlink" title="HTML5 - 新的属性语法"></a>HTML5 - 新的属性语法</h2><pre><code>HTML5 标准允许 4 中不同的属性语法。</code></pre><h3 id="HTML5-新特性"><a href="#HTML5-新特性" class="headerlink" title="HTML5 - 新特性"></a>HTML5 - 新特性</h3><p>HTML5 的一些最有趣的新特性：</p><pre><code>新的语义元素，比如 &lt;header&gt;, &lt;footer&gt;, &lt;article&gt;, and &lt;section&gt;。新的表单控件，比如数字、日期、时间、日历和滑块。强大的图像支持（借由 &lt;canvas&gt; 和 &lt;svg&gt;）强大的多媒体支持（借由 &lt;video&gt; 和 &lt;audio&gt;）强大的新 API，比如用本地存储取代 cookie。</code></pre><h3 id="HTML5-被删元素"><a href="#HTML5-被删元素" class="headerlink" title="HTML5 - 被删元素"></a>HTML5 - 被删元素</h3><p>以下 HTML 4.01 元素已从 HTML5 中删除：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;acronym&gt;</span><br><span class="line">&lt;applet&gt;</span><br><span class="line">&lt;basefont&gt;</span><br><span class="line">&lt;big&gt;</span><br><span class="line">&lt;center&gt;</span><br><span class="line">&lt;dir&gt;</span><br><span class="line">&lt;font&gt;</span><br><span class="line">&lt;frame&gt;</span><br><span class="line">&lt;frameset&gt;</span><br><span class="line">&lt;noframes&gt;</span><br><span class="line">&lt;strike&gt;</span><br><span class="line">&lt;tt&gt;</span><br></pre></td></tr></table></figure><pre><code>把 HTML5 元素定义为块级元素HTML5 定义了八个新的语义 HTML 元素。所有都是块级元素。您可以把 CSS display 属性设置为 block，以确保老式浏览器中正确的行为：</code></pre><p>   实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">header, section, footer, aside, nav, main, article, figure &#123;</span><br><span class="line">    display: block; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="向-HTML-添加新元素"><a href="#向-HTML-添加新元素" class="headerlink" title="向 HTML 添加新元素"></a>向 HTML 添加新元素</h2><p>您可以通过浏览器 trick 向 HTML 添加任何新元素：<br>本例向 HTML 添加了一个名为 <myHero> 的新元素，并为其定义 display 样式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">   &lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;title&gt;Styling the article element&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">  &lt;script&gt;document.createElement("myHero")&lt;/</span>script&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">      myHero &#123;</span><br><span class="line">        display:block;</span><br><span class="line">        background-color:#ddd;</span><br><span class="line">        padding: <span class="number">50</span>px;</span><br><span class="line">        font-size: <span class="number">30</span>px;</span><br><span class="line">      &#125;  </span><br><span class="line">  &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;My First Heading&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;p&gt;My first paragraph.&lt;/</span>p&gt;</span><br><span class="line"></span><br><span class="line">&lt;myHero&gt;My First Hero&lt;<span class="regexp">/myHero&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><pre><code>已添加的 JavaScript 语句 document.createElement(&quot;myHero&quot;)，仅适用于 IE。Internet Explorer 的问题</code></pre><p>   上述方案可用于所有新的 HTML5 元素，但是：<br>  注意：Internet Explorer 8 以及更早的版本，不允许对未知元素添加样式。<br>    幸运的是，Sjoerd Visscher 创造了 “HTML5 Enabling JavaScript”, “the shiv”：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--[<span class="keyword">if</span> lt IE <span class="number">9</span>]&gt;</span><br><span class="line">     &lt;script src=<span class="string">"http://html5shiv.googlecode.com/svn/trunk/html5.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">   &lt;![endif]--&gt;</span></span><br></pre></td></tr></table></figure><p>   以上代码是一段注释，但是 IE9 的早期版本会读取它（并理解它）。<br>    完整的 Shiv 解决方案<br>    实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">   &lt;html&gt;</span><br><span class="line">   </span><br><span class="line">   &lt;head&gt;</span><br><span class="line">     &lt;title&gt;Styling HTML5&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">     &lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="regexp">     &lt;script src="http:/</span><span class="regexp">/html5shiv.googlecode.com/</span>svn/trunk/html5.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">     &lt;![endif]--&gt;</span></span><br><span class="line"><span class="string">   &lt;/head&gt;</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">   &lt;body&gt;</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">   &lt;h1&gt;My First Article&lt;/h1&gt;</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">   &lt;article&gt;</span></span><br><span class="line"><span class="string">   London is the capital city of England. </span></span><br><span class="line"><span class="string">   It is the most populous city in the United Kingdom, </span></span><br><span class="line"><span class="string">   with a metropolitan area of over 13 million inhabitants.</span></span><br><span class="line"><span class="string">   &lt;/article&gt;</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">   &lt;/body&gt;</span></span><br><span class="line"><span class="string">   &lt;/html&gt;</span></span><br></pre></td></tr></table></figure><p>   引用 shiv 代码的链接必须位于 <head> 元素中，因为 Internet Explorer 需要在读取之前认识所有新元素。</p><h1 id="HTML5-Skeleton"><a href="#HTML5-Skeleton" class="headerlink" title="HTML5 Skeleton"></a>HTML5 Skeleton</h1><pre><code>Skeleton是一个轻量级的CSS栅格系统。里面用了400行代码就把排版布局、按钮、表单和表格的装饰都定义好了。用Skeleton布局，在理解上其实和用&lt;table&gt;布局差不多。都是把网站的排版变得比较整齐。不过Skeleton很灵活。</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">   &lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">   &lt;head&gt;</span><br><span class="line">   &lt;title&gt;HTML5 Skeleton&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">   &lt;meta charset="utf-8"&gt;</span></span><br><span class="line"><span class="regexp">   </span></span><br><span class="line"><span class="regexp">   &lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="regexp">   &lt;script src="http:/</span><span class="regexp">/html5shiv.googlecode.com/</span>svn/trunk/html5.js<span class="string">"&gt;</span></span><br><span class="line"><span class="string">   &lt;/script&gt;</span></span><br><span class="line"><span class="string">   &lt;![endif]--&gt;</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">   &lt;style&gt;</span></span><br><span class="line"><span class="string">   body &#123;font-family: Verdana, sans-serif; font-size:0.8em;&#125;</span></span><br><span class="line"><span class="string">   header,nav, section,article,footer</span></span><br><span class="line"><span class="string">   &#123;border:1px solid grey; margin:5px; padding:8px;&#125;</span></span><br><span class="line"><span class="string">   nav ul &#123;margin:0; padding:0;&#125;</span></span><br><span class="line"><span class="string">   nav ul li &#123;display:inline; margin:5px;&#125;</span></span><br><span class="line"><span class="string">   &lt;/style&gt;</span></span><br><span class="line"><span class="string">   &lt;/head&gt;</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">   &lt;body&gt;</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">   &lt;header&gt;</span></span><br><span class="line"><span class="string">     &lt;h1&gt;HTML5 SKeleton&lt;/h1&gt;</span></span><br><span class="line"><span class="string">   &lt;/header&gt;</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">   &lt;nav&gt;</span></span><br><span class="line"><span class="string">   &lt;ul&gt;</span></span><br><span class="line"><span class="string">     &lt;li&gt;&lt;a href="</span>html5_semantic_elements.asp<span class="string">"&gt;HTML5 Semantic&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">     &lt;li&gt;&lt;a href="</span>html5_geolocation.asp<span class="string">"&gt;HTML5 Geolocation&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">     &lt;li&gt;&lt;a href="</span>html5_canvas.asp<span class="string">"&gt;HTML5 Graphics&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">   &lt;/ul&gt;</span></span><br><span class="line"><span class="string">   &lt;/nav&gt;</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">   &lt;section&gt;</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">   &lt;h1&gt;Famous Cities&lt;/h1&gt;</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">   &lt;article&gt;</span></span><br><span class="line"><span class="string">   &lt;h2&gt;London&lt;/h2&gt;</span></span><br><span class="line"><span class="string">   &lt;p&gt;London is the capital city of England. It is the most populous city in the United Kingdom,</span></span><br><span class="line"><span class="string">   with a metropolitan area of over 13 million inhabitants.&lt;/p&gt;</span></span><br><span class="line"><span class="string">   &lt;/article&gt;</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">   &lt;article&gt;</span></span><br><span class="line"><span class="string">   &lt;h2&gt;Paris&lt;/h2&gt;</span></span><br><span class="line"><span class="string">   &lt;p&gt;Paris is the capital and most populous city of France.&lt;/p&gt;</span></span><br><span class="line"><span class="string">   &lt;/article&gt;</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">   &lt;article&gt;</span></span><br><span class="line"><span class="string">   &lt;h2&gt;Tokyo&lt;/h2&gt;</span></span><br><span class="line"><span class="string">   &lt;p&gt;Tokyo is the capital of Japan, the center of the Greater Tokyo Area,</span></span><br><span class="line"><span class="string">   and the most populous metropolitan area in the world.&lt;/p&gt;</span></span><br><span class="line"><span class="string">   &lt;/article&gt;</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">   &lt;/section&gt;</span></span><br><span class="line"><span class="string">   &lt;/body&gt;</span></span><br><span class="line"><span class="string">   &lt;/html&gt;</span></span><br></pre></td></tr></table></figure><h1 id="HTML5-中的新元素"><a href="#HTML5-中的新元素" class="headerlink" title="HTML5 中的新元素"></a>HTML5 中的新元素</h1><pre><code>下面列出的 HTML5 的新元素，以及对它们的描述。</code></pre><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td>&#60;article&gt;</td><td>定义文档内的文章。</td></tr><tr><td>&#60;aside&gt;</td><td>定义页面内容之外的内容。</td></tr><tr><td>&#60;bdi&gt;</td><td>定义与其他文本不同的文本方向。</td></tr><tr><td>&#60;details&gt;</td><td>定义用户可查看或隐藏的额外细节。</td></tr><tr><td>&#60;dialog&gt;</td><td>定义对话框或窗口。</td></tr><tr><td>&#60;figcaption&gt;</td><td>定义 <figure> 元素的标题。</td></tr><tr><td>&#60;figure&gt;</td><td>定义自包含内容，比如图示、图表、照片、代码清单等等。</td></tr><tr><td>&#60;footer&gt;</td><td>定义文档或节的页脚。</td></tr><tr><td>&#60;header&gt;</td><td>定义文档或节的页眉。</td></tr><tr><td>&#60;main&gt;</td><td>定义文档的主内容。</td></tr><tr><td>&#60;mark&gt;</td><td>定义重要或强调的内容。</td></tr><tr><td>&#60;menuitem&gt;</td><td>定义用户能够从弹出菜单调用的命令/菜单项目。</td></tr><tr><td>&#60;meter&gt;</td><td>定义已知范围（尺度）内的标量测量。</td></tr><tr><td>&#60;nav&gt;</td><td>定义文档内的导航链接。</td></tr><tr><td>&#60;progress&gt;</td><td>定义任务进度。</td></tr><tr><td>&#60;rp&gt;</td><td>定义在不支持 ruby 注释的浏览器中显示什么。</td></tr><tr><td>&#60;rt&gt;</td><td>定义关于字符的解释/发音（用于东亚字体）。</td></tr><tr><td>&#60;ruby&gt;</td><td>定义 ruby 注释（用于东亚字体）。</td></tr><tr><td>&#60;section&gt;</td><td>定义文档中的节。</td></tr><tr><td>&#60;summary&gt;</td><td>定义 <details> 元素的可见标题。</td></tr><tr><td>&#60;time&gt;</td><td>定义日期/时间。</td></tr><tr><td>&#60;wbr&gt;</td><td>定义可能的折行（line-break）。</td></tr></tbody></table><pre><code>新的表单元素标签    描述&lt;datalist&gt;    定义输入控件的预定义选项。&lt;keygen&gt;    定义键对生成器字段（用于表单）。&lt;output&gt;    定义计算结果。</code></pre><h1 id="新的输入类型"><a href="#新的输入类型" class="headerlink" title="新的输入类型"></a>新的输入类型</h1><p>   新的输入类型    新的输入属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">color</span><br><span class="line"> date</span><br><span class="line"> datetime</span><br><span class="line"> datetime-local</span><br><span class="line"> email</span><br><span class="line"> month</span><br><span class="line"> number</span><br><span class="line"> range</span><br><span class="line"> search</span><br><span class="line"> tel</span><br><span class="line"> time</span><br><span class="line"> url</span><br><span class="line"> week</span><br><span class="line"> autocomplete</span><br><span class="line"> autofocus</span><br><span class="line"> form</span><br><span class="line"> formaction</span><br><span class="line"> formenctype</span><br><span class="line"> formmethod</span><br><span class="line"> formnovalidate</span><br><span class="line"> formtarget</span><br><span class="line"> height 和 width</span><br><span class="line"> list</span><br><span class="line"> min 和 max</span><br><span class="line"> multiple</span><br><span class="line"> pattern (regexp)</span><br><span class="line"> placeholder</span><br><span class="line"> required</span><br><span class="line"> step</span><br></pre></td></tr></table></figure><h1 id="HTML5-新的属性语法-1"><a href="#HTML5-新的属性语法-1" class="headerlink" title="HTML5 - 新的属性语法"></a>HTML5 - 新的属性语法</h1><pre><code>HTML5 允许四种不同的属性语法。</code></pre><p>该例演示 &#60;input&gt; 标签中使用的不同语法：</p><p>标签    描述</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Empty&lt;input type=<span class="string">"text"</span> value=<span class="string">"John Doe"</span> disabled&gt;</span><br><span class="line">Unquoted&lt;input type=<span class="string">"text"</span> value=John&gt;</span><br><span class="line">Double-quoted&lt;input type=<span class="string">"text"</span> value=<span class="string">"John Doe"</span>&gt;</span><br><span class="line">Single-quoted&lt;input type=<span class="string">"text"</span> value=<span class="string">'John Doe'</span>&gt;</span><br></pre></td></tr></table></figure><p>在 HTML5 中，根据属性所需，可能会使用所有这四种语法。</p><h1 id="HTML5-图像"><a href="#HTML5-图像" class="headerlink" title="HTML5 图像"></a>HTML5 图像</h1><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td>&#60;canvas&gt;</td><td>定义使用 JavaScript 的图像绘制。</td></tr><tr><td>&#60;svg&gt;</td><td>定义使用 SVG 的图像绘制。</td></tr></tbody></table><h1 id="新的媒介元素"><a href="#新的媒介元素" class="headerlink" title="新的媒介元素"></a>新的媒介元素</h1><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td>&#60;audio&gt;</td><td>定义声音或音乐内容。</td></tr><tr><td>&#60;embed&gt;</td><td>定义外部应用程序的容器（比如插件）。</td></tr><tr><td>&#60;source&gt;</td><td>定义 &#60;video&gt; 和 &#60;audio&gt; 的来源。</td></tr><tr><td>&#60;track&gt;</td><td>定义 &#60;video&gt; 和 &#60;audio&gt; 的轨道。</td></tr><tr><td>&#60;video&gt;</td><td>定义视频或影片内容。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML基础_8</title>
      <link href="/2020/05/26/HTML%E5%9F%BA%E7%A1%80_8/"/>
      <url>/2020/05/26/HTML%E5%9F%BA%E7%A1%80_8/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200526152519610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="HTML基础_8"><br>本篇幅主要介绍了几个Iuput和HTML的几个标签属性</p><a id="more"></a><h1 id="HTML-Input-属性"><a href="#HTML-Input-属性" class="headerlink" title="HTML Input 属性"></a>HTML Input 属性</h1></h1><h2 id="value-属性"><a href="#value-属性" class="headerlink" title="value 属性"></a>value 属性</h2></h2><pre><code>value 属性规定输入字段的初始值：</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">""</span>&gt;</span><br><span class="line"> First name:<span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line">&lt;input type="text" name="firstname" value="John"&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line"> Last name:&lt;br&gt;</span><br><span class="line">&lt;input type="text" name="lastname"&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h2 id="readonly-属性"><a href="#readonly-属性" class="headerlink" title="readonly 属性"></a>readonly 属性</h2><pre><code>readonly 属性规定输入字段为只读（不能修改）：</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">""</span>&gt;</span><br><span class="line"> First name:<span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line">&lt;input type="text" name="firstname" value="John" readonly&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line"> Last name:&lt;br&gt;</span><br><span class="line">&lt;input type="text" name="lastname"&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>readonly 属性不需要值。它等同于 readonly=”readonly”。</p><h2 id="disabled-属性"><a href="#disabled-属性" class="headerlink" title="disabled 属性"></a>disabled 属性</h2><pre><code>disabled 属性规定输入字段是禁用的。被禁用的元素是不可用和不可点击的。被禁用的元素不会被提交。</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">""</span>&gt;</span><br><span class="line"> First name:<span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line">&lt;input type="text" name="firstname" value="John" disabled&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line"> Last name:&lt;br&gt;</span><br><span class="line">&lt;input type="text" name="lastname"&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>disabled 属性不需要值。它等同于 disabled=”disabled”</p><h2 id="size-属性"><a href="#size-属性" class="headerlink" title="size 属性"></a>size 属性</h2><pre><code>size 属性规定输入字段的尺寸（以字符计）：</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">""</span>&gt;</span><br><span class="line"> First name:<span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line">&lt;input type="text" name="firstname" value="John" size="40"&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line"> Last name:&lt;br&gt;</span><br><span class="line">&lt;input type="text" name="lastname"&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h2 id="maxlength-属性"><a href="#maxlength-属性" class="headerlink" title="maxlength 属性"></a>maxlength 属性</h2><pre><code>maxlength 属性规定输入字段允许的最大长度：</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">""</span>&gt;</span><br><span class="line"> First name:<span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line">&lt;input type="text" name="firstname" maxlength="10"&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line"> Last name:&lt;br&gt;</span><br><span class="line">&lt;input type="text" name="lastname"&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><pre><code>如设置 maxlength 属性，则输入控件不会接受超过所允许数的字符。该属性不会提供任何反馈。如果需要提醒用户，则必须编写 JavaScript 代码。</code></pre><p>注释：输入限制并非万无一失。JavaScript 提供了很多方法来增加非法输入。如需安全地限制输入，则接受者（服务器）必须同时对限制进行检查。</p><h1 id="HTML5-属性"><a href="#HTML5-属性" class="headerlink" title="HTML5 属性"></a>HTML5 属性</h1><pre><code>HTML5 为 &lt;input&gt; 增加了如下属性：</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">autocomplete</span><br><span class="line">autofocus</span><br><span class="line">form</span><br><span class="line">formaction</span><br><span class="line">formenctype</span><br><span class="line">formmethod</span><br><span class="line">formnovalidate</span><br><span class="line">formtarget</span><br><span class="line">height 和 width</span><br><span class="line">list</span><br><span class="line">min 和 max</span><br><span class="line">multiple</span><br><span class="line">pattern (regexp)</span><br><span class="line">placeholder</span><br><span class="line">required</span><br><span class="line">step</span><br></pre></td></tr></table></figure><pre><code>并为 &lt;form&gt; 增加如需属性：</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">autocomplete</span><br><span class="line">novalidate</span><br></pre></td></tr></table></figure><h2 id="autocomplete-属性"><a href="#autocomplete-属性" class="headerlink" title="autocomplete 属性"></a>autocomplete 属性</h2><pre><code>autocomplete 属性规定表单或输入字段是否应该自动完成。当自动完成开启，浏览器会基于用户之前的输入值自动填写值。</code></pre><p>提示：您可以把表单的 autocomplete 设置为 on，同时把特定的输入字段设置为 off，反之亦然。</p><pre><code>autocomplete 属性适用于 &lt;form&gt; 以及如下 &lt;input&gt; 类型：text、search、url、tel、email、password、datepickers、range 以及 color。</code></pre><p>实例<br>自动完成开启的 HTML 表单（某个输入字段为 off）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"action_page.php"</span> autocomplete=<span class="string">"on"</span>&gt;</span><br><span class="line">   First name:&lt;input type="text" name="fname"&gt;&lt;br&gt;</span><br><span class="line">   Last name: &lt;input type="text" name="lname"&gt;&lt;br&gt;</span><br><span class="line">   E-mail: &lt;input type="email" name="email" autocomplete="off"&gt;&lt;br&gt;</span><br><span class="line">   &lt;input type="submit"&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h2 id="novalidate-属性"><a href="#novalidate-属性" class="headerlink" title="novalidate 属性"></a>novalidate 属性</h2><pre><code>novalidate 属性属于 &lt;form&gt; 属性。如果设置，则 novalidate 规定在提交表单时不对表单数据进行验证。</code></pre><p>实例<br>指示表单在被提交时<strong>不进行验证</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"action_page.php"</span> novalidate&gt;</span><br><span class="line">   E-mail: <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"user_email"</span>&gt;</span></span></span><br><span class="line">   &lt;input type="submit"&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="autofocus-属性"><a href="#autofocus-属性" class="headerlink" title="autofocus 属性"></a>autofocus 属性</h2><pre><code>autofocus 属性是布尔属性。如果设置，则规定当页面加载时 &lt;input&gt; 元素应该自动获得焦点。</code></pre><p>实例<br>使 “First name” 输入字段在页面加载时自动获得焦点：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">First name:<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"fname"</span> <span class="attr">autofocus</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="form-属性"><a href="#form-属性" class="headerlink" title="form 属性"></a>form 属性</h2><pre><code>form 属性规定 &lt;input&gt; 元素所属的一个或多个表单。提示：如需引用一个以上的表单，请使用空格分隔的表单 id 列表。</code></pre><p>实例<br>输入字段位于 HTML 表单之外（但仍属表单）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"action_page.php"</span> id=<span class="string">"form1"</span>&gt;</span><br><span class="line">   First name: &lt;input type="text" name="fname"&gt;&lt;br&gt;</span><br><span class="line">   &lt;input type="submit" value="Submit"&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"> Last name: &lt;input type="text" name="lname" form="form1"&gt;</span><br></pre></td></tr></table></figure><h2 id="formaction-属性"><a href="#formaction-属性" class="headerlink" title="formaction 属性"></a>formaction 属性</h2><pre><code>formaction 属性规定当提交表单时处理该输入控件的文件的 URL。formaction 属性覆盖 &lt;form&gt; 元素的 action 属性。formaction 属性适用于 type=&quot;submit&quot; 以及 type=&quot;image&quot;。</code></pre><p>实例<br>拥有两个两个提交按钮并对于不同动作的 HTML 表单：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"action_page.php"</span>&gt;</span><br><span class="line">   First name: &lt;input type="text" name="fname"&gt;&lt;br&gt;</span><br><span class="line">   Last name: &lt;input type="text" name="lname"&gt;&lt;br&gt;</span><br><span class="line">   &lt;input type="submit" value="Submit"&gt;&lt;br&gt;</span><br><span class="line">   &lt;input type="submit" formaction="demo_admin.asp"</span><br><span class="line">   value="Submit as admin"&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h2 id="formenctype-属性"><a href="#formenctype-属性" class="headerlink" title="formenctype 属性"></a>formenctype 属性</h2><pre><code>formenctype 属性规定当把表单数据（form-data）提交至服务器时如何对其进行编码（仅针对 method=&quot;post&quot; 的表单）。formenctype 属性覆盖 &lt;form&gt; 元素的 enctype 属性。formenctype 属性适用于 type=&quot;submit&quot; 以及 type=&quot;image&quot;。</code></pre><p>实例<br>发送默认编码以及编码为 “multipart/form-data”（第二个提交按钮）的表单数据（form-data）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"demo_post_enctype.asp"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">   First name: &lt;input type="text" name="fname"&gt;&lt;br&gt;</span><br><span class="line">   &lt;input type="submit" value="Submit"&gt;</span><br><span class="line">   &lt;input type="submit" formenctype="multipart/form-data"</span><br><span class="line">   value="Submit as Multipart/form-data"&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h2 id="formmethod-属性"><a href="#formmethod-属性" class="headerlink" title="formmethod 属性"></a>formmethod 属性</h2><pre><code>formmethod 属性定义用以向 action URL 发送表单数据（form-data）的 HTTP 方法。formmethod 属性覆盖 &lt;form&gt; 元素的 method 属性。formmethod 属性适用于 type=&quot;submit&quot; 以及 type=&quot;image&quot;。</code></pre><p>实例<br>第二个提交按钮覆盖表单的 HTTP 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"action_page.php"</span> method=<span class="string">"get"</span>&gt;</span><br><span class="line">   First name: &lt;input type="text" name="fname"&gt;&lt;br&gt;</span><br><span class="line">   Last name: &lt;input type="text" name="lname"&gt;&lt;br&gt;</span><br><span class="line">   &lt;input type="submit" value="Submit"&gt;</span><br><span class="line">   &lt;input type="submit" formmethod="post" formaction="demo_post.asp"</span><br><span class="line">   value="Submit using POST"&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h2 id="formnovalidate-属性"><a href="#formnovalidate-属性" class="headerlink" title="formnovalidate 属性"></a>formnovalidate 属性</h2><pre><code>novalidate 属性是布尔属性。如果设置，则规定在提交表单时不对 &lt;input&gt; 元素进行验证。formnovalidate 属性覆盖 &lt;form&gt; 元素的 novalidate 属性。formnovalidate 属性可用于 type=&quot;submit&quot;。</code></pre><p>实例<br>拥有两个提交按钮的表单（验证和不验证）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"action_page.php"</span>&gt;</span><br><span class="line">   E-mail: &lt;input type="email" name="userid"&gt;&lt;br&gt;</span><br><span class="line">   &lt;input type="submit" value="Submit"&gt;&lt;br&gt;</span><br><span class="line">   &lt;input type="submit"   formnovalidate    value="Submit without validation"&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h2 id="formtarget-属性"><a href="#formtarget-属性" class="headerlink" title="formtarget 属性"></a>formtarget 属性</h2><pre><code>formtarget 属性规定的名称或关键词指示提交表单后在何处显示接收到的响应。formtarget 属性会覆盖 &lt;form&gt; 元素的 target 属性。formtarget 属性可与 type=&quot;submit&quot; 和 type=&quot;image&quot; 使用。</code></pre><p>实例<br>这个表单有两个提交按钮，对应不同的目标窗口：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"action_page.php"</span>&gt;</span><br><span class="line">   First name: &lt;input type="text" name="fname"&gt;&lt;br&gt;</span><br><span class="line">   Last name: &lt;input type="text" name="lname"&gt;&lt;br&gt;</span><br><span class="line">   &lt;input type="submit" value="Submit as normal"&gt;</span><br><span class="line">   &lt;input type="submit"    formtarget="_blank"</span><br><span class="line">   value="Submit to a new window"&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h2 id="height-和-width-属性"><a href="#height-和-width-属性" class="headerlink" title="height 和 width 属性"></a>height 和 width 属性</h2><pre><code>height 和 width 属性规定 &lt;input&gt; 元素的高度和宽度。height 和 width 属性仅用于 &lt;input type=&quot;image&quot;&gt;。</code></pre><p>注释：请始终规定图像的尺寸。如果浏览器不清楚图像尺寸，则页面会在图像加载时闪烁。</p><p>实例<br>把图像定义为提交按钮，并设置 height 和 width 属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"image"</span> src=<span class="string">"img_submit.gif"</span> alt=<span class="string">"Submit"</span> width=<span class="string">"48"</span> height=<span class="string">"48"</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="list-属性"><a href="#list-属性" class="headerlink" title="list 属性"></a>list 属性</h2><pre><code>list 属性引用的 &lt;datalist&gt; 元素中包含了 &lt;input&gt; 元素的预定义选项。</code></pre><p>实例<br>使用 <datalist> 设置预定义值的 <input> 元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;input list=<span class="string">"browsers"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;datalist id=<span class="string">"browsers"</span>&gt;</span><br><span class="line">   &lt;option value=<span class="string">"Internet Explorer"</span>&gt;</span><br><span class="line">   &lt;option value=<span class="string">"Firefox"</span>&gt;</span><br><span class="line">   &lt;option value=<span class="string">"Chrome"</span>&gt;</span><br><span class="line">   &lt;option value=<span class="string">"Opera"</span>&gt;</span><br><span class="line">   &lt;option value=<span class="string">"Safari"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/datalist&gt;</span></span><br></pre></td></tr></table></figure><h2 id="min-和-max-属性"><a href="#min-和-max-属性" class="headerlink" title="min 和 max 属性"></a>min 和 max 属性</h2><pre><code>min 和 max 属性规定 &lt;input&gt; 元素的最小值和最大值。min 和 max 属性适用于如需输入类型：number、range、date、      datetime、datetime-local、month、time 以及 week。</code></pre><p>实例<br>具有最小和最大值的 <input> 元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Enter a date before <span class="number">1980</span><span class="number">-01</span><span class="number">-01</span>:</span><br><span class="line">&lt;input type=<span class="string">"date"</span> name=<span class="string">"bday"</span> max=<span class="string">"1979-12-31"</span>&gt;</span><br><span class="line"></span><br><span class="line"> Enter a date after <span class="number">2000</span><span class="number">-01</span><span class="number">-01</span>:</span><br><span class="line">&lt;input type=<span class="string">"date"</span> name=<span class="string">"bday"</span> min=<span class="string">"2000-01-02"</span>&gt;</span><br><span class="line"></span><br><span class="line"> Quantity (between <span class="number">1</span> and <span class="number">5</span>):</span><br><span class="line">&lt;input type=<span class="string">"number"</span> name=<span class="string">"quantity"</span> min=<span class="string">"1"</span> max=<span class="string">"5"</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="multiple-属性-文件"><a href="#multiple-属性-文件" class="headerlink" title="multiple 属性:文件"></a>multiple 属性:文件</h2><pre><code>multiple 属性是布尔属性。如果设置，则规定允许用户在 &lt;input&gt; 元素中输入一个以上的值。multiple 属性适用于以下输入类型：email 和 file。</code></pre><p>实例<br>接受多个值的文件上传字段：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Select images: <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"img"</span> <span class="attr">multiple</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="pattern-属性"><a href="#pattern-属性" class="headerlink" title="pattern 属性"></a>pattern 属性</h2><pre><code>pattern 属性规定用于检查 &lt;input&gt; 元素值的正则表达式。pattern 属性适用于以下输入类型：text、search、url、tel、email、and password。</code></pre><p>提示：请使用全局的 title 属性对模式进行描述以帮助用户。<br>提示：请在我们的 JavaScript 教程中学习更多有关正则表达式的知识。</p><p>只能包含三个字母的输入字段（无数字或特殊字符）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Country code: </span><br><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">"country_code"</span> pattern=<span class="string">"[A-Za-z]&#123;3&#125;"</span> title=<span class="string">"Three letter country code"</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="placeholder-属性"><a href="#placeholder-属性" class="headerlink" title="placeholder 属性"></a>placeholder 属性</h2><pre><code>placeholder 属性规定用以描述输入字段预期值的提示（样本值或有关格式的简短描述）。该提示会在用户输入值之前显示在输入字段中。placeholder 属性适用于以下输入类型：text、search、url、tel、email 以及 password。</code></pre><p>实例<br>拥有占位符文本的输入字段：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">"fname"</span> placeholder=<span class="string">"First name"</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="required-属性"><a href="#required-属性" class="headerlink" title="required 属性"></a>required 属性</h2><pre><code>required 属性是布尔属性。如果设置，则规定在提交表单之前必须填写输入字段。required 属性适用于以下输入类型：text、search、url、tel、email、password、                     date pickers、number、checkbox、radio、and file.</code></pre><p>必填的输入字段：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Username: <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"usrname"</span> <span class="attr">required</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="step-属性"><a href="#step-属性" class="headerlink" title="step 属性"></a>step 属性</h2><pre><code>step 属性规定 &lt;input&gt; 元素的合法数字间隔。示例：如果 step=&quot;3&quot;，则合法数字应该是 -3、0、3、6、等等。</code></pre><p>提示：step 属性可与 max 以及 min 属性一同使用，来创建合法值的范围。</p><pre><code>step 属性适用于以下输入类型：number、range、date、datetime、datetime-local、month、time 以及 week。</code></pre><p>示例<br>拥有具体的合法数字间隔的输入字段：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"number"</span> name=<span class="string">"points"</span> step=<span class="string">"3"</span>&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML基础_7</title>
      <link href="/2020/05/25/HTML%E5%9F%BA%E7%A1%80_7/"/>
      <url>/2020/05/25/HTML%E5%9F%BA%E7%A1%80_7/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200525232958918.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="HTML基础_7"><br>本篇幅主要介绍表单的部分元素以及输入类型。<br>  <a id="more"></a></p><h1 id="HTML-表单元素"><a href="#HTML-表单元素" class="headerlink" title="HTML 表单元素"></a>HTML 表单元素</h1><h2 id="60-select-gt-元素（下拉列表）"><a href="#60-select-gt-元素（下拉列表）" class="headerlink" title="&#60;select&gt; 元素（下拉列表）"></a>&#60;select&gt; 元素（下拉列表）</h2><pre><code>&lt;select&gt; 元素定义下拉列表：</code></pre><p>  实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;select name=<span class="string">"cars"</span>&gt;</span><br><span class="line">  &lt;option value=<span class="string">"volvo"</span>&gt;Volvo&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">  &lt;option value="saab"&gt;Saab&lt;/</span>option&gt;</span><br><span class="line">  &lt;option value=<span class="string">"fiat"</span>&gt;Fiat&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">  &lt;option value="audi"&gt;Audi&lt;/</span>option&gt;</span><br><span class="line">  &lt;<span class="regexp">/select&gt;</span></span><br></pre></td></tr></table></figure><h2 id="60-option-gt-元素定义待选择的选项。"><a href="#60-option-gt-元素定义待选择的选项。" class="headerlink" title="&#60;option&gt; 元素定义待选择的选项。"></a>&#60;option&gt; 元素定义待选择的选项。</h2><pre><code>列表通常会把首个选项显示为被选选项。您能够通过添加 selected 属性来定义预定义选项。实例&lt;option value=&quot;fiat&quot; selected&gt;Fiat&lt;/option&gt;</code></pre><h2 id="60-textarea-gt-元素"><a href="#60-textarea-gt-元素" class="headerlink" title="&#60;textarea&gt; 元素"></a>&#60;textarea&gt; 元素</h2><pre><code>&lt;textarea&gt; 元素定义多行输入字段（文本域）：</code></pre><p>   实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea name=<span class="string">"message"</span> rows=<span class="string">"10"</span> cols=<span class="string">"30"</span>&gt;</span><br><span class="line">The cat was playing <span class="keyword">in</span> the garden.</span><br><span class="line">&lt;<span class="regexp">/textarea&gt;</span></span><br></pre></td></tr></table></figure><h2 id="60-button-gt-元素"><a href="#60-button-gt-元素" class="headerlink" title="&#60;button&gt; 元素"></a>&#60;button&gt; 元素</h2><pre><code>&lt;button&gt; 元素定义可点击的按钮：</code></pre><p> 实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button type=<span class="string">"button"</span> onclick=<span class="string">"alert('Hello World!')"</span>&gt;Click Me!&lt;<span class="regexp">/button&gt;</span></span><br></pre></td></tr></table></figure><h1 id="HTML5-表单元素"><a href="#HTML5-表单元素" class="headerlink" title="HTML5 表单元素"></a>HTML5 表单元素</h1><p>HTML5 增加了如下表单元素：</p><pre><code>&lt;datalist&gt;&lt;keygen&gt;&lt;output&gt;</code></pre><p>注释：默认地，浏览器不会显示未知元素。新元素不会破坏您的页面。</p><h2 id="HTML5-元素"><a href="#HTML5-元素" class="headerlink" title="HTML5  元素"></a>HTML5 <datalist> 元素</h2><pre><code>&lt;datalist&gt; 元素为 &lt;input&gt; 元素规定预定义选项列表。用户会在他们输入数据时看到预定义选项的下拉列表。&lt;input&gt; 元素的 list 属性必须引用 &lt;datalist&gt; 元素的 id 属性。</code></pre><p> 实例<br>        通过 <datalist> 设置预定义值的 <input> 元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"action_page.php"</span>&gt;</span><br><span class="line">  &lt;input list=<span class="string">"browsers"</span>&gt;</span><br><span class="line">  &lt;datalist id=<span class="string">"browsers"</span>&gt;</span><br><span class="line">     &lt;option value=<span class="string">"Internet Explorer"</span>&gt;</span><br><span class="line">     &lt;option value=<span class="string">"Firefox"</span>&gt;</span><br><span class="line">     &lt;option value=<span class="string">"Chrome"</span>&gt;</span><br><span class="line">     &lt;option value=<span class="string">"Opera"</span>&gt;</span><br><span class="line">     &lt;option value=<span class="string">"Safari"</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/datalist&gt; </span></span><br><span class="line"><span class="regexp">  &lt;/</span>form&gt;</span><br></pre></td></tr></table></figure><h1 id="HTML-输入类型"><a href="#HTML-输入类型" class="headerlink" title="HTML 输入类型"></a>HTML 输入类型</h1><h2 id="输入类型：text"><a href="#输入类型：text" class="headerlink" title="输入类型：text"></a>输入类型：text</h2><pre><code>&lt;input type=&quot;text&quot;&gt; 定义供文本输入的单行输入字段：</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line"> First name:<span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line">&lt;input type="text" name="firstname"&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line"> Last name:&lt;br&gt;</span><br><span class="line">&lt;input type="text" name="lastname"&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h2 id="输入类型：password"><a href="#输入类型：password" class="headerlink" title="输入类型：password"></a>输入类型：password</h2><pre><code>&lt;input type=&quot;password&quot;&gt; 定义密码字段：</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line"> User name:<span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line">&lt;input type="text" name="username"&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line"> User password:&lt;br&gt;</span><br><span class="line">&lt;input type="password" name="psw"&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>注释：password 字段中的字符会被做掩码处理（显示为星号或实心圆）。</p><h2 id="输入类型：submit"><a href="#输入类型：submit" class="headerlink" title="输入类型：submit"></a>输入类型：submit</h2><pre><code>&lt;input type=&quot;submit&quot;&gt; 定义提交表单数据至表单处理程序的按钮。表单处理程序（form-handler）通常是包含处理输入数据的脚本的服务器页面。在表单的 action 属性中规定表单处理程序（form-handler）：</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"action_page.php"</span>&gt;</span><br><span class="line">First name:<span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line">&lt;input type="text" name="firstname" value="Mickey"&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">Last name:&lt;br&gt;</span><br><span class="line">&lt;input type="text" name="lastname" value="Mouse"&gt;</span><br><span class="line">&lt;br&gt;&lt;br&gt;</span><br><span class="line">&lt;input type="submit" value="Submit"&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>如果您省略了提交按钮的 value 属性，那么该按钮将获得默认文本。</p><h2 id="单选框：-Input-Type-radio"><a href="#单选框：-Input-Type-radio" class="headerlink" title="单选框： Input Type: radio"></a>单选框： Input Type: radio</h2><pre><code>&lt;input type=&quot;radio&quot;&gt; 定义单选按钮。</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">&lt;input type=<span class="string">"radio"</span> name=<span class="string">"sex"</span> value=<span class="string">"male"</span> checked&gt;Male</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;input type=<span class="string">"radio"</span> name=<span class="string">"sex"</span> value=<span class="string">"female"</span>&gt;Female</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure><h2 id="复选框：-Input-Type-checkbox"><a href="#复选框：-Input-Type-checkbox" class="headerlink" title="复选框： Input Type: checkbox"></a>复选框： Input Type: checkbox</h2><pre><code>&lt;input type=&quot;checkbox&quot;&gt; 定义复选框。复选框允许用户在有限数量的选项中选择零个或多个选项。</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"vehicle"</span> value=<span class="string">"Bike"</span>&gt;I have a bike</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"vehicle"</span> value=<span class="string">"Car"</span>&gt;I have a car </span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure><h2 id="定义按钮：-lt-input-type-”button-gt-定义按钮。"><a href="#定义按钮：-lt-input-type-”button-gt-定义按钮。" class="headerlink" title="定义按钮：&lt;input type=”button&gt; 定义按钮。"></a>定义按钮：&lt;input type=”button&gt; 定义按钮。</h2><p> 实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"button"</span> onclick=<span class="string">"alert('Hello World!')"</span> value=<span class="string">"Click Me!"</span>&gt; &lt;<span class="regexp">/h2&gt;</span></span><br></pre></td></tr></table></figure><h1 id="HTML5-输入类型"><a href="#HTML5-输入类型" class="headerlink" title="HTML5 输入类型"></a>HTML5 输入类型</h1></h1><p> HTML5 增加了多个新的输入类型：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">color</span><br><span class="line">date</span><br><span class="line">datetime</span><br><span class="line">datetime-local</span><br><span class="line">email</span><br><span class="line">month</span><br><span class="line">number</span><br><span class="line">range</span><br><span class="line">search</span><br><span class="line">tel</span><br><span class="line">time</span><br><span class="line">url</span><br><span class="line">week</span><br></pre></td></tr></table></figure><pre><code>注释：老式 web 浏览器不支持的输入类型，会被视为输入类型 text。</code></pre><h2 id="输入类型：number"><a href="#输入类型：number" class="headerlink" title="输入类型：number"></a>输入类型：number</h2><pre><code>&lt;input type=&quot;number&quot;&gt; 用于应该包含数字值的输入字段。您能够对数字做出限制。根据浏览器支持，限制可应用到输入字段。</code></pre><p>   实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">    Quantity (between <span class="number">1</span> and <span class="number">5</span>):</span><br><span class="line">    &lt;input type=<span class="string">"number"</span> name=<span class="string">"quantity"</span> min=<span class="string">"1"</span> max=<span class="string">"5"</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure><h2 id="输入限制"><a href="#输入限制" class="headerlink" title="输入限制"></a>输入限制</h2><p>这里列出了一些常用的输入限制（其中一些是 HTML5 中新增的）：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>disabled</td><td>规定输入字段应该被禁用。</td></tr><tr><td>max</td><td>规定输入字段的最大值。</td></tr><tr><td>maxlength</td><td>规定输入字段的最大字符数。</td></tr><tr><td>min</td><td>规定输入字段的最小值。</td></tr><tr><td>pattern</td><td>规定通过其检查输入值的正则表达式。</td></tr><tr><td>readonly</td><td>规定输入字段为只读（无法修改）。</td></tr><tr><td>required</td><td>规定输入字段是必需的（必需填写）。</td></tr><tr><td>size</td><td>规定输入字段的宽度（以字符计）。</td></tr><tr><td>step</td><td>规定输入字段的合法数字间隔。</td></tr><tr><td>value</td><td>规定输入字段的默认值。</td></tr></tbody></table><p>例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">    Quantity:</span><br><span class="line">    &lt;input type=<span class="string">"number"</span> name=<span class="string">"points"</span> min=<span class="string">"0"</span> max=<span class="string">"100"</span> step=<span class="string">"10"</span> value=<span class="string">"30"</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure><h2 id="输入类型：date"><a href="#输入类型：date" class="headerlink" title="输入类型：date"></a>输入类型：date</h2><pre><code>&lt;input type=&quot;date&quot;&gt; 用于应该包含日期的输入字段。根据浏览器支持，日期选择器会出现输入字段中。</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">  Birthday:</span><br><span class="line">  &lt;input type=<span class="string">"date"</span> name=<span class="string">"bday"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/form</span></span><br></pre></td></tr></table></figure><h2 id="输入类型：color"><a href="#输入类型：color" class="headerlink" title="输入类型：color"></a>输入类型：color</h2><pre><code>&lt;input type=&quot;color&quot;&gt; 用于应该包含颜色的输入字段。根据浏览器支持，颜色选择器会出现输入字段中。</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">  Select your favorite color:</span><br><span class="line">  &lt;input type=<span class="string">"color"</span> name=<span class="string">"favcolor"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure><h2 id="输入类型：range-范围内的值滑块"><a href="#输入类型：range-范围内的值滑块" class="headerlink" title="输入类型：range 范围内的值滑块"></a>输入类型：range 范围内的值滑块</h2><pre><code>&lt;input type=&quot;range&quot;&gt; 用于应该包含一定范围内的值的输入字段。根据浏览器支持，输入字段能够显示为滑块控件。</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">  &lt;input type=<span class="string">"range"</span> name=<span class="string">"points"</span> min=<span class="string">"0"</span> max=<span class="string">"10"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure><h2 id="输入类型：month"><a href="#输入类型：month" class="headerlink" title="输入类型：month"></a>输入类型：month</h2><pre><code>&lt;input type=&quot;month&quot;&gt; 允许用户选择月份和年份。  根据浏览器支持，日期选择器会出现输入字段中。</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">  Birthday (month and year):</span><br><span class="line">  &lt;input type=<span class="string">"month"</span> name=<span class="string">"bdaymonth"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure><h2 id="输入类型：week"><a href="#输入类型：week" class="headerlink" title="输入类型：week"></a>输入类型：week</h2><pre><code>&lt;input type=&quot;week&quot;&gt; 允许用户选择周和年。根据浏览器支持，日期选择器会出现输入字段中。</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">  Select a week:</span><br><span class="line">  &lt;input type=<span class="string">"week"</span> name=<span class="string">"week_year"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/form</span></span><br></pre></td></tr></table></figure><blockquote></blockquote><h2 id="输入类型：time"><a href="#输入类型：time" class="headerlink" title="输入类型：time"></a>输入类型：time</h2><pre><code>&lt;input type=&quot;time&quot;&gt; 允许用户选择时间（无时区）。根据浏览器支持，时间选择器会出现输入字段中。</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">  Select a time:</span><br><span class="line">  &lt;input type=<span class="string">"time"</span> name=<span class="string">"usr_time"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure><h2 id="输入类型：datetime"><a href="#输入类型：datetime" class="headerlink" title="输入类型：datetime"></a>输入类型：datetime</h2><pre><code>&lt;input type=&quot;datetime&quot;&gt; 允许用户选择日期和时间（有时区）。根据浏览器支持，日期选择器会出现输入字段中。</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">  Birthday (date and time):</span><br><span class="line">  &lt;input type=<span class="string">"datetime"</span> name=<span class="string">"bdaytime"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure><h2 id="输入类型：datetime-local"><a href="#输入类型：datetime-local" class="headerlink" title="输入类型：datetime-local"></a>输入类型：datetime-local</h2><pre><code>&lt;input type=&quot;datetime-local&quot;&gt; 允许用户选择日期和时间（无时区）。根据浏览器支持，日期选择器会出现输入字段中。</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">  Birthday (date and time):</span><br><span class="line">  &lt;input type=<span class="string">"datetime-local"</span> name=<span class="string">"bdaytime"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure><h2 id="输入类型：email"><a href="#输入类型：email" class="headerlink" title="输入类型：email"></a>输入类型：email</h2><pre><code>&lt;input type=&quot;email&quot;&gt; 用于应该包含电子邮件地址的输入字段。根据浏览器支持，能够在被提交时自动对电子邮件地址进行验证。某些智能手机会识别 email 类型，并在键盘增加 &quot;.com&quot; 以匹配电子邮件输入。</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">  E-mail:</span><br><span class="line">  &lt;input type=<span class="string">"email"</span> name=<span class="string">"email"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure><h2 id="输入类型：search"><a href="#输入类型：search" class="headerlink" title="输入类型：search"></a>输入类型：search</h2><pre><code>&lt;input type=&quot;search&quot;&gt; 用于搜索字段（搜索字段的表现类似常规文本字段）。</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">  Search Google:</span><br><span class="line">  &lt;input type=<span class="string">"search"</span> name=<span class="string">"googlesearch"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure><h2 id="输入类型：tel"><a href="#输入类型：tel" class="headerlink" title="输入类型：tel"></a>输入类型：tel</h2><pre><code>&lt;input type=&quot;tel&quot;&gt; 用于应该包含电话号码的输入字段。目前只有 Safari 8 支持 tel 类型。</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">  Telephone:</span><br><span class="line">  &lt;input type=<span class="string">"tel"</span> name=<span class="string">"usrtel"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure><h2 id="输入类型：url"><a href="#输入类型：url" class="headerlink" title="输入类型：url"></a>输入类型：url</h2><pre><code>&lt;input type=&quot;url&quot;&gt; 用于应该包含 URL 地址的输入字段。根据浏览器支持，在提交时能够自动验证 url 字段。某些智能手机识别 url 类型，并向键盘添加 &quot;.com&quot; 以匹配 url 输入。</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">  Add your homepage:</span><br><span class="line">  &lt;input type=<span class="string">"url"</span> name=<span class="string">"homepage"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML基础_6</title>
      <link href="/2020/05/25/HTML%E5%9F%BA%E7%A1%80_6/"/>
      <url>/2020/05/25/HTML%E5%9F%BA%E7%A1%80_6/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200525230655299.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="HTML基础_6"><br>本篇幅主要介绍表单的的一些元素属性</p><a id="more"></a><h1 id="HTML-表单"><a href="#HTML-表单" class="headerlink" title="HTML 表单"></a>HTML 表单</h1><pre><code>HTML 表单用于搜集不同类型的用户输入</code></pre><h2 id="60-form-gt-元素"><a href="#60-form-gt-元素" class="headerlink" title="&#60;form&gt; 元素"></a>&#60;form&gt; 元素</h2><p>   HTML 表单用于收集用户输入。</p><ul><li><form> 元素定义 HTML 表单：<p>   实例</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">    </span><br><span class="line">   form elements</span><br><span class="line">    </span><br><span class="line">   &lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure><h2 id="HTML-表单包含表单元素"><a href="#HTML-表单包含表单元素" class="headerlink" title="HTML 表单包含表单元素"></a>HTML 表单包含表单元素</h2><p>表单元素指的是不同类型的 input 元素、复选框、单选按钮、提交按钮等等。</p><h2 id="60-input-gt-元素"><a href="#60-input-gt-元素" class="headerlink" title="&#60;input&gt; 元素"></a>&#60;input&gt; 元素</h2></h2><ul><li>&#60;input&gt; 元素是最重要的表单元素。</li><li>&#60;input&gt; 元素有很多形态，根据不同的 type 属性。</li></ul><h2 id="文本输入"><a href="#文本输入" class="headerlink" title="文本输入"></a>文本输入</h2><pre><code>&amp;#60;input type=&quot;text&quot;&gt; 定义用于文本输入的单行输入字段：</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line"> First name:<span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line">&lt;input type="text" name="firstname"&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line"> Last name:&lt;br&gt;</span><br><span class="line">&lt;input type="text" name="lastname"&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>注释：表单本身并不可见。还要注意文本字段的默认宽度是 20 个字符</p><h2 id="单选按钮输入"><a href="#单选按钮输入" class="headerlink" title="单选按钮输入"></a>单选按钮输入</h3></h2><p>&#60;input type=”radio”&gt; 定义单选按钮。</p><pre><code>单选按钮允许用户在有限数量的选项中选择其中之一：</code></pre><p>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line">&lt;input type=<span class="string">"radio"</span> name=<span class="string">"sex"</span> value=<span class="string">"male"</span> checked&gt;Male</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;input type=<span class="string">"radio"</span> name=<span class="string">"sex"</span> value=<span class="string">"female"</span>&gt;Female</span><br></pre></td></tr></table></figure><h2 id="提交按钮"><a href="#提交按钮" class="headerlink" title="提交按钮"></a>提交按钮</h3></h2><p>   &#60;input type=”submit”&gt; 定义用于向表单处理程序（form-handler）提交表单的按钮。</p><pre><code>表单处理程序通常是包含用来处理输入数据的脚本的服务器页面。</code></pre><p>表单处理程序在表单的 action 属性中指定：<br>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"action_page.php"</span>&gt;</span><br><span class="line">First name:<span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line">&lt;input type="text" name="firstname" value="Mickey"&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">Last name:&lt;br&gt;</span><br><span class="line">&lt;input type="text" name="lastname" value="Mouse"&gt;</span><br><span class="line">&lt;br&gt;&lt;br&gt;</span><br><span class="line">&lt;input type="submit" value="Submit"&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h1 id="Action-属性"><a href="#Action-属性" class="headerlink" title="Action 属性"></a>Action 属性</h1><pre><code>action 属性定义在提交表单时执行的动作。向服务器提交表单的通常做法是使用提交按钮。通常，表单会被提交到 web 服务器上的网页。指定了某个服务器脚本来处理被提交表单：</code></pre><p>&#60;form action=”action_page.php”&gt;</p><p><strong>如果省略 action 属性，则 action 会被设置为当前页面。</strong></p><h1 id="Method-属性"><a href="#Method-属性" class="headerlink" title="Method 属性"></a>Method 属性</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">method 属性规定在提交表单时所用的 HTTP 方法（GET 或 POST）：</span><br><span class="line">&lt;form action=<span class="string">"action_page.php"</span> method=<span class="string">"GET"</span>&gt;</span><br><span class="line">或：</span><br><span class="line">&lt;form action=<span class="string">"action_page.php"</span> method=<span class="string">"POST"</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="何时使用-GET？"><a href="#何时使用-GET？" class="headerlink" title="何时使用 GET？"></a>何时使用 GET？</h2><pre><code>您能够使用 GET（默认方法）：如果表单提交是被动的（比如搜索引擎查询），并且没有敏感信息。当您使用 GET 时，表单数据在页面地址栏中是可见的：action_page.php?firstname=Mickey&amp;lastname=Mouse注释：GET 最适合少量数据的提交。浏览器会设定容量限制。</code></pre><h2 id="何时使用-POST？"><a href="#何时使用-POST？" class="headerlink" title="何时使用 POST？"></a>何时使用 POST？</h2></h2><pre><code>您应该使用 POST：如果表单正在更新数据，或者包含敏感信息（例如密码）。POST 的安全性更加，因为在页面地址栏中被提交的数据是不可见的。</code></pre><h1 id="Name-属性"><a href="#Name-属性" class="headerlink" title="Name 属性"></a>Name 属性</h1><pre><code>如果要正确地被提交，每个输入字段必须设置一个 name 属性。</code></pre><p>   本例只会提交 “Last name” 输入字段：<br>实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"action_page.php"</span>&gt;</span><br><span class="line">First name:<span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line">&lt;input type="text" value="Mickey"&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">Last name:&lt;br&gt;</span><br><span class="line">&lt;input type="text" name="lastname" value="Mouse"&gt;</span><br><span class="line">&lt;br&gt;&lt;br&gt;</span><br><span class="line">&lt;input type="submit" value="Submit"&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><h1 id="用-60-fieldset-gt-组合表单数据"><a href="#用-60-fieldset-gt-组合表单数据" class="headerlink" title="用&#60;fieldset&gt; 组合表单数据"></a>用&#60;fieldset&gt; 组合表单数据</h2></h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;fieldset&gt; 元素组合表单中的相关数据</span><br><span class="line">   &lt;legend&gt; 元素为 &lt;fieldset&gt; 元素定义标题。</span><br><span class="line">       &lt;form action=<span class="string">"action_page.php"</span>&gt;</span><br><span class="line">           &lt;fieldset&gt;</span><br><span class="line">           &lt;legend&gt;Personal information:&lt;<span class="regexp">/legend&gt;</span></span><br><span class="line"><span class="regexp">           First name:&lt;br&gt;</span></span><br><span class="line"><span class="regexp">           &lt;input type="text" name="firstname" value="Mickey"&gt;</span></span><br><span class="line"><span class="regexp">           &lt;br&gt;</span></span><br><span class="line"><span class="regexp">           Last name:&lt;br&gt;</span></span><br><span class="line"><span class="regexp">           &lt;input type="text" name="lastname" value="Mouse"&gt;</span></span><br><span class="line"><span class="regexp">           &lt;br&gt;&lt;br&gt;</span></span><br><span class="line"><span class="regexp">           &lt;input type="submit" value="Submit"&gt;&lt;/</span>fieldset&gt;</span><br><span class="line">           &lt;<span class="regexp">/form&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>accept-charset</td><td>规定在被提交表单中使用的字符集（默认：页面字符集）。</td></tr><tr><td>action</td><td>规定向何处提交表单的地址（URL）（提交页面）。</td></tr><tr><td>autocomplete</td><td>规定浏览器应该自动完成表单（默认：开启）。</td></tr><tr><td>enctype</td><td>规定被提交数据的编码（默认：url-encoded）。</td></tr><tr><td>method</td><td>规定在提交表单时所用的 HTTP 方法（默认：GET）。</td></tr><tr><td>name</td><td>规定识别表单的名称（对于 DOM 使用：document.forms.name）。</td></tr><tr><td>novalidate</td><td>规定浏览器不验证表单。</td></tr><tr><td>target</td><td>规定 action 属性中地址的目标（默认：_self）。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML基础_5</title>
      <link href="/2020/05/25/HTML%E5%9F%BA%E7%A1%80_5/"/>
      <url>/2020/05/25/HTML%E5%9F%BA%E7%A1%80_5/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200525215323197.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70#pic_center" alt="XHTML"><br>本篇幅主要简介什么是XHTML</p><a id="more"></a><h1 id="XHTML-简介"><a href="#XHTML-简介" class="headerlink" title="XHTML 简介"></a>XHTML 简介</h1><p>XHTML 是以 XML 格式编写的 HTML。</p><h2 id="什么是-XHTML？"><a href="#什么是-XHTML？" class="headerlink" title="什么是 XHTML？"></a>什么是 XHTML？</h2><pre><code>XHTML 指的是可扩展超文本标记语言XHTML 与 HTML 4.01 几乎是相同的XHTML 是更严格更纯净的 HTML 版本XHTML 是以 XML 应用的方式定义的 HTMLXHTML 是 2001 年 1 月发布的 W3C 推荐标准</code></pre><h2 id="为什么使用-XHTML？"><a href="#为什么使用-XHTML？" class="headerlink" title="为什么使用 XHTML？"></a>为什么使用 XHTML？</h2><p>今日的科技界存在一些不同的浏览器技术。其中一些在计算机上运行，而另一些可能在移动电话或其他小型设备上运行。小型设备往往缺乏解释“糟糕”的标记语言的资源和能力。所以 - <em>通过结合 XML 和 HTML 的长处</em>，开发出了 XHTML。XHTML 是作为 XML 被重新设计的 HTML。<br><strong>与 HTML 相比最重要的区别：</strong></p><p> 文档结构</p><ul><li>XHTML DOCTYPE 是强制性的</li><li>html 中的 XML namespace 属性是强制性的</li><li>html、head、title 以及body 也是强制性的</li></ul><p> 元素语法</p><ul><li>XHTML 元素必须正确嵌套</li><li>XHTML 元素必须始终关闭</li><li>XHTML 元素必须小写</li><li>XHTML 文档必须有一个根元素</li></ul><p>属性语法</p><ul><li>XHTML 属性必须使用小写</li><li>XHTML 属性值必须用引号包围</li><li>XHTML 属性最小化也是禁止的</li></ul><h2 id="如何从-HTML-转换到-XHTML"><a href="#如何从-HTML-转换到-XHTML" class="headerlink" title="如何从 HTML 转换到 XHTML"></a>如何从 HTML 转换到 XHTML</h2><pre><code>向每张页面的第一行添加 XHTML &lt;!DOCTYPE&gt;向每张页面的 html 元素添加 xmlns 属性把所有元素名改为小写关闭所有空元素把所有属性名改为小写为所有属性值加引号</code></pre><h1 id="XHTML-元素"><a href="#XHTML-元素" class="headerlink" title="XHTML-元素"></a>XHTML-元素</h1><p>XHTML 元素是以 XML 格式编写的 HTML 元素</p><h2 id="XHTML-元素-语法规则"><a href="#XHTML-元素-语法规则" class="headerlink" title="XHTML 元素 - 语法规则"></a>XHTML 元素 - 语法规则</h2><pre><code>XHTML 元素必须正确嵌套XHTML 元素必须始终关闭XHTML 元素必须小写XHTML 文档必须有一个根元素XHTML 元素必须正确嵌套XHTML 元素必须始终关闭空元素也必须关闭&lt;br /&gt;&lt;hr /&gt;XHTML 元素必须小写</code></pre><h1 id="XHTML-属性"><a href="#XHTML-属性" class="headerlink" title="XHTML-属性"></a>XHTML-属性</h1></h1><p>XHTML 属性是以 XML 格式编写的 HTML 属性。</p><h2 id="XHTML-属性-语法规则"><a href="#XHTML-属性-语法规则" class="headerlink" title="XHTML 属性 - 语法规则"></a>XHTML 属性 - 语法规则</h2></h2><ul><li>XHTML 属性必须使用小写</li><li>XHTML 属性值必须用引号包围</li><li>XHTML 属性最小化也是禁止的</li></ul>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于华为云的域名认证问题</title>
      <link href="/2020/04/26/%E5%85%B3%E4%BA%8E%E5%8D%8E%E4%B8%BA%E4%BA%91%E7%9A%84%E5%9F%9F%E5%90%8D%E8%AE%A4%E8%AF%81%E9%97%AE%E9%A2%98/"/>
      <url>/2020/04/26/%E5%85%B3%E4%BA%8E%E5%8D%8E%E4%B8%BA%E4%BA%91%E7%9A%84%E5%9F%9F%E5%90%8D%E8%AE%A4%E8%AF%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="关于华为云的域名认证问题"><a href="#关于华为云的域名认证问题" class="headerlink" title="关于华为云的域名认证问题"></a>关于华为云的域名认证问题</h1><p>最近的华为域名福利大放送 ，top域名只需要一元就能使用一年。<br>搭建博客的话只需要实名认证，不需要备案就可以用！真香！！</p><a id="more"></a><p><img src="https://img-blog.csdnimg.cn/20200426204215183.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="1元一年域名"><br>简直白嫖呀。</p><h1 id="关于实名认证的问题"><a href="#关于实名认证的问题" class="headerlink" title="关于实名认证的问题"></a>关于实名认证的问题</h1><p>但是很多人买来都会遇到一个实名认证的问题。<br>就是注册新用户的时候就已经实名认证了，但是购买域名以后再一次认证就一直失败！像下面这样：</p><p><img src="https://img-blog.csdnimg.cn/20200426204549165.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt=""><br><img src="https://img-blog.csdnimg.cn/20200426204558414.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt=""><br>这里就和大家说一说，怎么跳过这个坑！！！（博主已为你们踩了不少坑）<br><img src="https://img-blog.csdnimg.cn/20200426205103422.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt=""><br><strong>到这里  ，大家先点自己的域名！查看信息！</strong><br><img src="https://img-blog.csdnimg.cn/2020042620594117.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200426210323327.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p> 直接去认证，认证失败的原因就是域名所属人为 个人信息模板！！！<br> 因此这个就是一个坑！！不明白华为的这些操作逻辑，有点不人性化，哈哈哈，个人感觉哈（不要喷我，有可能是自己太菜）</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 经验之谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML基础_4</title>
      <link href="/2020/04/18/HTML%E5%9F%BA%E7%A1%80_4/"/>
      <url>/2020/04/18/HTML%E5%9F%BA%E7%A1%80_4/</url>
      
        <content type="html"><![CDATA[<p> <img src="https://img-blog.csdnimg.cn/20200418203501584.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="HTML基础_4"><br> <strong>这一部分介绍一下几个关于HTML的重要的基本信息</strong><br> <a id="more"></a></p><h1 id="HTML-统一资源定位器"><a href="#HTML-统一资源定位器" class="headerlink" title="HTML 统一资源定位器"></a>HTML 统一资源定位器</h1><p>   <strong><em>URL 也被称为网址。</em></strong><br>    <strong>URL - Uniform Resource Locator</strong><br>当您点击 HTML 页面中的某个链接时，对应的 <strong>&#60;a&gt;</strong> 标签指向万维网上的一个地址。<br>    统一资源定位器（URL）用于定位万维网上的文档（或其他数据）。<br>    网址，比如 <a href="http://www.baidu.com，遵守以下的语法规则：">http://www.baidu.com，遵守以下的语法规则：</a><br>    scheme://host.domain:port/path/filename<br>    解释：</p><blockquote><p>scheme - 定义因特网服务的类型。最常见的类型是 http<br>    host - 定义域主机（http 的默认主机是 www）<br>    domain - 定义因特网域名，比如 w3school.com.cn<br>    :port - 定义主机上的端口号（http 的默认端口号是 80）<br>    path - 定义服务器上的路径（如果省略，则文档必须位于网站的根目录中）。<br>    filename - 定义文档/资源的名称</p></blockquote><h1 id="HTML-URL-字符编码"><a href="#HTML-URL-字符编码" class="headerlink" title="HTML URL 字符编码"></a>HTML URL 字符编码</h1><blockquote><p>URL 编码会将字符转换为可通过因特网传输的格式。<br>URL 编码<br>URL 只能使用 ASCII 字符集来通过因特网进行发送。<br>由于 URL 常常会包含 ASCII 集合之外的字符，URL 必须转换为有效的 ASCII 格式。<br>URL 编码使用 “%” 其后跟随两位的十六进制数来替换非 ASCII 字符。<br>URL 不能包含空格。URL 编码通常使用 + 来替换空格。</p></blockquote><h1 id="HTML-Web-Server"><a href="#HTML-Web-Server" class="headerlink" title="HTML Web Server"></a>HTML Web Server</h1><p><strong><em>如果希望向世界发布您的网站，那么您必须把它存放在 web 服务器上。<br>托管自己的网站</em></strong></p><p>在自己的服务器上托管网站始终是一个选项。有几点需要考虑：</p><ol><li><strong>硬件支出</strong><br>如果要运行“真正”的网站，您不得不购买强大的服务器硬件。不要指望低价的 PC 能够应付这些工作。<code>您还需要稳定的（一天 24 小时）高速连接。</code></li><li>软件支出<br>请记住，服务器授权通常比客户端授权更昂贵。同时请注意，服务器授权也许有用户数量限制。</li><li><strong>人工费</strong><br>不要指望低廉的人工费用。您必须安装自己的硬件和软件。您同时要处理漏洞和病毒，以确保您的服务器时刻正常地运行于一个“任何事都可能发生”的环境中。<br>使用因特网服务提供商（ISP）<br>从 ISP 租用服务器也很常见。<br>大多数小公司会把网站存放到由 ISP 提供的服务器上。其优势有以下几点：</li><li><strong>连接速度</strong><br>大多数 ISP 都拥有连接因特网的高速连接。</li><li><strong>强大的硬件</strong><br>ISP 的 web 服务器通常强大到能够由若干网站分享资源。您还要看一下 ISP 是否提供高效的负载平衡，以及必要的备份服务器。</li><li><strong>安全性和可靠性</strong><br>ISP 是网站托管方面的专家。他们应该提供 99% 以上的在线时间，最新的软件补丁，以及最好的病毒防护。</li></ol><p><strong>选择 ISP 时的注意事项</strong> </p><ul><li>24 小时支持<br><code>确保 ISP 提供 24 小时支持。</code>不要使自己置于无法解决严重问题的尴尬境地，同时还必须等待第二个工作日。如果您不希望支付长途电话费，那么免费电话服务也是必要的。<ul><li>每日备份<br>确保 ISP 会执行每日备份的例行工作，否则您有可能损失有价值的数据。</li><li>流量<br><code>研究一下 ISP 的流量限制。</code>如果出现由于网站受欢迎而激增的不可预期的访问量，那么您要确保不会因此支付额外费用。</li><li>带宽或内容限制<br><code>研究一下 ISP 的带宽和内容限制。</code>如果您计划发布图片或播出视频或音频，请确保您有此权限。</li><li>E-mail 功能<br><code>请确保 ISP 支持您需要的 e-mail 功能。</code></li><li>数据库访问<br>如果您计划使用网站数据库中的数据，那么请<code>确保您的 ISP 支持您需要的数据库访问。</code></li></ul></li></ul><h1 id="HTML-60-DOCTYPE-gt"><a href="#HTML-60-DOCTYPE-gt" class="headerlink" title="HTML &#60;!DOCTYPE&gt;"></a>HTML &#60;!DOCTYPE&gt;</h1><p><strong>*&lt;!DOCTYPE&gt; 声明<br>Web 世界中存在许多不同的文档。只有了解文档的类型，浏览器才能正确地显示文档。*</strong><br>HTML 也有多个不同的版本，只有完全明白页面中使用的确切 HTML 版本，浏览器才能完全正确地显示出 HTML 页面。这就是 &lt;!DOCTYPE&gt; 的用处。</p><p>==<strong>&#60;!DOCTYPE&gt; 不是 HTML 标签。它为浏览器提供一项信息（声明），即 HTML 是用什么版本编写的。</strong>==</p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓开发之线性布局（超级详细属性）</title>
      <link href="/2020/04/18/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E4%B9%8B%E7%BA%BF%E6%80%A7%E5%B8%83%E5%B1%80%EF%BC%88%E8%B6%85%E7%BA%A7%E8%AF%A6%E7%BB%86%E5%B1%9E%E6%80%A7%EF%BC%89/"/>
      <url>/2020/04/18/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E4%B9%8B%E7%BA%BF%E6%80%A7%E5%B8%83%E5%B1%80%EF%BC%88%E8%B6%85%E7%BA%A7%E8%AF%A6%E7%BB%86%E5%B1%9E%E6%80%A7%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/2020041801005622.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="安卓线性布局"><br>安卓界面布局一共有六种，但是目前使用较多或者说流行使用的有RelativeLayout（相对布局）、LinearLayout（线性布局）、GridLayout（表格布局）这三种布局。今天就来介绍一下LinearLayout（线性布局）。</p><a id="more"></a><h1 id="线性布局"><a href="#线性布局" class="headerlink" title="线性布局"></a>线性布局</h1><h2 id="BMI计算器"><a href="#BMI计算器" class="headerlink" title="BMI计算器"></a>BMI计算器</h2><p>这是一个比较典型的例子：<br><strong>一个BMI计算器</strong><br><img src="https://img-blog.csdnimg.cn/20200418000457222.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="布局详解"><a href="#布局详解" class="headerlink" title="布局详解"></a>布局详解</h2><p>以下是对页面分块的解释：<br><img src="https://img-blog.csdnimg.cn/20200417123648619.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="布局实现"><a href="#布局实现" class="headerlink" title="布局实现"></a>布局实现</h2><p><strong>要实现这个页面，就要一部分一部分的去创建和实现</strong></p><h3 id="创建一个布局页面"><a href="#创建一个布局页面" class="headerlink" title="创建一个布局页面"></a>创建一个布局页面</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 布局页面--&gt;</span><br><span class="line">&lt;LinearLayout</span><br><span class="line">    android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">    android:layout_height=<span class="string">"match_parent"</span></span><br><span class="line">    android:orientation=<span class="string">"vertical"</span></span><br><span class="line">    tools:context=<span class="string">".MainActivity"</span>&gt;</span><br><span class="line">    </span><br><span class="line">&lt;<span class="regexp">/LinearLayout&gt;</span></span><br></pre></td></tr></table></figure><h3 id="在布局里面加入布局一"><a href="#在布局里面加入布局一" class="headerlink" title="在布局里面加入布局一"></a>在布局里面加入布局一</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 布局页面--&gt;</span><br><span class="line">&lt;android.support.v7.widget.LinearLayoutCompat</span><br><span class="line">    android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">    android:layout_height=<span class="string">"match_parent"</span></span><br><span class="line">    android:orientation=<span class="string">"vertical"</span></span><br><span class="line">    tools:context=<span class="string">".MainActivity"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 布局一--&gt;</span><br><span class="line">&lt;android.support.v7.widget.LinearLayoutCompat</span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/android.support.v7.widget.LinearLayoutCompat&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>android.support.v7.widget.LinearLayoutCompat&gt;</span><br></pre></td></tr></table></figure><h3 id="再依次加入布局二、三、四"><a href="#再依次加入布局二、三、四" class="headerlink" title="再依次加入布局二、三、四"></a>再依次加入布局二、三、四</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;android.support.v7.widget.LinearLayoutCompat</span><br><span class="line">    android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">    android:layout_height=<span class="string">"match_parent"</span></span><br><span class="line">    android:orientation=<span class="string">"vertical"</span></span><br><span class="line">    tools:context=<span class="string">".MainActivity"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 布局一--&gt;</span><br><span class="line">&lt;android.support.v7.widget.LinearLayoutCompat</span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/android.support.v7.widget.LinearLayoutCompat&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;!-- 布局二--&gt;</span></span><br><span class="line"><span class="regexp">&lt;android.support.v7.widget.LinearLayoutCompat</span></span><br><span class="line"><span class="regexp">    android:layout_width="wrap_content"</span></span><br><span class="line"><span class="regexp">    android:layout_height="wrap_content"&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>android.support.v7.widget.LinearLayoutCompat&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- 布局三--&gt;</span><br><span class="line">&lt;android.support.v7.widget.LinearLayoutCompat</span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/android.support.v7.widget.LinearLayoutCompat&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;!-- 布局四--&gt;</span></span><br><span class="line"><span class="regexp">&lt;android.support.v7.widget.LinearLayoutCompat</span></span><br><span class="line"><span class="regexp">    android:layout_width="wrap_content"</span></span><br><span class="line"><span class="regexp">    android:layout_height="wrap_content"&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>android.support.v7.widget.LinearLayoutCompat&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/android.support.v7.widget.LinearLayoutCompat&gt;</span></span><br></pre></td></tr></table></figure><p>再可以在各个布局里面加入控件了</p><h3 id="添加控件"><a href="#添加控件" class="headerlink" title="添加控件"></a>添加控件</h3><p><strong><em>虽然Android Studio给我们提供了控件的拖拽页面，但是还是不希望大家这么用</em></strong><br><img src="https://img-blog.csdnimg.cn/2020041717371328.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="可以插入的控件"></p><p>比如我想插入图片控件。<br>直接在xml代码的布局下页面输入<code>&lt;im</code> 就会出现ImageView提示<br><img src="https://img-blog.csdnimg.cn/20200417174639381.png" alt="快捷插入控件"><br>按照这个操作插入相应的控件：</p><p><img src="https://img-blog.csdnimg.cn/20200417175330446.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="操作界面"><br><br></p><h1 id="常用的控件"><a href="#常用的控件" class="headerlink" title="常用的控件"></a>常用的控件</h1><p><strong>以下是一些常用的控件的解释及其作用</strong></p><table><thead><tr><th>控件</th><th>作用</th></tr></thead><tbody><tr><td>TextView</td><td>是用于显示字符串的组件，对于用户来说就是屏幕中一块用于显示文本的区域。</td></tr><tr><td>ImageView</td><td>显示任意图像，例如图标。view这个类是用户接口的基础构件。 View 表示屏幕上的一块矩形区域，负责绘制这个区域和事件处理。View 是所有widget类的基类，Widget 类用于创建交互式UI构件（按钮，输入框等）。</td></tr><tr><td>Button</td><td>是一个按钮式，可按下，或者点击，由用户执行的动作。</td></tr><tr><td>RadioButton</td><td>指的是一个单选按钮，它有选中和不选中两种状态。</td></tr><tr><td>RadioGroup</td><td>组件也被称为单项按钮组，它可以有多个RadioButton。一个单选按钮组只可以勾选一个按钮，当选择一个按钮时，会取消按钮组中其他已经勾选的按钮的选中状态。</td></tr><tr><td>CheckBox</td><td>多项选择组件也被称为复选框，该组件常用于某选项的打开或者关闭。</td></tr><tr><td>Toast</td><td>是Android提供的“快显讯息”类。</td></tr><tr><td>ToggleButton</td><td>一个开/关按钮带有指示灯。</td></tr><tr><td>Spinner</td><td>一个下拉列表，允许用户选择从一组一个值（类似HTML中的select）。</td></tr></tbody></table><p>==<strong>添加控件以后就会设置控件的属性</strong>==<br><strong>以下是控件属性的一些解释</strong></p><h1 id="控件常用属性及方法说明"><a href="#控件常用属性及方法说明" class="headerlink" title="控件常用属性及方法说明"></a>控件常用属性及方法说明</h1><p>在Android中组件的几乎所有属性都提供了两种方式来控制其行为，所以我们既可以在xml布局中直接静态赋值，也可以在代码中通过对应的方法进行动态控制，关系如下：</p><blockquote><p>这一部分是总结出来的用的比较频繁的属性</p></blockquote><table><thead><tr><th>属性</th><th>用途</th></tr></thead><tbody><tr><td>android:id</td><td>唯一标示，在java代码中我们可以通过findViewById()方法来通过Id获取控件。</td></tr><tr><td>android:background</td><td>设置背景</td></tr><tr><td>android:onClick</td><td>为该控件的单击事件绑定监听器</td></tr><tr><td>android:padding</td><td>设置控件四周的填充区域</td></tr><tr><td>android:visibility</td><td>设置该控件是否可见（invisible/visible/gone）</td></tr><tr><td>android:alpha</td><td>设置该组件透明度（0-1之间的数值）</td></tr><tr><td>android:layout_height</td><td>子组件的布局高度</td></tr><tr><td>android:layout_width</td><td>子组件的布局宽度</td></tr><tr><td>android:layout_margin</td><td>设置子组件的外边距</td></tr><tr><td>android:gravity</td><td>代表着TextView中文字对齐方式，有多种方式，我们在此选的是center,居中显示。</td></tr><tr><td>android:textSize</td><td>代表着TextView中文字的型号，也就是文字的大小。</td></tr><tr><td>android:textColor</td><td>设置的是TextView中文字的颜色，属性值是16进制的色值。</td></tr><tr><td>android:text</td><td>就是用来设置TextView显示的值的。</td></tr></tbody></table><blockquote><p>这一部分是相对更加全面的属性：</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20200417235508518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>要想实现对应空间的位置和属性就参照上面的方法说明进行设置！</strong></p><h1 id="BMI计算器的界面代码"><a href="#BMI计算器的界面代码" class="headerlink" title="BMI计算器的界面代码"></a>BMI计算器的界面代码</h1><p>例子的完整代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span><br><span class="line">&lt;android.support.constraint.ConstraintLayout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    xmlns:app=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span><br><span class="line">    xmlns:tools=<span class="string">"http://schemas.android.com/tools"</span></span><br><span class="line">    android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">    android:layout_height=<span class="string">"match_parent"</span></span><br><span class="line">    tools:context=<span class="string">".MainActivity"</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;android.support.v7.widget.LinearLayoutCompat</span><br><span class="line">    android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">    android:layout_height=<span class="string">"match_parent"</span></span><br><span class="line">    android:orientation=<span class="string">"vertical"</span>&gt;</span><br><span class="line">&lt;android.support.v7.widget.LinearLayoutCompat</span><br><span class="line">    android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">    android:layout_height=<span class="string">"wrap_content"</span>&gt;</span><br><span class="line"></span><br><span class="line">      &lt;android.support.v7.widget.AppCompatImageView</span><br><span class="line">        android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">        android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">        android:background=<span class="string">"@drawable/bmi"</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/android.support.v7.widget.LinearLayoutCompat&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;android.support.v7.widget.LinearLayoutCompat</span></span><br><span class="line"><span class="regexp">            android:layout_width="match_parent"</span></span><br><span class="line"><span class="regexp">            android:layout_height="wrap_content"&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">            &lt;TextView</span></span><br><span class="line"><span class="regexp">                android:layout_width="wrap_content"</span></span><br><span class="line"><span class="regexp">                android:layout_height="wrap_content"</span></span><br><span class="line"><span class="regexp">                android:text="身高:"</span></span><br><span class="line"><span class="regexp">                android:textSize="30dp"</span></span><br><span class="line"><span class="regexp">                android:inputType="numberDecimal"</span></span><br><span class="line"><span class="regexp">                /</span>&gt;</span><br><span class="line">            &lt;EditText</span><br><span class="line">                android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">                android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">                android:paddingLeft=<span class="string">"15dp"</span></span><br><span class="line">                android:hint=<span class="string">"输入身高(单位是厘米)"</span></span><br><span class="line">                android:id=<span class="string">"@+id/et_height"</span></span><br><span class="line">                /&gt;</span><br><span class="line">        &lt;<span class="regexp">/android.support.v7.widget.LinearLayoutCompat&gt;</span></span><br><span class="line"><span class="regexp">        &lt;LinearLayout</span></span><br><span class="line"><span class="regexp">            android:layout_width="match_parent"</span></span><br><span class="line"><span class="regexp">            android:layout_height="wrap_content"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;TextView</span></span><br><span class="line"><span class="regexp">                android:layout_width="wrap_content"</span></span><br><span class="line"><span class="regexp">                android:layout_height="wrap_content"</span></span><br><span class="line"><span class="regexp">                android:text="体重:"</span></span><br><span class="line"><span class="regexp">                android:textSize="30dp"</span></span><br><span class="line"><span class="regexp">                /</span>&gt;</span><br><span class="line">            &lt;EditText</span><br><span class="line">                android:layout_width=<span class="string">"match_parent"</span></span><br><span class="line">                android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">                android:paddingLeft=<span class="string">"15dp"</span></span><br><span class="line">                android:hint=<span class="string">"输入体重（单位是千克）"</span></span><br><span class="line">                android:inputType=<span class="string">"numberDecimal"</span></span><br><span class="line">                android:id=<span class="string">"@+id/et_weight"</span></span><br><span class="line">                /&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;<span class="regexp">/LinearLayout&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">        &lt;LinearLayout</span></span><br><span class="line"><span class="regexp">            android:layout_width="wrap_content"</span></span><br><span class="line"><span class="regexp">            android:layout_height="wrap_content"</span></span><br><span class="line"><span class="regexp">            android:layout_gravity="center"</span></span><br><span class="line"><span class="regexp">            android:orientation="vertical"</span></span><br><span class="line"><span class="regexp">            &gt;</span></span><br><span class="line"><span class="regexp">            &lt;RadioGroup</span></span><br><span class="line"><span class="regexp">                android:layout_width="wrap_content"</span></span><br><span class="line"><span class="regexp">                android:layout_height="wrap_content"</span></span><br><span class="line"><span class="regexp">                android:id="@+id/</span>rg<span class="string">"</span></span><br><span class="line"><span class="string">                android:orientation="</span>horizontal<span class="string">" android:layout_gravity="</span>center<span class="string">"</span></span><br><span class="line"><span class="string">                &gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                &lt;RadioButton</span></span><br><span class="line"><span class="string">                    android:id="</span>@+id/man<span class="string">"</span></span><br><span class="line"><span class="string">                    android:layout_width="</span><span class="number">119</span>dp<span class="string">"</span></span><br><span class="line"><span class="string">                    android:layout_height="</span>wrap_content<span class="string">"</span></span><br><span class="line"><span class="string">                    android:text="</span>男<span class="string">" /&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                &lt;RadioButton</span></span><br><span class="line"><span class="string">                    android:id="</span>@+id/woman<span class="string">"</span></span><br><span class="line"><span class="string">                    android:layout_width="</span><span class="number">96</span>dp<span class="string">"</span></span><br><span class="line"><span class="string">                    android:layout_height="</span>wrap_content<span class="string">"</span></span><br><span class="line"><span class="string">                    android:text="</span>女<span class="string">" /&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            &lt;/RadioGroup&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            &lt;LinearLayout</span></span><br><span class="line"><span class="string">                android:layout_width="</span>wrap_content<span class="string">"</span></span><br><span class="line"><span class="string">                android:layout_height="</span>wrap_content<span class="string">"&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                &lt;Button</span></span><br><span class="line"><span class="string">                    android:id="</span>@+id/bt_cal<span class="string">"</span></span><br><span class="line"><span class="string">                    android:layout_width="</span><span class="number">190</span>dp<span class="string">"</span></span><br><span class="line"><span class="string">                    android:layout_height="</span>wrap_content<span class="string">"</span></span><br><span class="line"><span class="string">                    android:onClick="</span>clickbt_cal<span class="string">"</span></span><br><span class="line"><span class="string">                    android:text="</span>计算<span class="string">" /&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                &lt;Button</span></span><br><span class="line"><span class="string">                    android:id="</span>@+id/bt_recal<span class="string">"</span></span><br><span class="line"><span class="string">                    android:layout_width="</span><span class="number">213</span>dp<span class="string">"</span></span><br><span class="line"><span class="string">                    android:layout_height="</span>wrap_content<span class="string">"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                    android:onClick="</span>clean_bmi<span class="string">"</span></span><br><span class="line"><span class="string">                    android:text="</span>重置<span class="string">" /&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            &lt;/LinearLayout&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            &lt;TextView</span></span><br><span class="line"><span class="string">                android:layout_width="</span>wrap_content<span class="string">"</span></span><br><span class="line"><span class="string">                android:layout_height="</span>wrap_content<span class="string">"</span></span><br><span class="line"><span class="string">                android:id="</span>@+id/tv_bmi<span class="string">"</span></span><br><span class="line"><span class="string">                android:textSize="</span><span class="number">20</span>dp<span class="string">"</span></span><br><span class="line">                android:textColor="#0700D4"</span><br><span class="line">                /&gt;</span><br><span class="line">        &lt;<span class="regexp">/LinearLayout&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>android.support.v7.widget.LinearLayoutCompat&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/android.support.constraint.ConstraintLayout&gt;</span></span><br></pre></td></tr></table></figure><h1 id="MainActivity代码"><a href="#MainActivity代码" class="headerlink" title="MainActivity代码"></a>MainActivity代码</h1><p><strong>对应的MainActivity代码已给出：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">package com.example.shencaijianceqi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.RadioButton;</span><br><span class="line"><span class="keyword">import</span> android.widget.RadioGroup;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span>  </span>&#123;</span><br><span class="line">    private TextView tvbmi;</span><br><span class="line">    private Button bt1,bt2,bt3;</span><br><span class="line">    private EditText et_height,et_weight;</span><br><span class="line">    private RadioButton man,woman;</span><br><span class="line">    @Override</span><br><span class="line">    protected <span class="keyword">void</span> onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        tvbmi = (TextView) findViewById(R.id.tv_bmi);</span><br><span class="line">        et_height=(EditText)findViewById(R.id.et_height);</span><br><span class="line">        et_weight=(EditText)findViewById(R.id.et_weight);</span><br><span class="line">        bt2=(Button)findViewById(R.id.bt_recal);</span><br><span class="line">        man=findViewById(R.id.man);</span><br><span class="line">        woman=findViewById(R.id.woman);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">void</span> clickbt_cal(View view) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        double height = Double.parseDouble(et_height.getText().toString()) ;</span><br><span class="line">        double weight= Double.parseDouble(et_weight.getText().toString()) ;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (height&gt;<span class="number">100</span>&amp;&amp;weight&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            height=height/<span class="number">100</span>;</span><br><span class="line">            double result = weight/height/height;</span><br><span class="line">            result = <span class="built_in">Math</span>.rint(result*<span class="number">10</span>)/<span class="number">10</span>;</span><br><span class="line">            tvbmi.setText(<span class="string">"根据软件的计算，你的BMI指数为：\n"</span>+result+<span class="string">"\n己自对照标准看吧"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(height&gt;<span class="number">10</span>&amp;&amp;weight&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            height=height/<span class="number">10</span>;</span><br><span class="line">            double result = weight/height/height;</span><br><span class="line">            result = <span class="built_in">Math</span>.rint(result*<span class="number">10</span>)/<span class="number">10</span>;</span><br><span class="line">            tvbmi.setText(<span class="string">"根据软件的计算，你的BMI指数为：\n"</span>+result+<span class="string">"\n己自对照标准看吧"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            tvbmi.setText(<span class="string">"您的输入有误，请重新输入"</span>);</span><br><span class="line">            et_weight.setText(<span class="string">""</span>);</span><br><span class="line">            et_height.setText(<span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="keyword">void</span> clean_bmi(View view) &#123;</span><br><span class="line">        et_weight.setText(<span class="string">""</span>);</span><br><span class="line">        et_height.setText(<span class="string">""</span>);</span><br><span class="line">        tvbmi.setText(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML基础_3</title>
      <link href="/2020/04/16/HTML%E5%9F%BA%E7%A1%80_3/"/>
      <url>/2020/04/16/HTML%E5%9F%BA%E7%A1%80_3/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/20200416103139583.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="HTML基础_3"><br>本部分主要介绍脚本，文件路径，以及头部元素！</p><a id="more"></a><h1 id="HTML-脚本"><a href="#HTML-脚本" class="headerlink" title="HTML 脚本"></a>HTML 脚本</h1><p>JavaScript 使 HTML 页面具有<strong>更强的动态和交互性。</strong></p><p><br><br></p><h2 id="HTML-script-元素"><a href="#HTML-script-元素" class="headerlink" title="HTML script 元素"></a>HTML script 元素</h2><p>script 标签用于定义客户端脚本，比如 JavaScript。</p><ul><li>script 元素既可包含脚本语句，也可通过 src 属性指向外部脚本文件。</li><li>必需的 type 属性规定脚本的 MIME 类型。</li><li>JavaScript 最常用于图片操作、表单验证以及内容动态更新。<br> ==下面的脚本会向浏览器输出“Hello World!”：==</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">"Hello World!"</span>)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><br><br></p><h2 id="lt-noscript-62-标签"><a href="#lt-noscript-62-标签" class="headerlink" title="&lt;noscript &#62;标签"></a>&lt;noscript &#62;标签</h2><p>  &lt;noscript &#62; 标签<strong>提供无法使用脚本时的替代内容</strong>，比方在浏览器禁用脚本时，或浏览器不支持客户端脚本时。<br>   noscript 元素可包含普通 HTML 页面的 body 元素中能够找到的所有元素。<br>如何应付老式的浏览器</p><ul><li>==如果浏览器压根没法识别 script 标签，那么 script 标签所包含的内容将以文本方式显示在页面上。==<ul><li>为了避免这种情况发生，你应该将脚本隐藏在注释标签当中。</li><li>那些老的浏览器（无法识别 script 标签的浏览器）将忽略这些注释，</li><li>所以不会将标签的内容显示到页面上。而那些新的浏览器将读懂这些脚本并执行它们，即使代码被嵌套在注释标签内。</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">JavaScript:</span><br><span class="line">   &lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">   &lt;!--</span><br><span class="line">   <span class="built_in">document</span>.write(<span class="string">"Hello World!"</span>)</span><br><span class="line">   <span class="comment">//--&gt;</span></span><br><span class="line">   &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">   </span></span><br><span class="line"><span class="regexp">VBScript:</span></span><br><span class="line"><span class="regexp">   &lt;script type="text/</span>vbscript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">   &lt;!--</span></span><br><span class="line"><span class="string">    document.write("</span>Hello World!<span class="string">")</span></span><br><span class="line"><span class="string">    '--&gt;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><br><br><h1 id="HTML-文件路径"><a href="#HTML-文件路径" class="headerlink" title="HTML 文件路径"></a>HTML 文件路径</h1><p><em>文件路径描述了网站文件夹结构中某个文件的位置。</em></p><p>文件路径会在链接外部文件时被用到：</p><ul><li>网页</li><li>图像</li><li>样式表</li><li>JavaScript</li></ul><p><br><br></p><h2 id="绝对文件路径"><a href="#绝对文件路径" class="headerlink" title="绝对文件路径"></a>绝对文件路径</h2><p>绝对文件路径是指向一个因特网文件的完整 <code>URL</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">"https://dss3.baidu.com/-rVXeDTa2gU2pMbgoY3K/it/u=864621958,2201859862&amp;fm=202&amp;src=780&amp;crossm&amp;mola=new&amp;crop=v1"</span>&gt;</span><br></pre></td></tr></table></figure><p><strong>以下是代码加载的效果：</strong></p><img src="https://dss3.baidu.com/-rVXeDTa2gU2pMbgoY3K/it/u=864621958,2201859862&fm=202&src=780&crossm&mola=new&crop=v1">  <br>  <br><h2 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h2><p>相对路径指向了相对于<strong>当前页面的文件</strong>。</p><blockquote><p>在本例中，文件路径指向了位于当前网站根目录中 images 文件夹里的一个文件：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">"/images/picture.jpg"</span> alt=<span class="string">"flower"</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="好习惯"><a href="#好习惯" class="headerlink" title="好习惯"></a>好习惯</h2><p>==使用相对路径是个好习惯（如果可能）==<br>  <br>  <br></p><h1 id="HTML-头部元素"><a href="#HTML-头部元素" class="headerlink" title="HTML 头部元素"></a>HTML 头部元素</h1><h2 id="HTML-60-head-62-元素"><a href="#HTML-60-head-62-元素" class="headerlink" title="HTML &#60;head&#62; 元素"></a>HTML &#60;head&#62; 元素</h2><p>&#60;head&#62;元素是所有头部元素的容器。&#60;head&#62; 内的元素可包含脚本，指示浏览器在何处可以找到样式表，提供元信息，等等。<br>以下标签都可以添加到 head 部分：<strong>&#60;title&#62;、&#60;base&#62;、&#60;link&#62;、&#60;meta&#62;、&#60;script&#62;以及&#60;style&#62;。</strong></p><br /><h2 id="HTML-60-title-62-元素"><a href="#HTML-60-title-62-元素" class="headerlink" title="HTML &#60;title&#62; 元素"></a>HTML &#60;title&#62; 元素</h2><p>  <em>&#60;title&#62;标签定义文档的标题。</em></p><ul><li>title 元素在所有 HTML/XHTML 文档中都是必需的。<blockquote><p>title 元素能够：</p><ol><li>定义浏览器工具栏中的标题</li><li>提供页面被添加到收藏夹时显示的标题<ol start="3"><li>显示在搜索引擎结果中的页面标题</li></ol></li></ol></blockquote></li></ul><p>一个简化的 HTML 文档：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">    &lt;html&gt;</span><br><span class="line">    &lt;head&gt; </span><br><span class="line">       &lt;title&gt;Title <span class="keyword">of</span> the <span class="built_in">document</span>&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        The content <span class="keyword">of</span> the <span class="built_in">document</span>......</span><br><span class="line">    &lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &lt;/</span>html&gt;</span><br></pre></td></tr></table></figure><br />   <br /><br />   <h2 id="HTML-60-base-gt-元素"><a href="#HTML-60-base-gt-元素" class="headerlink" title="HTML &#60;base&gt; 元素"></a>HTML &#60;base&gt; 元素</h2><p>&#60;base&#62; 标签为页面上的所有链接规定默认地址或默认目标（target）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;base href=<span class="string">"http://www.w3school.com.cn/images/"</span> /&gt;</span><br><span class="line">  &lt;base target=<span class="string">"_blank"</span> /&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br></pre></td></tr></table></figure><p>   <br /><br />    </p><h2 id="HTML-60-link-62-元素"><a href="#HTML-60-link-62-元素" class="headerlink" title="HTML &#60;link&#62; 元素"></a>HTML &#60;link&#62; 元素</h2><p>   <em>&#60;link&gt; 标签定义文档与外部资源之间的关系。</em><br>   <strong>&#60;link&gt; 标签最常用于连接样式表：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;link rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href=<span class="string">"mystyle.css"</span> /&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br></pre></td></tr></table></figure><br/><h2 id="HTML-60-meta-gt-元素"><a href="#HTML-60-meta-gt-元素" class="headerlink" title="HTML &#60;meta&gt; 元素"></a>HTML &#60;meta&gt; 元素</h2><p><em>元数据（metadata）是关于数据的信息。</em></p><blockquote><p>&#60;meta&gt; 标签提供关于 HTML 文档的元数据。元数据不会显示在页面上，但是对于机器是可读的。</p></blockquote><p> <strong>典型的情况是，meta 元素被用于规定页面的描述、关键词、文档的作者、最后修改时间以及其他元数据。</strong></p><ul><li>&#60;meta&gt;标签始终位于 head 元素中。</li><li>元数据可用于浏览器（如何显示内容或重新加载页面），搜索引擎（关键词），或其他 web 服务。</li></ul><p>   <strong>针对搜索引擎的关键词</strong><br>    一些搜索引擎会利用 meta 元素的 name 和 content 属性来索引您的页面。</p><blockquote><p>下面的 meta 元素定义页面的描述：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=<span class="string">"description"</span> content=<span class="string">"Free Web tutorials on HTML, CSS, XML"</span> /&gt;</span><br></pre></td></tr></table></figure><blockquote><p>下面的 meta 元素定义页面的关键词：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=<span class="string">"keywords"</span> content=<span class="string">"HTML, CSS, XML"</span> /&gt;</span><br></pre></td></tr></table></figure><p><strong><em><code>注释：name 和 content 属性的作用是描述页面的内容。</code></em></strong></p><br /><br /><h2 id="HTML-字符实体"><a href="#HTML-字符实体" class="headerlink" title="HTML 字符实体"></a>HTML 字符实体</h2><p><em>在 HTML 中，某些字符是预留的。在 HTML 中不能使用小于号（&lt;）和大于号（&gt;），这是因为浏览器会误认为它们是标签。</em></p><p>如果希望正确地<strong>显示预留字符</strong>，我们必须在 HTML 源代码中使用<code>字符实体（character entities）。</code><br>字符实体类似这样：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&amp;entity_name;</span><br><span class="line">或者</span><br><span class="line">&amp;#entity_number;</span><br></pre></td></tr></table></figure><blockquote><p>如需显示小于号，我们必须这样写：</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;lt; 或 &amp;#60;</span><br></pre></td></tr></table></figure><p><code>提示：使用实体名而不是数字的好处是，名称易于记忆。不过坏处是，浏览器也许并不支持所有实体名称（对实体数字的支持却很好）。</code></p><p>==<strong>到这里，HTML基础第三部分就结束啦</strong>==</p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML基础_2</title>
      <link href="/2020/04/15/HTML%E5%9F%BA%E7%A1%80_2/"/>
      <url>/2020/04/15/HTML%E5%9F%BA%E7%A1%80_2/</url>
      
        <content type="html"><![CDATA[<p> <img src="http://img0.imgtn.bdimg.com/it/u=1243577106,1339598058&fm=26&gp=0.jpg" alt="HTML基础_2"><br> 这部分主要聊一聊css样式的一些知识<br> <a id="more"></a></p><h1 id="css样式："><a href="#css样式：" class="headerlink" title="css样式："></a>css样式：</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">     &lt;style type=<span class="string">"text/css"</span>&gt;</span><br><span class="line">     h1 &#123;<span class="attr">color</span>: red&#125;</span><br><span class="line">     p &#123;<span class="attr">color</span>: blue&#125;</span><br><span class="line">     &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">     </span><br><span class="line">   &lt;body&gt;</span><br><span class="line">     &lt;h1&gt;header <span class="number">1</span>&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">     &lt;p&gt;A paragraph.&lt;/</span>p&gt;</span><br><span class="line">   &lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><h2 id="如何使用样式"><a href="#如何使用样式" class="headerlink" title="如何使用样式"></a>如何使用样式</h2><p>   当浏览器读到一个样式表，它就会按照这个样式表来对文档进行格式化。有以下三种方式来插入样式表：</p><h3 id="外部表样式："><a href="#外部表样式：" class="headerlink" title="外部表样式："></a>外部表样式：</h3><p>当样式需要被应用到很多页面的时候，外部样式表将是理想的选择。使用外部样式表，你就可以通过更改一个文件来改变整个站点的外观。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;mystyle.css&quot;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br></pre></td></tr></table></figure><h3 id="内部表样式："><a href="#内部表样式：" class="headerlink" title="内部表样式："></a>内部表样式：</h3><p>当单个文件需要特别样式时，就可以使用内部样式表。你可以在 <strong>head</strong> 部分通过 <strong>style</strong>  标签定义内部样式表</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;style type=<span class="string">"text/css"</span>&gt;</span><br><span class="line">    body &#123;background-color: red&#125;</span><br><span class="line">    p &#123;margin-left: <span class="number">20</span>px&#125;</span><br><span class="line">   &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br></pre></td></tr></table></figure><h3 id="内联样式："><a href="#内联样式：" class="headerlink" title="内联样式："></a>内联样式：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;p style=<span class="string">"color: red; margin-left: 20px"</span>&gt;</span><br><span class="line">     This is a paragraph</span><br><span class="line">&lt;<span class="regexp">/p&gt;</span></span><br></pre></td></tr></table></figure><p> <br> <br></p><h2 id="HTML-链接-target-属性"><a href="#HTML-链接-target-属性" class="headerlink" title="HTML 链接 - target 属性"></a>HTML 链接 - target 属性</h2><pre><code>使用 Target 属性，你可以定义被链接的文档在何处显示。设置为 targrt=&quot;_blank&quot;下面的这行会在新窗口打开文档：</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">"http://www.baidu.com.cn/"</span> target=<span class="string">"_blank"</span>&gt;Visit W3School!&lt;<span class="regexp">/a&gt;</span></span><br></pre></td></tr></table></figure> <br>  <br> <h2 id="替换文本属性（Alt）"><a href="#替换文本属性（Alt）" class="headerlink" title="替换文本属性（Alt）"></a>替换文本属性（Alt）</h2><p><strong>alt</strong> 属性用来为图像定义一串预备的可替换的文本。替换文本属性的值是用户定义的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">"boat.gif"</span> alt=<span class="string">"Big Boat"</span>&gt;</span><br></pre></td></tr></table></figure><p>   <br> <br></p><h2 id="设置背景图片"><a href="#设置背景图片" class="headerlink" title="设置背景图片"></a>设置背景图片</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;body background=<span class="string">"/i/eg_background.jpg"</span>&gt;&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><h2 id="文字中排列图像"><a href="#文字中排列图像" class="headerlink" title="文字中排列图像"></a>文字中排列图像</h2><p> 请注意，==bottom== 对齐方式是默认的对齐方式<br>    <strong>align</strong> 属性设置为 “<strong>left</strong>“。图像将浮动到文本的左侧。<br>    <strong>align</strong> 属性设置为 “<strong>right</strong>“。图像将浮动到文本的右侧。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;图像 &lt;img src=<span class="string">"/i/eg_cute.gif"</span> align=<span class="string">"bottom"</span>&gt; 在文本中&lt;<span class="regexp">/p&gt;</span></span><br></pre></td></tr></table></figure><p>  通过改变 <strong>img</strong> 标签的 “<strong>height</strong>“ 和 “<strong>width</strong>“ 属性的值，您可以<strong>放大或缩小图像。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">"/i/eg_mouse.jpg"</span> width=<span class="string">"50"</span> height=<span class="string">"50"</span>&gt;</span><br></pre></td></tr></table></figure><p>   <em>图片也可以嵌套为连接使用。</em><br>   <br> <br> <br></p><h2 id="div是一个块级元素"><a href="#div是一个块级元素" class="headerlink" title="div是一个块级元素"></a>div是一个块级元素</h2><p>   作用的样式可以以块为单位</p><pre><code>HTML &lt;span&gt; 元素是行内元素，能够用作文本的容器。设置 &lt;span&gt; 元素的类，能够为相同的 &lt;span&gt; 元素设置相同的样式。</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">          span.red &#123;<span class="attr">color</span>:red;&#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">    ...</span></span><br><span class="line"><span class="regexp">      &lt;body&gt;</span></span><br><span class="line"><span class="regexp">           &lt;h1&gt;My &lt;span class="red"&gt;Important&lt;/</span>span&gt; Heading&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><p>==<strong><em>到这里，HTML基础_2就结束啦</em></strong>==</p><p> <br> <br><br>大家可以<strong>点个赞</strong>或者去我的<a href="https://blog.csdn.net/qq_43370892/article/details/105546942" target="_blank" rel="noopener"><strong>csdn博客</strong></a>支持一下博主。<br>     感谢浏览！</p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML基础_1</title>
      <link href="/2020/04/14/HTML%E5%9F%BA%E7%A1%80_1/"/>
      <url>/2020/04/14/HTML%E5%9F%BA%E7%A1%80_1/</url>
      
        <content type="html"><![CDATA[<p><img src="https://dss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=3497890108,3867706537&fm=26&gp=0.jpg" alt="HTML基础_1"> </p><p>   作为JavaWeb必须会的HTML语言，这里就大体了解一下基础部分，第一部分。<br>   <a id="more"></a></p><h1 id="HTML的标题"><a href="#HTML的标题" class="headerlink" title="HTML的标题"></a>HTML的标题</h1><pre><code>标题可以分为&lt;h1&gt;到&lt;h6&gt; 6个等级标签定义</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;一级标题&lt;&#x2F;h1&gt; </span><br><span class="line">&lt;h2&gt;二级标题&lt;&#x2F;h2&gt; </span><br><span class="line">&lt;h3&gt;三级标题&lt;&#x2F;h3&gt;  </span><br><span class="line">&lt;h4&gt;四级标题&lt;&#x2F;h4&gt; </span><br><span class="line">&lt;h5&gt;五级标题&lt;&#x2F;h5&gt; </span><br><span class="line">&lt;h6&gt;六级标题&lt;&#x2F;h6&gt;</span><br></pre></td></tr></table></figure><h1 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h1><p>   段落用p标签定义<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;P&gt;段落，内容可以很长&lt;&#x2F;P&gt;</span><br></pre></td></tr></table></figure><br>   <strong>例子：</strong><br>    <a href="oldaz.github.io">我的博客链接</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;oldaz.github.io&quot;&gt;我的博客链接&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><pre><code>链接 通过a标签定义 herf 是属性中指定的地址</code></pre><h1 id="HTML中添加图片"><a href="#HTML中添加图片" class="headerlink" title="HTML中添加图片"></a>HTML中添加图片</h1>   <img src="https://dss0.bdstatic.com/6Ox1bjeh1BF3odCf/it/u=2683299436,2749747196&fm=173&app=49&f=JPEG?w=218&h=146&s=8F009A4DE7901E78120A203E0300C05A"/><p>==图片的代码如下：==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;https:&#x2F;&#x2F;dss0.bdstatic.com&#x2F;6Ox1bjeh1BF3odCf&#x2F;it&#x2F;u&#x3D;2683299436,2749747196&amp;fm&#x3D;173&amp;app&#x3D;49&amp;f&#x3D;JPEG?w&#x3D;218&amp;h&#x3D;146&amp;s&#x3D;8F009A4DE7901E78120A203E0300C05A&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><pre><code>图像是由&lt;img&gt;标签定义的 ，其中src=&quot;l里面为图片的地址或者文件路径&quot;</code></pre><h1 id="HTML中的元素"><a href="#HTML中的元素" class="headerlink" title="HTML中的元素"></a>HTML中的元素</h1><p>   html元素是指的从开始标签到结束标签的所有的代码</p><h1 id="嵌套的HTML元素"><a href="#嵌套的HTML元素" class="headerlink" title="嵌套的HTML元素"></a>嵌套的HTML元素</h1><p>   大多数量的html元素可以嵌套其他的html元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a &gt;&lt;span&gt;嵌套&lt;&#x2F;span&gt;&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><h1 id="HTML属性"><a href="#HTML属性" class="headerlink" title="HTML属性"></a>HTML属性</h1><p>   html标签可以拥有属性，属性提供了有关的html元素的更多信息。<br>   属性总是以名称/值对的形式出现，比如：name=”value”或者id=”value”</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a herf&#x3D;&quot;http: &#x2F;&#x2F;oldaz.github.io&quot;&gt;a标签的herf就是属性的指定&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><h1 id="换行标签"><a href="#换行标签" class="headerlink" title="换行标签"></a>换行标签</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;br&#x2F;&gt;</span><br></pre></td></tr></table></figure><h1 id="html水平线"><a href="#html水平线" class="headerlink" title="html水平线"></a>html水平线</h1><p><strong>效果如下：</strong><br> <hr/><br> ==代码如下==</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;hr&#x2F;&gt;</span><br></pre></td></tr></table></figure><h1 id="HTML-注释"><a href="#HTML-注释" class="headerlink" title="HTML 注释"></a>HTML 注释</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--这里为注释的内容--&gt;</span><br></pre></td></tr></table></figure><h1 id="HTML中style-属性的作用"><a href="#HTML中style-属性的作用" class="headerlink" title="HTML中style 属性的作用"></a>HTML中style 属性的作用</h1><p>==<strong>这里提供关键代码提示，方便使用查阅</strong>==</p><blockquote><p>背景色 background-color<br> 字体 font-family<br> 字体尺寸 font-size<br> 文本对齐 style=”text-align:center”</p></blockquote><h1 id="文本格式化"><a href="#文本格式化" class="headerlink" title="文本格式化"></a>文本格式化</h1><p><strong><em>注释：这里用代码的格式是因为markdown里面如果直接写HTML代码就直接编译了，不能呈现出来。所以用的代码格式显示，可是没有用注释；稍稍不太专业。</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">定义粗体文字 &lt;b&gt;&lt;&#x2F;b&gt;</span><br><span class="line">    定义大号字  &lt;big&gt;&lt;&#x2F;big&gt;</span><br><span class="line">    定义着重文字 &lt;em&gt;&lt;&#x2F;em&gt;</span><br><span class="line">    定义斜体字  &lt;i&gt;&lt;&#x2F;i&gt;</span><br><span class="line">    定义小号字  &lt;small&gt;&lt;&#x2F;small&gt;</span><br><span class="line">    定义加重语气 &lt;strong&gt;&lt;&#x2F;strong&gt;</span><br><span class="line">    定义下标字  &lt;sub&gt;&lt;&#x2F;sub&gt;</span><br><span class="line">    定义上标字 &lt;sup&gt;&lt;&#x2F;sup&gt;</span><br><span class="line">    定义插入字 &lt;ins&gt;&lt;&#x2F;ins&gt;</span><br><span class="line">    定义删除字 &lt;del&gt;&lt;&#x2F;del&gt;</span><br></pre></td></tr></table></figure><h1 id="计算机输出标签"><a href="#计算机输出标签" class="headerlink" title="计算机输出标签"></a>计算机输出标签</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"> 定义计算机代码：</span><br><span class="line">     &lt;code&gt;&lt;&#x2F;code&gt;</span><br><span class="line">     </span><br><span class="line">    定义键盘码 ：</span><br><span class="line">    &lt;kbd&gt;&lt;&#x2F;kbd&gt;</span><br><span class="line">    </span><br><span class="line">    定义计算机代码样本：</span><br><span class="line">    &lt;samp&gt;&lt;&#x2F;samp&gt;</span><br><span class="line">     </span><br><span class="line">    定义打字机代码 ：</span><br><span class="line">    &lt;tt&gt;&lt;&#x2F;tt&gt;</span><br><span class="line">    </span><br><span class="line">    定义变量：</span><br><span class="line">    &lt;var&gt;&lt;&#x2F;var&gt;</span><br><span class="line">    </span><br><span class="line">    定义预格式文本：</span><br><span class="line">    &lt;pre&gt;&lt;&#x2F;pre&gt;</span><br><span class="line">    </span><br><span class="line">    引用、引用和术语定义：</span><br><span class="line">    &lt;abbr title&#x3D;&quot;etcetera&quot;&gt;etc.&lt;&#x2F;abbr&gt;</span><br><span class="line">    &lt;p&gt;&lt;abbr title&#x3D;&quot;World Health Organization&quot;&gt;WHO&lt;&#x2F;abbr&gt; 成立于 1948 年。&lt;&#x2F;p&gt;</span><br><span class="line">    </span><br><span class="line">    定义首字母缩写：</span><br><span class="line">    &lt;acronym title&#x3D;&quot;World Wide Web&quot;&gt;WWW&lt;&#x2F;acronym&gt;</span><br><span class="line">    </span><br><span class="line">    定义文字方向：</span><br><span class="line">    &lt;bdo&gt;66&lt;&#x2F;bdo&gt;</span><br><span class="line">    </span><br><span class="line">    HTML 用于短的引用：</span><br><span class="line">    &lt;q&gt;引用会带双引号&lt;&#x2F;q&gt;</span><br><span class="line">    </span><br><span class="line">   用于长引用的 HTML (自动裁切)：</span><br><span class="line">   &lt;blockquote cite&#x3D;&quot; https:&#x2F;&#x2F;www.cnblogs.com&#x2F;478424260jyx&#x2F;p&#x2F;10747338.html&quot;&gt;&lt;&#x2F;blockquote&gt;</span><br><span class="line">   </span><br><span class="line">   用于定义的 HTML &lt;dfn&gt;：</span><br><span class="line">    &lt;p&gt;&lt;dfn title&#x3D;&quot;World Health Organization&quot;&gt;WHO&lt;&#x2F;dfn&gt; 成立于 1948 年。&lt;&#x2F;p&gt;</span><br><span class="line">    </span><br><span class="line">  用于联系信息的作者&#x2F;拥有者</span><br><span class="line">    &lt;address&gt;</span><br><span class="line">        Written by Jon Doe.&lt;br&gt; </span><br><span class="line">        Visit us at:&lt;br&gt;</span><br><span class="line">        Example.com&lt;br&gt;</span><br><span class="line">        Box 564, Disneyland&lt;br&gt;</span><br><span class="line">        USA</span><br><span class="line">        &lt;&#x2F;address&gt;</span><br><span class="line">        </span><br><span class="line">用于著作标题的 HTML &lt;cite&gt;：</span><br><span class="line">    &lt;p&gt;&lt;cite&gt;The Scream&lt;&#x2F;cite&gt; by Edward Munch. Painted in 1893.&lt;&#x2F;p&gt;</span><br><span class="line">    </span><br><span class="line">用于双向重写的 HTML &lt;bdo&gt;（反向书写）：</span><br><span class="line">    &lt;bdo dir&#x3D;&quot;rtl&quot;&gt;This text will be written from right to left&lt;&#x2F;bdo&gt;</span><br></pre></td></tr></table></figure><p>到这里，HTML基础第一部分就差不多啦。</p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java安装jdk和配置环境</title>
      <link href="/2020/04/12/Java%E5%AE%89%E8%A3%85jdk%E5%92%8C%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/"/>
      <url>/2020/04/12/Java%E5%AE%89%E8%A3%85jdk%E5%92%8C%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p><img src="https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2223999780,610748571&fm=26&gp=0.jpg" alt="JAVA" title="JAVA">&lt;<strong>细说安装JDK和配置环境</strong>&gt;</p><a id="more"></a><h1 id="Java的特点"><a href="#Java的特点" class="headerlink" title="Java的特点"></a>Java的特点</h1><p>Java是目前使用最为广泛的网络语言之一，它具有语法简单，面向对象，稳定，与平台无关，动态，多线程等特点。Java<strong>与平台无关</strong>是最初风靡世界的最重要的原因。</p><p>Java要实现“编译一次，处处运行”（Write once ，run anywhere）的目标，就必须提供相应的Java运行环境，即运行Java程序的平台。</p><h1 id="平台简介及安装"><a href="#平台简介及安装" class="headerlink" title="平台简介及安装"></a>平台简介及安装</h1><p><strong>最新的JDK为1.8（8.0）</strong><br>DevelopmentKit (JDK).利用该平台可以开发Java桌面应用程序和低端的服务器应用程序。当前最新的JDK版本为JDK 1.8, Sum 公司把这-最新的版本命名为 JDK8.0.但人们仍然习惯地称作JDK 1.8.<br>##安装JDK及配置环境</p><h2 id="1-安装JDK"><a href="#1-安装JDK" class="headerlink" title="1.安装JDK"></a>1.安装JDK</h2><p>Java要实现“编译一次，处处运行”（Write once ，run anywhere）的目标，就必须提供相应的Java运行环境，即运行Java程序的平台<br>Java语言的最任平台，而掌握JavaSE又是进一步学习Java EE和Android学习Java最好选用Java SE提供的lava软件开发工具箱JDK. Java SE平台是学习掌Java EE和Android所必需的。<br>目前有许多很好的Java集成开发环境(ntegrated Devlopment Environment, IDE)可用，列如NetBean. MyEelipse 等。Java集成开发环境都将JDK作为系统的核心，非常有利于快速地开发各种基于Java语言的应用程序。但学习Java最好直接选用Java SE提供的JDK,因为Java集成开发环境的目的是更好、更快地开发程序，不仅系统的界面往往比较复杂，而且也会屏蔽掉一些知识点。 在掌握了Java 语言之后，再去熟悉、掌握一个流行的Java集成开发环境即可。<br>可以登录官方网址<strong><a href="http://www.oracle.com/technetwork/java/javasc/downloads/index.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javasc/downloads/index.html</a></strong>免费下载Java SE提供的JDK。使用Windows操作系统( 64位机器),下载的版本为JDK1.8(jdk-8u102-windows-x64.exe);如果使用其他的操作系统，可以下载相应的JDK。</p><blockquote><p>注：jdk-8u102-windows x64 exe. jdk 8u40-windows-i586.cxe (32位机器)以及API帮助文档jdk-8u25-docs-all.zip.这里将网盘的下载链接搬运到这儿了，下载地址分别是:<br><em>htp://pan.baidu.com/s/1dFunMsp<br>htp://pan.baidu.com/s/1dF0Zxyp<br>htp://pan.baidu.com/s/1jHRDyV8</em></p></blockquote><p>双击下载后的idk 8u102 windows-x64 exe文件图标出现安装向导界面，选择接受软件安发协议。可以使用安装向导界面进行安装。</p><h2 id="2-配置系统环境"><a href="#2-配置系统环境" class="headerlink" title="2.配置系统环境"></a>2.配置系统环境</h2><p>1.首先，右击“==此电脑==”，选择“==属性==”</p><p>2.选择“高级系统设置”<img src="https://img-blog.csdnimg.cn/20190328221207826.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>3.选择“==环境变量==”<img src="https://img-blog.csdnimg.cn/20190328221406108.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>4.选择“==新建==”<br><img src="https://img-blog.csdnimg.cn/20190328221514711.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>5.点击新建后，就会出现这个，变量名为“==JAVA_HOME==”(复制我引号内的内容就可以了，不含引号，下同)，变量值，必须是自己装jdk时的路径，比如我的安装路径是E:java\jdk,路径问题也需要注意</p><p>6.接下来找到“==CLASSPATH==”,没有的话就“新建”</p><p>7.变量名为“==CLASSPATH==”变量的值“==.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;==”</p><p>8.找到==Path==，对其进行编辑，在其原有变量值前加上“==;%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;==”，加的方法就是这样的C:变量值</p><p>9.记得完成后要点==两个确定==</p><p>10.最后，就是测试自己配置是否成功了，同时按 <kbd>Win</kbd> + <kbd>R</kbd>(那个windows标志的键)，输入==cmd==。<br><img src="https://img-blog.csdnimg.cn/20190328221444130.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>11.进入命令提示符，输入==JAVA==，点击<kbd>Eenter</kbd>，出来这些中文，就行了<img src="https://img-blog.csdnimg.cn/20190328222420651.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>12.再输入==JAVAC==,点击<kbd>Eenter</kbd>，出来这些中文就行了<img src="https://img-blog.csdnimg.cn/20190328221541535.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="（三）编写Java程序"><a href="#（三）编写Java程序" class="headerlink" title="（三）编写Java程序"></a>（三）编写Java程序</h1><p>Java程序开发步骤如下图所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[编写源文件] -- 使用编译器 --&gt; B[编译源文件]</span><br><span class="line">B--产生 --&gt; C[字节码]</span><br><span class="line">C-- 使用解释器 --&gt;D[执行字节码]</span><br></pre></td></tr></table></figure><h2 id="1-编写源文件"><a href="#1-编写源文件" class="headerlink" title="1.编写源文件"></a>1.编写源文件</h2><p>  这里介绍一下用文本编辑器写Java应用程序：<br>  使用一个文本编辑器，如Edit或记事本编写下面给出的源文件。<br>Java源程序中语句所涉及的小括号及标点符号都是英文状态下输入的括号和标点符号，比如”大家好”中的引号必须是英文状态下的引号，而字符串里面的符号不受汉字字符或英文字符的限制。<br>在编写程序时，应养成良好的编码习惯，例如一行最好只写一条语句，保持良好的缩进等。大括号的占行习惯有两种，-种是向左的大括号“{”和向右的大括号“}”都独占一行:另种是向左的大括号“{”在上一行的尾部，向右的大括号“}”独占一行。大家可以选择自己喜欢的类型。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">   public <span class="keyword">static</span> <span class="keyword">void</span> main (<span class="built_in">String</span> args[])&#123;</span><br><span class="line">      System.out.println(<span class="string">"大家好"</span>);</span><br><span class="line">      System.out.println(<span class="string">"这是一个Java程序"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-保存源文件"><a href="#2-保存源文件" class="headerlink" title="2.保存源文件"></a>2.保存源文件</h2><p>如果源文件中只有一个类，那么源文件的名字必须与这个类的名字完全相同，扩展名是java;如果源文件中有多个类，那么只能有一个类是public类; 如果有如果源文件件没有public类，那么源文件的名字只要和某个类的名字相同，并且扩展名是java就可以了。<br>上述例子1中的源文件必须命名为Hello.我们将Hello.保存到文件夹中。<br>在保存源文件时，系统会自动给文件名尾加上“txt”。那就自己改为     .<strong>java</strong></p><h2 id="3-编译和运行"><a href="#3-编译和运行" class="headerlink" title="3.编译和运行"></a>3.编译和运行</h2><p>对其进行编译。在保存了Hello.java 源文件后，就可以使用Java编译器(javac.exe)<br>使用IDK环境开发Java程序，需打开MS-DOS命令行窗口<strong>同时按住<kbd>win</kbd>+<kbd>R</kbd>然后书如==cmd==点击确定</strong>(Windows 环境叫命超下符),使用几个简单的DOS操作命令。例如，从逻辑分区c转到逻辑分区e,需在命令行依次输入e和冒号(<strong>e:</strong>)并<kbd>Enter</kbd>确认:进入某个子目录(文件夹)的命令是“cd目录名”;退出某个子目录的命令是“<strong>cd.  .</strong>”<br>依次输入如下图的命令：（每一行输完都要按<kbd>Enter</kbd>）<br><img src="https://img-blog.csdnimg.cn/20190329182416536.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMzcwODky,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>==<strong>到这里第一个Java程序就已经编写完成啦</strong>==</p><h1 id="我的CSDN"><a href="#我的CSDN" class="headerlink" title="我的CSDN"></a><a href="https://blog.csdn.net/qq_43370892/article/details/88879871?utm_source=app" target="_blank" rel="noopener">我的CSDN</a></h1>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
